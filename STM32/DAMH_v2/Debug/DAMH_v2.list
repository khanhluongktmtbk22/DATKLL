
DAMH_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008408  08008408  00018408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008864  08008864  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008864  08008864  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008864  08008864  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800886c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001dc  08008a48  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008a48  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014051  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  00034256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00037bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019237  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014166  00000000  00000000  00051e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093892  00000000  00000000  00065f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f980f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a80  00000000  00000000  000f9864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080083ec 	.word	0x080083ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080083ec 	.word	0x080083ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <DHT20_Read>:
    ret = HAL_I2C_Master_Transmit(hi2c, DHT20_I2C_ADDRESS, init_data, 3, 2000);
    HAL_Delay(10); // Đợi cảm biến khởi động
    return ret;
}

HAL_StatusTypeDef DHT20_Read(I2C_HandleTypeDef *hi2c, DHT20_Data *data) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
    uint8_t read_command = 0xAC;
 800103a:	23ac      	movs	r3, #172	; 0xac
 800103c:	77fb      	strb	r3, [r7, #31]
    uint8_t raw_data[7];
    HAL_StatusTypeDef ret;

    // Gửi yêu cầu đọc dữ liệu
    uint8_t request_data[3] = {read_command, 0x33, 0x00};
 800103e:	7ffb      	ldrb	r3, [r7, #31]
 8001040:	723b      	strb	r3, [r7, #8]
 8001042:	2333      	movs	r3, #51	; 0x33
 8001044:	727b      	strb	r3, [r7, #9]
 8001046:	2300      	movs	r3, #0
 8001048:	72bb      	strb	r3, [r7, #10]
    ret = HAL_I2C_Master_Transmit(hi2c, DHT20_I2C_ADDRESS, request_data, 3, 2000);
 800104a:	f107 0208 	add.w	r2, r7, #8
 800104e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2303      	movs	r3, #3
 8001056:	2170      	movs	r1, #112	; 0x70
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f001 fd89 	bl	8002b70 <HAL_I2C_Master_Transmit>
 800105e:	4603      	mov	r3, r0
 8001060:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) return ret;
 8001062:	7fbb      	ldrb	r3, [r7, #30]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <DHT20_Read+0x3c>
 8001068:	7fbb      	ldrb	r3, [r7, #30]
 800106a:	e056      	b.n	800111a <DHT20_Read+0xea>

    // Chờ một chút trước khi đọc
    HAL_Delay(80);
 800106c:	2050      	movs	r0, #80	; 0x50
 800106e:	f000 fe8f 	bl	8001d90 <HAL_Delay>

    // Đọc dữ liệu trả về
    ret = HAL_I2C_Master_Receive(hi2c, DHT20_I2C_ADDRESS, raw_data, 7, HAL_MAX_DELAY);
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2307      	movs	r3, #7
 800107e:	2170      	movs	r1, #112	; 0x70
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f001 fe73 	bl	8002d6c <HAL_I2C_Master_Receive>
 8001086:	4603      	mov	r3, r0
 8001088:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) return ret;
 800108a:	7fbb      	ldrb	r3, [r7, #30]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <DHT20_Read+0x64>
 8001090:	7fbb      	ldrb	r3, [r7, #30]
 8001092:	e042      	b.n	800111a <DHT20_Read+0xea>

    // Kiểm tra bit trạng thái
    if ((raw_data[0] & 0x80) != 0) return HAL_ERROR;
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	da01      	bge.n	80010a0 <DHT20_Read+0x70>
 800109c:	2301      	movs	r3, #1
 800109e:	e03c      	b.n	800111a <DHT20_Read+0xea>

    // Xử lý dữ liệu
    uint32_t humidity_raw = ((raw_data[1] << 16) | (raw_data[2] << 8) | raw_data[3]) >> 4;
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4313      	orrs	r3, r2
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	111b      	asrs	r3, r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
    uint32_t temperature_raw = ((raw_data[3] & 0x0F) << 16) | (raw_data[4] << 8) | raw_data[5];
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4313      	orrs	r3, r2
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]

    data->humidity = ((float)humidity_raw / 1048576) * 100;
 80010c6:	69b8      	ldr	r0, [r7, #24]
 80010c8:	f7ff fd94 	bl	8000bf4 <__aeabi_ui2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe9a 	bl	8000e0c <__aeabi_fdiv>
 80010d8:	4603      	mov	r3, r0
 80010da:	4912      	ldr	r1, [pc, #72]	; (8001124 <DHT20_Read+0xf4>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fde1 	bl	8000ca4 <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	605a      	str	r2, [r3, #4]
    data->temperature = ((float)temperature_raw / 1048576) * 200 - 50;
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff fd82 	bl	8000bf4 <__aeabi_ui2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe88 	bl	8000e0c <__aeabi_fdiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	490a      	ldr	r1, [pc, #40]	; (8001128 <DHT20_Read+0xf8>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdcf 	bl	8000ca4 <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <DHT20_Read+0xfc>)
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fcc0 	bl	8000a90 <__aeabi_fsub>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	42c80000 	.word	0x42c80000
 8001128:	43480000 	.word	0x43480000
 800112c:	42480000 	.word	0x42480000

08001130 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f023 030f 	bic.w	r3, r3, #15
 8001140:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 030c 	orr.w	r3, r3, #12
 800114e:	b2db      	uxtb	r3, r3
 8001150:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	f043 030c 	orr.w	r3, r3, #12
 8001162:	b2db      	uxtb	r3, r3
 8001164:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	b2db      	uxtb	r3, r3
 800116e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001170:	f107 0208 	add.w	r2, r7, #8
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2304      	movs	r3, #4
 800117a:	2142      	movs	r1, #66	; 0x42
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <lcd_send_cmd+0x5c>)
 800117e:	f001 fcf7 	bl	8002b70 <HAL_I2C_Master_Transmit>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000020c 	.word	0x2000020c

08001190 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f023 030f 	bic.w	r3, r3, #15
 80011a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 030d 	orr.w	r3, r3, #13
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f043 0309 	orr.w	r3, r3, #9
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f043 030d 	orr.w	r3, r3, #13
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	f043 0309 	orr.w	r3, r3, #9
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2304      	movs	r3, #4
 80011da:	2142      	movs	r1, #66	; 0x42
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <lcd_send_data+0x5c>)
 80011de:	f001 fcc7 	bl	8002b70 <HAL_I2C_Master_Transmit>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000020c 	.word	0x2000020c

080011f0 <lcd_init>:

void lcd_init (void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80011f4:	2033      	movs	r0, #51	; 0x33
 80011f6:	f7ff ff9b 	bl	8001130 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80011fa:	2032      	movs	r0, #50	; 0x32
 80011fc:	f7ff ff98 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 8001200:	2032      	movs	r0, #50	; 0x32
 8001202:	f000 fdc5 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f7ff ff92 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f000 fdbf 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff8c 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 8001218:	2032      	movs	r0, #50	; 0x32
 800121a:	f000 fdb9 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800121e:	2006      	movs	r0, #6
 8001220:	f7ff ff86 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 8001224:	2032      	movs	r0, #50	; 0x32
 8001226:	f000 fdb3 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800122a:	200c      	movs	r0, #12
 800122c:	f7ff ff80 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 8001230:	2032      	movs	r0, #50	; 0x32
 8001232:	f000 fdad 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff ff7a 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	; 0x32
 800123e:	f000 fda7 	bl	8001d90 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001242:	2080      	movs	r0, #128	; 0x80
 8001244:	f7ff ff74 	bl	8001130 <lcd_send_cmd>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001254:	e006      	b.n	8001264 <lcd_send_string+0x18>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff96 	bl	8001190 <lcd_send_data>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f4      	bne.n	8001256 <lcd_send_string+0xa>
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff ff58 	bl	8001130 <lcd_send_cmd>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	337f      	adds	r3, #127	; 0x7f
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e008      	b.n	80012b8 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3340      	adds	r3, #64	; 0x40
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff38 	bl	8001130 <lcd_send_cmd>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fcfd 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f8c1 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 fa1f 	bl	8001718 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012da:	f000 f94b 	bl	8001574 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012de:	f000 f977 	bl	80015d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80012e2:	f000 f9ef 	bl	80016c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012e6:	f000 f907 	bl	80014f8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012ea:	f000 f99f 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012ee:	f7ff ff7f 	bl	80011f0 <lcd_init>
  HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f6:	f000 fd4b 	bl	8001d90 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Biến lưu trữ giá trị cũ
  float last_temperature = -999.0; // Giá trị mặc định ngoài phạm vi đo
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <main+0x150>)
 80012fc:	617b      	str	r3, [r7, #20]
  float last_humidity = -999.0;
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <main+0x150>)
 8001300:	613b      	str	r3, [r7, #16]
//            lcd_clear_display();
//            lcd_send_string("Read Err!");
//        }


    if (DHT20_Read(&hi2c1, &sensor_data) == HAL_OK) {
 8001302:	4946      	ldr	r1, [pc, #280]	; (800141c <main+0x154>)
 8001304:	4846      	ldr	r0, [pc, #280]	; (8001420 <main+0x158>)
 8001306:	f7ff fe93 	bl	8001030 <DHT20_Read>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d175      	bne.n	80013fc <main+0x134>
        // �?ịnh dạng dữ liệu gửi

//        sprintf(buffer1, "TEMP:%.1f °C", sensor_data.temperature);
    	sprintf(buffer1, "TEMP:%.1f", sensor_data.temperature);
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <main+0x154>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f887 	bl	8000428 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4941      	ldr	r1, [pc, #260]	; (8001424 <main+0x15c>)
 8001320:	4841      	ldr	r0, [pc, #260]	; (8001428 <main+0x160>)
 8001322:	f004 fe29 	bl	8005f78 <siprintf>

        sprintf(buffer2, "HUMI:%.1f", sensor_data.humidity);
 8001326:	4b3d      	ldr	r3, [pc, #244]	; (800141c <main+0x154>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f87c 	bl	8000428 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	493d      	ldr	r1, [pc, #244]	; (800142c <main+0x164>)
 8001336:	483e      	ldr	r0, [pc, #248]	; (8001430 <main+0x168>)
 8001338:	f004 fe1e 	bl	8005f78 <siprintf>
        sprintf(sendBuffer, "%s;%s\n", buffer1, buffer2);
 800133c:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <main+0x168>)
 800133e:	4a3a      	ldr	r2, [pc, #232]	; (8001428 <main+0x160>)
 8001340:	493c      	ldr	r1, [pc, #240]	; (8001434 <main+0x16c>)
 8001342:	483d      	ldr	r0, [pc, #244]	; (8001438 <main+0x170>)
 8001344:	f004 fe18 	bl	8005f78 <siprintf>

        // Gửi qua UART
        HAL_UART_Transmit(&huart1, (uint8_t *)sendBuffer, strlen(sendBuffer), 1000);
 8001348:	483b      	ldr	r0, [pc, #236]	; (8001438 <main+0x170>)
 800134a:	f7fe ff01 	bl	8000150 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	4938      	ldr	r1, [pc, #224]	; (8001438 <main+0x170>)
 8001358:	4838      	ldr	r0, [pc, #224]	; (800143c <main+0x174>)
 800135a:	f003 fbb5 	bl	8004ac8 <HAL_UART_Transmit>
//        // Delay và xử lý LED
//        HAL_Delay(5000);
//        lcd_clear_display();
//        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        // Cập nhật LCD nếu nhiệt độ thay đổi
            if (sensor_data.temperature != last_temperature) {
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <main+0x154>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff fe31 	bl	8000fcc <__aeabi_fcmpeq>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11a      	bne.n	80013a6 <main+0xde>
                lcd_goto_XY(1, 0); // Vị trí dòng 1
 8001370:	2100      	movs	r1, #0
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff ff86 	bl	8001284 <lcd_goto_XY>
                lcd_send_string("TEMP:"); // Ghi nhãn
 8001378:	4831      	ldr	r0, [pc, #196]	; (8001440 <main+0x178>)
 800137a:	f7ff ff67 	bl	800124c <lcd_send_string>
                char temp_display[8];
                sprintf(temp_display, "%.1f \xDF""C", sensor_data.temperature); // Thêm đơn vị độ C
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <main+0x154>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f850 	bl	8000428 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f107 0008 	add.w	r0, r7, #8
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <main+0x17c>)
 8001392:	f004 fdf1 	bl	8005f78 <siprintf>
                lcd_send_string(temp_display); // Hiển thị nhiệt độ
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff56 	bl	800124c <lcd_send_string>
                last_temperature = sensor_data.temperature; // Lưu giá trị cũ
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <main+0x154>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	617b      	str	r3, [r7, #20]
            }

            // Cập nhật LCD nếu độ ẩm thay đổi
            if (sensor_data.humidity != last_humidity) {
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <main+0x154>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff fe0d 	bl	8000fcc <__aeabi_fcmpeq>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d118      	bne.n	80013ea <main+0x122>
                lcd_goto_XY(0, 0); // Vị trí dòng 2
 80013b8:	2100      	movs	r1, #0
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ff62 	bl	8001284 <lcd_goto_XY>
                lcd_send_string("HUMI:"); // Ghi nhãn
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <main+0x180>)
 80013c2:	f7ff ff43 	bl	800124c <lcd_send_string>
                char hum_display[8];
                sprintf(hum_display, "%.1f %%", sensor_data.humidity); // Thêm đơn vị %
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <main+0x154>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f82c 	bl	8000428 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4638      	mov	r0, r7
 80013d6:	491d      	ldr	r1, [pc, #116]	; (800144c <main+0x184>)
 80013d8:	f004 fdce 	bl	8005f78 <siprintf>
                lcd_send_string(hum_display); // Hiển thị độ ẩm
 80013dc:	463b      	mov	r3, r7
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff34 	bl	800124c <lcd_send_string>
                last_humidity = sensor_data.humidity; // Lưu giá trị cũ
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <main+0x154>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
            }

            // Delay và xử lý LED
               HAL_Delay(1000);
 80013ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ee:	f000 fccf 	bl	8001d90 <HAL_Delay>
               HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013f2:	2120      	movs	r1, #32
 80013f4:	4816      	ldr	r0, [pc, #88]	; (8001450 <main+0x188>)
 80013f6:	f001 fa5d 	bl	80028b4 <HAL_GPIO_TogglePin>
 80013fa:	e782      	b.n	8001302 <main+0x3a>
    } else {
        lcd_clear_display();
 80013fc:	f7ff ff3b 	bl	8001276 <lcd_clear_display>
        HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f000 fcc4 	bl	8001d90 <HAL_Delay>
        lcd_goto_XY(0, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff3a 	bl	8001284 <lcd_goto_XY>
        lcd_send_string("Read Err!");
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <main+0x18c>)
 8001412:	f7ff ff1b 	bl	800124c <lcd_send_string>
    if (DHT20_Read(&hi2c1, &sensor_data) == HAL_OK) {
 8001416:	e774      	b.n	8001302 <main+0x3a>
 8001418:	c479c000 	.word	0xc479c000
 800141c:	20000204 	.word	0x20000204
 8001420:	2000020c 	.word	0x2000020c
 8001424:	08008408 	.word	0x08008408
 8001428:	200003ac 	.word	0x200003ac
 800142c:	08008414 	.word	0x08008414
 8001430:	200002e4 	.word	0x200002e4
 8001434:	08008420 	.word	0x08008420
 8001438:	200002f4 	.word	0x200002f4
 800143c:	2000031c 	.word	0x2000031c
 8001440:	08008428 	.word	0x08008428
 8001444:	08008430 	.word	0x08008430
 8001448:	08008438 	.word	0x08008438
 800144c:	08008440 	.word	0x08008440
 8001450:	40010800 	.word	0x40010800
 8001454:	08008448 	.word	0x08008448

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f91e 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2310      	movs	r3, #16
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fa57 	bl	8003950 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014a8:	f000 f980 	bl	80017ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fcc2 	bl	8003e50 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014d2:	f000 f96b 	bl	80017ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d6:	2302      	movs	r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fe43 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ec:	f000 f95e 	bl	80017ac <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_ADC1_Init+0x74>)
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <MX_ADC1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_ADC1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_ADC1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_ADC1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_ADC1_Init+0x74>)
 8001522:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001526:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_ADC1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_ADC1_Init+0x74>)
 8001530:	2201      	movs	r2, #1
 8001532:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_ADC1_Init+0x74>)
 8001536:	f000 fc4f 	bl	8001dd8 <HAL_ADC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001540:	f000 f934 	bl	80017ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001544:	230a      	movs	r3, #10
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001548:	2301      	movs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_ADC1_Init+0x74>)
 8001556:	f000 fd17 	bl	8001f88 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001560:	f000 f924 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002b4 	.word	0x200002b4
 8001570:	40012400 	.word	0x40012400

08001574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MX_I2C1_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_I2C1_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015b2:	f001 f999 	bl	80028e8 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 f8f6 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000020c 	.word	0x2000020c
 80015c8:	40005400 	.word	0x40005400
 80015cc:	000186a0 	.word	0x000186a0

080015d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C2_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_I2C2_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C2_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_I2C2_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_I2C2_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_I2C2_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2C2_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2C2_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2C2_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2C2_Init+0x50>)
 800160e:	f001 f96b 	bl	80028e8 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f8c8 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000260 	.word	0x20000260
 8001624:	40005800 	.word	0x40005800
 8001628:	000186a0 	.word	0x000186a0

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM2_Init+0x94>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001652:	f240 321f 	movw	r2, #799	; 0x31f
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001660:	2209      	movs	r2, #9
 8001662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001672:	f002 fe31 	bl	80042d8 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800167c:	f000 f896 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM2_Init+0x94>)
 800168e:	f002 ff62 	bl	8004556 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001698:	f000 f888 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM2_Init+0x94>)
 80016aa:	f003 f94d 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f87a 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000364 	.word	0x20000364

080016c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART1_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART1_UART_Init+0x4c>)
 80016fc:	f003 f994 	bl	8004a28 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f851 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000031c 	.word	0x2000031c
 8001714:	40013800 	.word	0x40013800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x8c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_GPIO_Init+0x8c>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_GPIO_Init+0x8c>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_GPIO_Init+0x8c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <MX_GPIO_Init+0x8c>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_GPIO_Init+0x8c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_GPIO_Init+0x8c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <MX_GPIO_Init+0x8c>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_GPIO_Init+0x8c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2120      	movs	r1, #32
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0x90>)
 800177a:	f001 f883 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800177e:	2320      	movs	r3, #32
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_GPIO_Init+0x90>)
 8001796:	f000 fef1 	bl	800257c <HAL_GPIO_Init>

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_MspInit+0x5c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_MspInit+0x5c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x5c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x5c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_MspInit+0x60>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_MspInit+0x60>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000

0800181c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_ADC_MspInit+0x6c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d121      	bne.n	8001880 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_ADC_MspInit+0x70>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_ADC_MspInit+0x70>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_ADC_MspInit+0x70>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_ADC_MspInit+0x74>)
 800187c:	f000 fe7e 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40012400 	.word	0x40012400
 800188c:	40021000 	.word	0x40021000
 8001890:	40011000 	.word	0x40011000

08001894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_I2C_MspInit+0xe4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d133      	bne.n	800191c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_I2C_MspInit+0xe8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a30      	ldr	r2, [pc, #192]	; (800197c <HAL_I2C_MspInit+0xe8>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_I2C_MspInit+0xe8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4827      	ldr	r0, [pc, #156]	; (8001980 <HAL_I2C_MspInit+0xec>)
 80018e2:	f000 fe4b 	bl	800257c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_I2C_MspInit+0xf0>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_I2C_MspInit+0xf0>)
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800191a:	e029      	b.n	8001970 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_I2C_MspInit+0xf4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d124      	bne.n	8001970 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_I2C_MspInit+0xe8>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800193e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001944:	2312      	movs	r3, #18
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_I2C_MspInit+0xec>)
 8001954:	f000 fe12 	bl	800257c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_I2C_MspInit+0xe8>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_I2C_MspInit+0xe8>)
 800195e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001962:	61d3      	str	r3, [r2, #28]
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_I2C_MspInit+0xe8>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40010000 	.word	0x40010000
 8001988:	40005800 	.word	0x40005800

0800198c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d113      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	201c      	movs	r0, #28
 80019bc:	f000 fcf5 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c0:	201c      	movs	r0, #28
 80019c2:	f000 fd0e 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_UART_MspInit+0x9c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d139      	bne.n	8001a68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_UART_MspInit+0xa0>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <HAL_UART_MspInit+0xa4>)
 8001a3a:	f000 fd9f 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <HAL_UART_MspInit+0xa4>)
 8001a54:	f000 fd92 	bl	800257c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2025      	movs	r0, #37	; 0x25
 8001a5e:	f000 fca4 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a62:	2025      	movs	r0, #37	; 0x25
 8001a64:	f000 fcbd 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac2:	f000 f949 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM2_IRQHandler+0x10>)
 8001ad2:	f002 fc50 	bl	8004376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000364 	.word	0x20000364

08001ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <USART1_IRQHandler+0x10>)
 8001ae6:	f003 f87b 	bl	8004be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000031c 	.word	0x2000031c

08001af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_kill>:

int _kill(int pid, int sig)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b0c:	f003 fda2 	bl	8005654 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2216      	movs	r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
	return -1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_exit>:

void _exit (int status)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffe7 	bl	8001b02 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b34:	e7fe      	b.n	8001b34 <_exit+0x12>

08001b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b48:	f3af 8000 	nop.w
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf0      	blt.n	8001b48 <_read+0x12>
	}

return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e009      	b.n	8001b96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf1      	blt.n	8001b82 <_write+0x12>
	}
	return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_close>:

int _close(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <_isatty>:

int _isatty(int file)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f003 fd0c 	bl	8005654 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20005000 	.word	0x20005000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	200001f8 	.word	0x200001f8
 8001c70:	200003d0 	.word	0x200003d0

08001c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:
 8001c80:	f7ff fff8 	bl	8001c74 <SystemInit>
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <LoopFillZerobss+0xe>)
 8001c86:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x12>)
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <LoopFillZerobss+0x16>)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:
 8001c8e:	58d4      	ldr	r4, [r2, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:
 8001c94:	18c4      	adds	r4, r0, r3
 8001c96:	428c      	cmp	r4, r1
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <LoopFillZerobss+0x1a>)
 8001c9c:	4c09      	ldr	r4, [pc, #36]	; (8001cc4 <LoopFillZerobss+0x1e>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:
 8001ca6:	42a2      	cmp	r2, r4
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>
 8001caa:	f003 fcd9 	bl	8005660 <__libc_init_array>
 8001cae:	f7ff fb0b 	bl	80012c8 <main>
 8001cb2:	4770      	bx	lr
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	200001dc 	.word	0x200001dc
 8001cbc:	0800886c 	.word	0x0800886c
 8001cc0:	200001dc 	.word	0x200001dc
 8001cc4:	200003d0 	.word	0x200003d0

08001cc8 <ADC1_2_IRQHandler>:
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_Init+0x28>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_Init+0x28>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 fb59 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fd66 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fb71 	bl	80023fe <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 fb39 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x1c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_IncTick+0x20>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_IncTick+0x20>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000008 	.word	0x20000008
 8001d78:	200003bc 	.word	0x200003bc

08001d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b02      	ldr	r3, [pc, #8]	; (8001d8c <HAL_GetTick+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	200003bc 	.word	0x200003bc

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffe0 	bl	8001d7c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0be      	b.n	8001f78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fd00 	bl	800181c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f9ab 	bl	8002178 <ADC_ConversionStop_Disable>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8099 	bne.w	8001f66 <HAL_ADC_Init+0x18e>
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8095 	bne.w	8001f66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e44:	f023 0302 	bic.w	r3, r3, #2
 8001e48:	f043 0202 	orr.w	r2, r3, #2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7b1b      	ldrb	r3, [r3, #12]
 8001e5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e70:	d003      	beq.n	8001e7a <HAL_ADC_Init+0xa2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_ADC_Init+0xa8>
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_Init+0xaa>
 8001e80:	2300      	movs	r3, #0
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7d1b      	ldrb	r3, [r3, #20]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d119      	bne.n	8001ec4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	035a      	lsls	r2, r3, #13
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_ADC_Init+0x1a8>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef4:	d003      	beq.n	8001efe <HAL_ADC_Init+0x126>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d104      	bne.n	8001f08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	051b      	lsls	r3, r3, #20
 8001f06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_ADC_Init+0x1ac>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f42:	e018      	b.n	8001f76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	f023 0312 	bic.w	r3, r3, #18
 8001f4c:	f043 0210 	orr.w	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f64:	e007      	b.n	8001f76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	ffe1f7fd 	.word	0xffe1f7fd
 8001f84:	ff1f0efe 	.word	0xff1f0efe

08001f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x20>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0dc      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1da>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d81c      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4019      	ands	r1, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b05      	subs	r3, #5
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff0:	e03c      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d81c      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b23      	subs	r3, #35	; 0x23
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b23      	subs	r3, #35	; 0x23
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
 8002032:	e01b      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b41      	subs	r3, #65	; 0x41
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	; 0x41
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b09      	cmp	r3, #9
 8002072:	d91c      	bls.n	80020ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68d9      	ldr	r1, [r3, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	2207      	movs	r2, #7
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4019      	ands	r1, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6898      	ldr	r0, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e019      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	2207      	movs	r2, #7
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6898      	ldr	r0, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d003      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d132      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_ADC_ConfigChannel+0x1e4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d125      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d126      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002118:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d11a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_ADC_ConfigChannel+0x1e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_ADC_ConfigChannel+0x1ec>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9a      	lsrs	r2, r3, #18
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002138:	e002      	b.n	8002140 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_ConfigChannel+0x1b2>
 8002146:	e007      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012400 	.word	0x40012400
 8002170:	20000000 	.word	0x20000000
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12e      	bne.n	80021f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021a2:	f7ff fdeb 	bl	8001d7c <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021a8:	e01b      	b.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021aa:	f7ff fde7 	bl	8001d7c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d914      	bls.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e007      	b.n	80021f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d0dc      	beq.n	80021aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <__NVIC_EnableIRQ+0x34>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff90 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff2d 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff42 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff35 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d008      	beq.n	8002440 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e020      	b.n	8002482 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020e 	bic.w	r2, r2, #14
 800244e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e051      	b.n	8002554 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020e 	bic.w	r2, r2, #14
 80024be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_DMA_Abort_IT+0xd4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d029      	beq.n	800252e <HAL_DMA_Abort_IT+0xa2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_DMA_Abort_IT+0xd8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <HAL_DMA_Abort_IT+0x9e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_DMA_Abort_IT+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01a      	beq.n	8002524 <HAL_DMA_Abort_IT+0x98>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_DMA_Abort_IT+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_DMA_Abort_IT+0x92>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_DMA_Abort_IT+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00a      	beq.n	8002518 <HAL_DMA_Abort_IT+0x8c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_DMA_Abort_IT+0xe8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <HAL_DMA_Abort_IT+0x86>
 800250c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002510:	e00e      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002516:	e00b      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800251c:	e008      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002522:	e005      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002528:	e002      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800252a:	2310      	movs	r3, #16
 800252c:	e000      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800252e:	2301      	movs	r3, #1
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_DMA_Abort_IT+0xec>)
 8002532:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
    } 
  }
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020008 	.word	0x40020008
 8002564:	4002001c 	.word	0x4002001c
 8002568:	40020030 	.word	0x40020030
 800256c:	40020044 	.word	0x40020044
 8002570:	40020058 	.word	0x40020058
 8002574:	4002006c 	.word	0x4002006c
 8002578:	40020000 	.word	0x40020000

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b08b      	sub	sp, #44	; 0x2c
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258e:	e169      	b.n	8002864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002590:	2201      	movs	r2, #1
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8158 	bne.w	800285e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a9a      	ldr	r2, [pc, #616]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d05e      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025b8:	4a98      	ldr	r2, [pc, #608]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d875      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025be:	4a98      	ldr	r2, [pc, #608]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d058      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025c4:	4a96      	ldr	r2, [pc, #600]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d86f      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ca:	4a96      	ldr	r2, [pc, #600]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d052      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025d0:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d869      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025d6:	4a94      	ldr	r2, [pc, #592]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04c      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025dc:	4a92      	ldr	r2, [pc, #584]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d863      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025e2:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d046      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025e8:	4a90      	ldr	r2, [pc, #576]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d85d      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ee:	2b12      	cmp	r3, #18
 80025f0:	d82a      	bhi.n	8002648 <HAL_GPIO_Init+0xcc>
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d859      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_GPIO_Init+0x80>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002651 	.word	0x08002651
 8002604:	08002663 	.word	0x08002663
 8002608:	080026a5 	.word	0x080026a5
 800260c:	080026ab 	.word	0x080026ab
 8002610:	080026ab 	.word	0x080026ab
 8002614:	080026ab 	.word	0x080026ab
 8002618:	080026ab 	.word	0x080026ab
 800261c:	080026ab 	.word	0x080026ab
 8002620:	080026ab 	.word	0x080026ab
 8002624:	080026ab 	.word	0x080026ab
 8002628:	080026ab 	.word	0x080026ab
 800262c:	080026ab 	.word	0x080026ab
 8002630:	080026ab 	.word	0x080026ab
 8002634:	080026ab 	.word	0x080026ab
 8002638:	080026ab 	.word	0x080026ab
 800263c:	080026ab 	.word	0x080026ab
 8002640:	08002659 	.word	0x08002659
 8002644:	0800266d 	.word	0x0800266d
 8002648:	4a79      	ldr	r2, [pc, #484]	; (8002830 <HAL_GPIO_Init+0x2b4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800264e:	e02c      	b.n	80026aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e029      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	3304      	adds	r3, #4
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e024      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	3308      	adds	r3, #8
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e01f      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	330c      	adds	r3, #12
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e01a      	b.n	80026ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800267e:	2304      	movs	r3, #4
 8002680:	623b      	str	r3, [r7, #32]
          break;
 8002682:	e013      	b.n	80026ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800268c:	2308      	movs	r3, #8
 800268e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	611a      	str	r2, [r3, #16]
          break;
 8002696:	e009      	b.n	80026ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002698:	2308      	movs	r3, #8
 800269a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	615a      	str	r2, [r3, #20]
          break;
 80026a2:	e003      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x130>
          break;
 80026aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d801      	bhi.n	80026b6 <HAL_GPIO_Init+0x13a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	e001      	b.n	80026ba <HAL_GPIO_Init+0x13e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2bff      	cmp	r3, #255	; 0xff
 80026c0:	d802      	bhi.n	80026c8 <HAL_GPIO_Init+0x14c>
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x152>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3b08      	subs	r3, #8
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	210f      	movs	r1, #15
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80b1 	beq.w	800285e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002714:	4a48      	ldr	r2, [pc, #288]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_GPIO_Init+0x2c0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <HAL_GPIO_Init+0x2c4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1e8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <HAL_GPIO_Init+0x2c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1e4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3d      	ldr	r2, [pc, #244]	; (8002848 <HAL_GPIO_Init+0x2cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1e0>
 8002758:	2303      	movs	r3, #3
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 800275c:	2304      	movs	r3, #4
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002768:	2300      	movs	r3, #0
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800277a:	492f      	ldr	r1, [pc, #188]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4928      	ldr	r1, [pc, #160]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4922      	ldr	r1, [pc, #136]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	491e      	ldr	r1, [pc, #120]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4914      	ldr	r1, [pc, #80]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d021      	beq.n	8002850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e021      	b.n	800285e <HAL_GPIO_Init+0x2e2>
 800281a:	bf00      	nop
 800281c:	10320000 	.word	0x10320000
 8002820:	10310000 	.word	0x10310000
 8002824:	10220000 	.word	0x10220000
 8002828:	10210000 	.word	0x10210000
 800282c:	10120000 	.word	0x10120000
 8002830:	10110000 	.word	0x10110000
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	40011000 	.word	0x40011000
 8002848:	40011400 	.word	0x40011400
 800284c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	43db      	mvns	r3, r3
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <HAL_GPIO_Init+0x304>)
 800285a:	4013      	ands	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f ae8e 	bne.w	8002590 <HAL_GPIO_Init+0x14>
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	372c      	adds	r7, #44	; 0x2c
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43d9      	mvns	r1, r3
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	400b      	ands	r3, r1
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	611a      	str	r2, [r3, #16]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12b      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe ffc0 	bl	8001894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800294c:	f001 fbc8 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a81      	ldr	r2, [pc, #516]	; (8002b5c <HAL_I2C_Init+0x274>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d807      	bhi.n	800296c <HAL_I2C_Init+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a80      	ldr	r2, [pc, #512]	; (8002b60 <HAL_I2C_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e006      	b.n	800297a <HAL_I2C_Init+0x92>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_I2C_Init+0x27c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0e7      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a78      	ldr	r2, [pc, #480]	; (8002b68 <HAL_I2C_Init+0x280>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d802      	bhi.n	80029bc <HAL_I2C_Init+0xd4>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	e009      	b.n	80029d0 <HAL_I2C_Init+0xe8>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a69      	ldr	r2, [pc, #420]	; (8002b6c <HAL_I2C_Init+0x284>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	3301      	adds	r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	495c      	ldr	r1, [pc, #368]	; (8002b5c <HAL_I2C_Init+0x274>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d819      	bhi.n	8002a24 <HAL_I2C_Init+0x13c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e59      	subs	r1, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fe:	1c59      	adds	r1, r3, #1
 8002a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_I2C_Init+0x138>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	e051      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x168>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x18e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x196>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	817b      	strh	r3, [r7, #10]
 8002b80:	4613      	mov	r3, r2
 8002b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff f8fa 	bl	8001d7c <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	f040 80e0 	bne.w	8002d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4970      	ldr	r1, [pc, #448]	; (8002d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fc9e 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0d3      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_I2C_Master_Transmit+0x50>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0cc      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d007      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2221      	movs	r2, #33	; 0x21
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2210      	movs	r2, #16
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	893a      	ldrh	r2, [r7, #8]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c28:	8979      	ldrh	r1, [r7, #10]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fb08 	bl	8003244 <I2C_MasterRequestWrite>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e08d      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c54:	e066      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fd5c 	bl	8003718 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d107      	bne.n	8002c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06b      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x188>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6a39      	ldr	r1, [r7, #32]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fd53 	bl	80037a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01a      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d194      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	00100002 	.word	0x00100002
 8002d68:	ffff0000 	.word	0xffff0000

08002d6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	; 0x30
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	817b      	strh	r3, [r7, #10]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7fe fffa 	bl	8001d7c <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 824b 	bne.w	800322e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2319      	movs	r3, #25
 8002d9e:	2201      	movs	r2, #1
 8002da0:	497f      	ldr	r1, [pc, #508]	; (8002fa0 <HAL_I2C_Master_Receive+0x234>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fb9e 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e23e      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_Master_Receive+0x54>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e237      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d007      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2222      	movs	r2, #34	; 0x22
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2210      	movs	r2, #16
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <HAL_I2C_Master_Receive+0x238>)
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fa8a 	bl	8003348 <I2C_MasterRequestRead>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1f8      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e1cc      	b.n	8003208 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d11e      	bne.n	8002eb4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e86:	b672      	cpsid	i
}
 8002e88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eb0:	b662      	cpsie	i
}
 8002eb2:	e035      	b.n	8002f20 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11e      	bne.n	8002efa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ecc:	b672      	cpsid	i
}
 8002ece:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef6:	b662      	cpsie	i
}
 8002ef8:	e012      	b.n	8002f20 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f20:	e172      	b.n	8003208 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	f200 811f 	bhi.w	800316a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d123      	bne.n	8002f7c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fc7d 	bl	8003838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e173      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7a:	e145      	b.n	8003208 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d152      	bne.n	800302a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <HAL_I2C_Master_Receive+0x23c>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 faa8 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e148      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
 8002f9e:	bf00      	nop
 8002fa0:	00100002 	.word	0x00100002
 8002fa4:	ffff0000 	.word	0xffff0000
 8002fa8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fac:	b672      	cpsid	i
}
 8002fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ff2:	b662      	cpsie	i
}
 8002ff4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003028:	e0ee      	b.n	8003208 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	4981      	ldr	r1, [pc, #516]	; (8003238 <HAL_I2C_Master_Receive+0x4cc>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa55 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0f5      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800308a:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_I2C_Master_Receive+0x4d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	4a6b      	ldr	r2, [pc, #428]	; (8003240 <HAL_I2C_Master_Receive+0x4d4>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0a1a      	lsrs	r2, r3, #8
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00da      	lsls	r2, r3, #3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d118      	bne.n	80030e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030d2:	b662      	cpsie	i
}
 80030d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0a6      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d1d9      	bne.n	80030a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003132:	b662      	cpsie	i
}
 8003134:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003168:	e04e      	b.n	8003208 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb62 	bl	8003838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e058      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d124      	bne.n	8003208 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	f47f ae88 	bne.w	8002f22 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	00010004 	.word	0x00010004
 800323c:	20000000 	.word	0x20000000
 8003240:	14f8b589 	.word	0x14f8b589

08003244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d006      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d003      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326c:	d108      	bne.n	8003280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00b      	b.n	8003298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b12      	cmp	r3, #18
 8003286:	d107      	bne.n	8003298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f91d 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032be:	d103      	bne.n	80032c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e035      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e01b      	b.n	8003320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	11db      	asrs	r3, r3, #7
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f063 030f 	orn	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	490e      	ldr	r1, [pc, #56]	; (8003340 <I2C_MasterRequestWrite+0xfc>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f966 	bl	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e010      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <I2C_MasterRequestWrite+0x100>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f956 	bl	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010008 	.word	0x00010008
 8003344:	00010002 	.word	0x00010002

08003348 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d006      	beq.n	8003382 <I2C_MasterRequestRead+0x3a>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d003      	beq.n	8003382 <I2C_MasterRequestRead+0x3a>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00b      	b.n	80033ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	2b11      	cmp	r3, #17
 800339a:	d107      	bne.n	80033ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f893 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d2:	d103      	bne.n	80033dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e079      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]
 80033fa:	e05f      	b.n	80034bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	11db      	asrs	r3, r3, #7
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0306 	and.w	r3, r3, #6
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f063 030f 	orn	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4930      	ldr	r1, [pc, #192]	; (80034dc <I2C_MasterRequestRead+0x194>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f8dc 	bl	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e054      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4929      	ldr	r1, [pc, #164]	; (80034e0 <I2C_MasterRequestRead+0x198>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8cc 	bl	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e044      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f831 	bl	80034e4 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e017      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	11db      	asrs	r3, r3, #7
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f063 030e 	orn	r3, r3, #14
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <I2C_MasterRequestRead+0x198>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f888 	bl	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00010008 	.word	0x00010008
 80034e0:	00010002 	.word	0x00010002

080034e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f4:	e048      	b.n	8003588 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d044      	beq.n	8003588 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fe fc3d 	bl	8001d7c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnFlagUntilTimeout+0x30>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d139      	bne.n	8003588 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10d      	bne.n	800353a <I2C_WaitOnFlagUntilTimeout+0x56>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	43da      	mvns	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	e00c      	b.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x70>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	43da      	mvns	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	429a      	cmp	r2, r3
 8003558:	d116      	bne.n	8003588 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e023      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10d      	bne.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	e00c      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d093      	beq.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e6:	e071      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d123      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e067      	b.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d041      	beq.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003648:	f7fe fb98 	bl	8001d7c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d136      	bne.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10c      	bne.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	e00b      	b.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e021      	b.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10c      	bne.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e00b      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	f47f af6d 	bne.w	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003724:	e034      	b.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8e3 	bl	80038f2 <I2C_IsAcknowledgeFailed>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e034      	b.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d028      	beq.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe fb1d 	bl	8001d7c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11d      	bne.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d016      	beq.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d1c3      	bne.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b4:	e034      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f89b 	bl	80038f2 <I2C_IsAcknowledgeFailed>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e034      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d028      	beq.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe fad5 	bl	8001d7c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11d      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d016      	beq.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e007      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d1c3      	bne.n	80037b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003844:	e049      	b.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d119      	bne.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e030      	b.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fe fa78 	bl	8001d7c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d016      	beq.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e007      	b.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d1ae      	bne.n	8003846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d11b      	bne.n	8003942 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003912:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
	...

08003950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e26c      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b92      	ldr	r3, [pc, #584]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800397c:	4b8f      	ldr	r3, [pc, #572]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x5e>
 8003988:	4b8c      	ldr	r3, [pc, #560]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x12c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d168      	bne.n	8003a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e246      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x76>
 80039b8:	4b80      	ldr	r3, [pc, #512]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a7f      	ldr	r2, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x98>
 80039ce:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7a      	ldr	r2, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a77      	ldr	r2, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xbc>
 80039f2:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a71      	ldr	r2, [pc, #452]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 8003a0c:	4b6b      	ldr	r3, [pc, #428]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6a      	ldr	r2, [pc, #424]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a67      	ldr	r2, [pc, #412]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f9a6 	bl	8001d7c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe f9a2 	bl	8001d7c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1fa      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe4>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe f992 	bl	8001d7c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe f98e 	bl	8001d7c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1e6      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x10c>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x18c>
 8003aa2:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x176>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1ba      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4939      	ldr	r1, [pc, #228]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f947 	bl	8001d7c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe f943 	bl	8001d7c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e19b      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4927      	ldr	r1, [pc, #156]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f926 	bl	8001d7c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe f922 	bl	8001d7c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e17a      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d03a      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d019      	beq.n	8003b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_RCC_OscConfig+0x274>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f906 	bl	8001d7c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fe f902 	bl	8001d7c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e15a      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f000 facc 	bl	8004130 <RCC_Delay>
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f8ec 	bl	8001d7c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe f8e8 	bl	8001d7c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d908      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e140      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	42420000 	.word	0x42420000
 8003bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b9e      	ldr	r3, [pc, #632]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e9      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a6 	beq.w	8003d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b97      	ldr	r3, [pc, #604]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b94      	ldr	r3, [pc, #592]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a93      	ldr	r2, [pc, #588]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	61d3      	str	r3, [r2, #28]
 8003bfe:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b8e      	ldr	r3, [pc, #568]	; (8003e48 <HAL_RCC_OscConfig+0x4f8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1a:	4b8b      	ldr	r3, [pc, #556]	; (8003e48 <HAL_RCC_OscConfig+0x4f8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a8a      	ldr	r2, [pc, #552]	; (8003e48 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fe f8a9 	bl	8001d7c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fe f8a5 	bl	8001d7c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0fd      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x4f8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x312>
 8003c54:	4b7b      	ldr	r3, [pc, #492]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a7a      	ldr	r2, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	e02d      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x334>
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a75      	ldr	r2, [pc, #468]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6213      	str	r3, [r2, #32]
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a72      	ldr	r2, [pc, #456]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6213      	str	r3, [r2, #32]
 8003c82:	e01c      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x356>
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4a6c      	ldr	r2, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a69      	ldr	r2, [pc, #420]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a66      	ldr	r2, [pc, #408]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a63      	ldr	r2, [pc, #396]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc6:	f7fe f859 	bl	8001d7c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe f855 	bl	8001d7c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0ab      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCC_OscConfig+0x37e>
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe f843 	bl	8001d7c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f83f 	bl	8001d7c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e095      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b48      	ldr	r3, [pc, #288]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8081 	beq.w	8003e3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d061      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d146      	bne.n	8003dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <HAL_RCC_OscConfig+0x4fc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fe f813 	bl	8001d7c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fe f80f 	bl	8001d7c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e067      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d108      	bne.n	8003d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	492d      	ldr	r1, [pc, #180]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a19      	ldr	r1, [r3, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	430b      	orrs	r3, r1
 8003da6:	4927      	ldr	r1, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x4fc>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd ffe3 	bl	8001d7c <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd ffdf 	bl	8001d7c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e037      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x46a>
 8003dd8:	e02f      	b.n	8003e3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_RCC_OscConfig+0x4fc>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd ffcc 	bl	8001d7c <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd ffc8 	bl	8001d7c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e020      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x498>
 8003e06:	e018      	b.n	8003e3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e013      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_OscConfig+0x4f4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42420060 	.word	0x42420060

08003e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0d0      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d910      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b67      	ldr	r3, [pc, #412]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4965      	ldr	r1, [pc, #404]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d040      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d115      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b41      	ldr	r3, [pc, #260]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e073      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4936      	ldr	r1, [pc, #216]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd ff1c 	bl	8001d7c <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd ff18 	bl	8001d7c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e053      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d210      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 0207 	bic.w	r2, r3, #7
 8003f86:	4922      	ldr	r1, [pc, #136]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1cc>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1d0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fe7a 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40022000 	.word	0x40022000
 8004014:	40021000 	.word	0x40021000
 8004018:	08008454 	.word	0x08008454
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b04      	cmp	r3, #4
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x30>
 800404e:	2b08      	cmp	r3, #8
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x36>
 8004052:	e027      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004056:	613b      	str	r3, [r7, #16]
      break;
 8004058:	e027      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0c9b      	lsrs	r3, r3, #18
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	0c5b      	lsrs	r3, r3, #17
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	fb02 f203 	mul.w	r2, r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e004      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 80040a6:	613b      	str	r3, [r7, #16]
      break;
 80040a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040aa:	693b      	ldr	r3, [r7, #16]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	0800846c 	.word	0x0800846c
 80040c4:	0800847c 	.word	0x0800847c
 80040c8:	003d0900 	.word	0x003d0900

080040cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <HAL_RCC_GetHCLKFreq+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	20000000 	.word	0x20000000

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e4:	f7ff fff2 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	08008464 	.word	0x08008464

08004108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800410c:	f7ff ffde 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0adb      	lsrs	r3, r3, #11
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCC_GetPCLK2Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	08008464 	.word	0x08008464

08004130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <RCC_Delay+0x34>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <RCC_Delay+0x38>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800414c:	bf00      	nop
  }
  while (Delay --);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	60fa      	str	r2, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f9      	bne.n	800414c <RCC_Delay+0x1c>
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000000 	.word	0x20000000
 8004168:	10624dd3 	.word	0x10624dd3

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d07d      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418c:	4b4f      	ldr	r3, [pc, #316]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10d      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4a4b      	ldr	r2, [pc, #300]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	61d3      	str	r3, [r2, #28]
 80041a4:	4b49      	ldr	r3, [pc, #292]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d118      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c0:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a42      	ldr	r2, [pc, #264]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041cc:	f7fd fdd6 	bl	8001d7c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd fdd2 	bl	8001d7c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e06d      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02e      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d027      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004210:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421a:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004226:	4a29      	ldr	r2, [pc, #164]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d014      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fd fda1 	bl	8001d7c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fd fd9d 	bl	8001d7c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e036      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ee      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4917      	ldr	r1, [pc, #92]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426e:	4313      	orrs	r3, r2
 8004270:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4a13      	ldr	r2, [pc, #76]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004282:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	490b      	ldr	r1, [pc, #44]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4904      	ldr	r1, [pc, #16]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	42420440 	.word	0x42420440

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e041      	b.n	800436e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fb44 	bl	800198c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fa12 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01b      	beq.n	80043da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0202 	mvn.w	r2, #2
 80043aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9a1 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80043c6:	e005      	b.n	80043d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f994 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9a3 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0204 	mvn.w	r2, #4
 80043f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f97b 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004412:	e005      	b.n	8004420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f96e 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f97d 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01b      	beq.n	8004472 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f06f 0208 	mvn.w	r2, #8
 8004442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f955 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 800445e:	e005      	b.n	800446c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f948 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f957 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01b      	beq.n	80044be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0210 	mvn.w	r2, #16
 800448e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2208      	movs	r2, #8
 8004494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f92f 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80044aa:	e005      	b.n	80044b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f922 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f931 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0201 	mvn.w	r2, #1
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f901 	bl	80046e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00c      	beq.n	8004506 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fa88 	bl	8004a16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f901 	bl	800472c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0220 	mvn.w	r2, #32
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa5b 	bl	8004a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_TIM_ConfigClockSource+0x1c>
 800456e:	2302      	movs	r3, #2
 8004570:	e0b4      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x186>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004590:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004598:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d03e      	beq.n	800462a <HAL_TIM_ConfigClockSource+0xd4>
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b0:	f200 8087 	bhi.w	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	f000 8086 	beq.w	80046c8 <HAL_TIM_ConfigClockSource+0x172>
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d87f      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045c2:	2b70      	cmp	r3, #112	; 0x70
 80045c4:	d01a      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0xa6>
 80045c6:	2b70      	cmp	r3, #112	; 0x70
 80045c8:	d87b      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045ca:	2b60      	cmp	r3, #96	; 0x60
 80045cc:	d050      	beq.n	8004670 <HAL_TIM_ConfigClockSource+0x11a>
 80045ce:	2b60      	cmp	r3, #96	; 0x60
 80045d0:	d877      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045d2:	2b50      	cmp	r3, #80	; 0x50
 80045d4:	d03c      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0xfa>
 80045d6:	2b50      	cmp	r3, #80	; 0x50
 80045d8:	d873      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d058      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0x13a>
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d86f      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d064      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x15a>
 80045e6:	2b30      	cmp	r3, #48	; 0x30
 80045e8:	d86b      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d060      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x15a>
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d867      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d05c      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x15a>
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d05a      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x15a>
 80045fa:	e062      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f000 f97d 	bl	800490a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800461e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
      break;
 8004628:	e04f      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6899      	ldr	r1, [r3, #8]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f000 f966 	bl	800490a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e03c      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	461a      	mov	r2, r3
 800465e:	f000 f8dd 	bl	800481c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2150      	movs	r1, #80	; 0x50
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f934 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800466e:	e02c      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	461a      	mov	r2, r3
 800467e:	f000 f8fb 	bl	8004878 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2160      	movs	r1, #96	; 0x60
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f924 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800468e:	e01c      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	461a      	mov	r2, r3
 800469e:	f000 f8bd 	bl	800481c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f914 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 80046ae:	e00c      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f000 f90b 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 80046c0:	e003      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      break;
 80046c6:	e000      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
	...

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <TIM_Base_SetConfig+0xd0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <TIM_Base_SetConfig+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <TIM_Base_SetConfig+0xd8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <TIM_Base_SetConfig+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <TIM_Base_SetConfig+0xd4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <TIM_Base_SetConfig+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <TIM_Base_SetConfig+0xd0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]
  }
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800

0800481c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 030a 	bic.w	r3, r3, #10
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0210 	bic.w	r2, r3, #16
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 0307 	orr.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004924:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	431a      	orrs	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4313      	orrs	r3, r2
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	609a      	str	r2, [r3, #8]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e046      	b.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d009      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a12      	ldr	r2, [pc, #72]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10c      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800

08004a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e042      	b.n	8004ac0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc ffc0 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fd63 	bl	8005538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d175      	bne.n	8004bd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_Transmit+0x2c>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e06e      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2221      	movs	r2, #33	; 0x21
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b06:	f7fd f939 	bl	8001d7c <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d108      	bne.n	8004b34 <HAL_UART_Transmit+0x6c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e003      	b.n	8004b3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b3c:	e02e      	b.n	8004b9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fb01 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e03a      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e007      	b.n	8004b8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1cb      	bne.n	8004b3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2140      	movs	r1, #64	; 0x40
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 facd 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e006      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0ba      	sub	sp, #232	; 0xe8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_UART_IRQHandler+0x66>
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fbbc 	bl	80053bc <UART_Receive_IT>
      return;
 8004c44:	e25b      	b.n	80050fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80de 	beq.w	8004e0c <HAL_UART_IRQHandler+0x22c>
 8004c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80d1 	beq.w	8004e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_UART_IRQHandler+0xae>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xd2>
 8004c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	f043 0202 	orr.w	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xf6>
 8004cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d011      	beq.n	8004d06 <HAL_UART_IRQHandler+0x126>
 8004ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f043 0208 	orr.w	r2, r3, #8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 81f2 	beq.w	80050f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_UART_IRQHandler+0x14e>
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fb47 	bl	80053bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_UART_IRQHandler+0x17a>
 8004d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d04f      	beq.n	8004dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa51 	bl	8005202 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d041      	beq.n	8004df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1d9      	bne.n	8004d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d013      	beq.n	8004dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	4a7e      	ldr	r2, [pc, #504]	; (8004fc0 <HAL_UART_IRQHandler+0x3e0>)
 8004dc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fb5c 	bl	800248c <HAL_DMA_Abort_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004de4:	4610      	mov	r0, r2
 8004de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e00e      	b.n	8004e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f99c 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e00a      	b.n	8004e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f998 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e006      	b.n	8004e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f994 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e06:	e175      	b.n	80050f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	bf00      	nop
    return;
 8004e0a:	e173      	b.n	80050f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 814f 	bne.w	80050b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8148 	beq.w	80050b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8141 	beq.w	80050b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80b6 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8145 	beq.w	80050f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e76:	429a      	cmp	r2, r3
 8004e78:	f080 813e 	bcs.w	80050f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	f000 8088 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ebc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ec8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1d9      	bne.n	8004e90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3314      	adds	r3, #20
 8004ee2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eee:	f023 0301 	bic.w	r3, r3, #1
 8004ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e1      	bne.n	8004edc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e3      	bne.n	8004f18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f70:	f023 0310 	bic.w	r3, r3, #16
 8004f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e3      	bne.n	8004f5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fa3b 	bl	8002416 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8bf 	bl	800513a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fbc:	e09c      	b.n	80050f8 <HAL_UART_IRQHandler+0x518>
 8004fbe:	bf00      	nop
 8004fc0:	080052c7 	.word	0x080052c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 808e 	beq.w	80050fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8089 	beq.w	80050fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800500e:	647a      	str	r2, [r7, #68]	; 0x44
 8005010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e3      	bne.n	8004fea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	623b      	str	r3, [r7, #32]
   return(result);
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005046:	633a      	str	r2, [r7, #48]	; 0x30
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e3      	bne.n	8005022 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60fb      	str	r3, [r7, #12]
   return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800508c:	61fa      	str	r2, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	617b      	str	r3, [r7, #20]
   return(result);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e3      	bne.n	8005068 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f844 	bl	800513a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050b2:	e023      	b.n	80050fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <HAL_UART_IRQHandler+0x4f4>
 80050c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f90e 	bl	80052ee <UART_Transmit_IT>
    return;
 80050d2:	e014      	b.n	80050fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_UART_IRQHandler+0x51e>
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f94d 	bl	800538c <UART_EndTransmit_IT>
    return;
 80050f2:	e004      	b.n	80050fe <HAL_UART_IRQHandler+0x51e>
    return;
 80050f4:	bf00      	nop
 80050f6:	e002      	b.n	80050fe <HAL_UART_IRQHandler+0x51e>
      return;
 80050f8:	bf00      	nop
 80050fa:	e000      	b.n	80050fe <HAL_UART_IRQHandler+0x51e>
      return;
 80050fc:	bf00      	nop
  }
}
 80050fe:	37e8      	adds	r7, #232	; 0xe8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	e03b      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d037      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fc fe07 	bl	8001d7c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <UART_WaitOnFlagUntilTimeout+0x30>
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e03a      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d023      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	d020      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d01d      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d116      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f81d 	bl	8005202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2208      	movs	r2, #8
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e00f      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d0b4      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005202:	b480      	push	{r7}
 8005204:	b095      	sub	sp, #84	; 0x54
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522a:	643a      	str	r2, [r7, #64]	; 0x40
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	61fb      	str	r3, [r7, #28]
   return(result);
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	64bb      	str	r3, [r7, #72]	; 0x48
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	2b01      	cmp	r3, #1
 8005278:	d119      	bne.n	80052ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	60bb      	str	r3, [r7, #8]
   return(result);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f023 0310 	bic.w	r3, r3, #16
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529a:	61ba      	str	r2, [r7, #24]
 800529c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6979      	ldr	r1, [r7, #20]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	613b      	str	r3, [r7, #16]
   return(result);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052bc:	bf00      	nop
 80052be:	3754      	adds	r7, #84	; 0x54
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff ff21 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b21      	cmp	r3, #33	; 0x21
 8005300:	d13e      	bne.n	8005380 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	d114      	bne.n	8005336 <UART_Transmit_IT+0x48>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d110      	bne.n	8005336 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005328:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]
 8005334:	e008      	b.n	8005348 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6211      	str	r1, [r2, #32]
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29b      	uxth	r3, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4619      	mov	r1, r3
 8005356:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800536a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800537a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fea9 	bl	8005104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	; 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b22      	cmp	r3, #34	; 0x22
 80053ce:	f040 80ae 	bne.w	800552e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d117      	bne.n	800540c <UART_Receive_IT+0x50>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d113      	bne.n	800540c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	1c9a      	adds	r2, r3, #2
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
 800540a:	e026      	b.n	800545a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d007      	beq.n	8005430 <UART_Receive_IT+0x74>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <UART_Receive_IT+0x82>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e008      	b.n	8005450 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800546a:	2b00      	cmp	r3, #0
 800546c:	d15d      	bne.n	800552a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0220 	bic.w	r2, r2, #32
 800547c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800548c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d135      	bne.n	8005520 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054da:	623a      	str	r2, [r7, #32]
 80054dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	69f9      	ldr	r1, [r7, #28]
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d10a      	bne.n	8005512 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fe0e 	bl	800513a <HAL_UARTEx_RxEventCallback>
 800551e:	e002      	b.n	8005526 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fdf8 	bl	8005116 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e002      	b.n	8005530 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e000      	b.n	8005530 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3730      	adds	r7, #48	; 0x30
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005572:	f023 030c 	bic.w	r3, r3, #12
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	430b      	orrs	r3, r1
 800557e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <UART_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7fe fdb2 	bl	8004108 <HAL_RCC_GetPCLK2Freq>
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	e002      	b.n	80055ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055a8:	f7fe fd9a 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 80055ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <UART_SetConfig+0x118>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	0119      	lsls	r1, r3, #4
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009a      	lsls	r2, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <UART_SetConfig+0x118>)
 80055e6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2064      	movs	r0, #100	; 0x64
 80055ee:	fb00 f303 	mul.w	r3, r0, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <UART_SetConfig+0x118>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	4419      	add	r1, r3
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009a      	lsls	r2, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	fbb2 f2f3 	udiv	r2, r2, r3
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <UART_SetConfig+0x118>)
 800561e:	fba3 0302 	umull	r0, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2064      	movs	r0, #100	; 0x64
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	3332      	adds	r3, #50	; 0x32
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	440a      	add	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40013800 	.word	0x40013800
 8005650:	51eb851f 	.word	0x51eb851f

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2600      	movs	r6, #0
 8005664:	4d0c      	ldr	r5, [pc, #48]	; (8005698 <__libc_init_array+0x38>)
 8005666:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	f002 febc 	bl	80083ec <_init>
 8005674:	2600      	movs	r6, #0
 8005676:	4d0a      	ldr	r5, [pc, #40]	; (80056a0 <__libc_init_array+0x40>)
 8005678:	4c0a      	ldr	r4, [pc, #40]	; (80056a4 <__libc_init_array+0x44>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08008864 	.word	0x08008864
 800569c:	08008864 	.word	0x08008864
 80056a0:	08008864 	.word	0x08008864
 80056a4:	08008868 	.word	0x08008868

080056a8 <memset>:
 80056a8:	4603      	mov	r3, r0
 80056aa:	4402      	add	r2, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <__cvt>:
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056be:	461f      	mov	r7, r3
 80056c0:	bfbb      	ittet	lt
 80056c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	461f      	movlt	r7, r3
 80056c8:	2300      	movge	r3, #0
 80056ca:	232d      	movlt	r3, #45	; 0x2d
 80056cc:	b088      	sub	sp, #32
 80056ce:	4614      	mov	r4, r2
 80056d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056d4:	7013      	strb	r3, [r2, #0]
 80056d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056dc:	f023 0820 	bic.w	r8, r3, #32
 80056e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056e4:	d005      	beq.n	80056f2 <__cvt+0x3a>
 80056e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056ea:	d100      	bne.n	80056ee <__cvt+0x36>
 80056ec:	3501      	adds	r5, #1
 80056ee:	2302      	movs	r3, #2
 80056f0:	e000      	b.n	80056f4 <__cvt+0x3c>
 80056f2:	2303      	movs	r3, #3
 80056f4:	aa07      	add	r2, sp, #28
 80056f6:	9204      	str	r2, [sp, #16]
 80056f8:	aa06      	add	r2, sp, #24
 80056fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056fe:	e9cd 3500 	strd	r3, r5, [sp]
 8005702:	4622      	mov	r2, r4
 8005704:	463b      	mov	r3, r7
 8005706:	f000 fce7 	bl	80060d8 <_dtoa_r>
 800570a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800570e:	4606      	mov	r6, r0
 8005710:	d102      	bne.n	8005718 <__cvt+0x60>
 8005712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005714:	07db      	lsls	r3, r3, #31
 8005716:	d522      	bpl.n	800575e <__cvt+0xa6>
 8005718:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800571c:	eb06 0905 	add.w	r9, r6, r5
 8005720:	d110      	bne.n	8005744 <__cvt+0x8c>
 8005722:	7833      	ldrb	r3, [r6, #0]
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d10a      	bne.n	800573e <__cvt+0x86>
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	4620      	mov	r0, r4
 800572e:	4639      	mov	r1, r7
 8005730:	f7fb f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8005734:	b918      	cbnz	r0, 800573e <__cvt+0x86>
 8005736:	f1c5 0501 	rsb	r5, r5, #1
 800573a:	f8ca 5000 	str.w	r5, [sl]
 800573e:	f8da 3000 	ldr.w	r3, [sl]
 8005742:	4499      	add	r9, r3
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4620      	mov	r0, r4
 800574a:	4639      	mov	r1, r7
 800574c:	f7fb f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8005750:	b108      	cbz	r0, 8005756 <__cvt+0x9e>
 8005752:	f8cd 901c 	str.w	r9, [sp, #28]
 8005756:	2230      	movs	r2, #48	; 0x30
 8005758:	9b07      	ldr	r3, [sp, #28]
 800575a:	454b      	cmp	r3, r9
 800575c:	d307      	bcc.n	800576e <__cvt+0xb6>
 800575e:	4630      	mov	r0, r6
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	b008      	add	sp, #32
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	9107      	str	r1, [sp, #28]
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e7f0      	b.n	8005758 <__cvt+0xa0>

08005776 <__exponent>:
 8005776:	4603      	mov	r3, r0
 8005778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800577a:	2900      	cmp	r1, #0
 800577c:	f803 2b02 	strb.w	r2, [r3], #2
 8005780:	bfb6      	itet	lt
 8005782:	222d      	movlt	r2, #45	; 0x2d
 8005784:	222b      	movge	r2, #43	; 0x2b
 8005786:	4249      	neglt	r1, r1
 8005788:	2909      	cmp	r1, #9
 800578a:	7042      	strb	r2, [r0, #1]
 800578c:	dd2b      	ble.n	80057e6 <__exponent+0x70>
 800578e:	f10d 0407 	add.w	r4, sp, #7
 8005792:	46a4      	mov	ip, r4
 8005794:	270a      	movs	r7, #10
 8005796:	fb91 f6f7 	sdiv	r6, r1, r7
 800579a:	460a      	mov	r2, r1
 800579c:	46a6      	mov	lr, r4
 800579e:	fb07 1516 	mls	r5, r7, r6, r1
 80057a2:	2a63      	cmp	r2, #99	; 0x63
 80057a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80057a8:	4631      	mov	r1, r6
 80057aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80057ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057b2:	dcf0      	bgt.n	8005796 <__exponent+0x20>
 80057b4:	3130      	adds	r1, #48	; 0x30
 80057b6:	f1ae 0502 	sub.w	r5, lr, #2
 80057ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057be:	4629      	mov	r1, r5
 80057c0:	1c44      	adds	r4, r0, #1
 80057c2:	4561      	cmp	r1, ip
 80057c4:	d30a      	bcc.n	80057dc <__exponent+0x66>
 80057c6:	f10d 0209 	add.w	r2, sp, #9
 80057ca:	eba2 020e 	sub.w	r2, r2, lr
 80057ce:	4565      	cmp	r5, ip
 80057d0:	bf88      	it	hi
 80057d2:	2200      	movhi	r2, #0
 80057d4:	4413      	add	r3, r2
 80057d6:	1a18      	subs	r0, r3, r0
 80057d8:	b003      	add	sp, #12
 80057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057e4:	e7ed      	b.n	80057c2 <__exponent+0x4c>
 80057e6:	2330      	movs	r3, #48	; 0x30
 80057e8:	3130      	adds	r1, #48	; 0x30
 80057ea:	7083      	strb	r3, [r0, #2]
 80057ec:	70c1      	strb	r1, [r0, #3]
 80057ee:	1d03      	adds	r3, r0, #4
 80057f0:	e7f1      	b.n	80057d6 <__exponent+0x60>
	...

080057f4 <_printf_float>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b091      	sub	sp, #68	; 0x44
 80057fa:	460c      	mov	r4, r1
 80057fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005800:	4616      	mov	r6, r2
 8005802:	461f      	mov	r7, r3
 8005804:	4605      	mov	r5, r0
 8005806:	f001 fa55 	bl	8006cb4 <_localeconv_r>
 800580a:	6803      	ldr	r3, [r0, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	9309      	str	r3, [sp, #36]	; 0x24
 8005810:	f7fa fc9e 	bl	8000150 <strlen>
 8005814:	2300      	movs	r3, #0
 8005816:	930e      	str	r3, [sp, #56]	; 0x38
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	900a      	str	r0, [sp, #40]	; 0x28
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	f103 0208 	add.w	r2, r3, #8
 8005828:	f894 9018 	ldrb.w	r9, [r4, #24]
 800582c:	f8d4 b000 	ldr.w	fp, [r4]
 8005830:	f8c8 2000 	str.w	r2, [r8]
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800583c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005840:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005844:	930b      	str	r3, [sp, #44]	; 0x2c
 8005846:	f04f 32ff 	mov.w	r2, #4294967295
 800584a:	4640      	mov	r0, r8
 800584c:	4b9c      	ldr	r3, [pc, #624]	; (8005ac0 <_printf_float+0x2cc>)
 800584e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005850:	f7fb f8dc 	bl	8000a0c <__aeabi_dcmpun>
 8005854:	bb70      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	4640      	mov	r0, r8
 800585c:	4b98      	ldr	r3, [pc, #608]	; (8005ac0 <_printf_float+0x2cc>)
 800585e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005860:	f7fb f8b6 	bl	80009d0 <__aeabi_dcmple>
 8005864:	bb30      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4651      	mov	r1, sl
 800586e:	f7fb f8a5 	bl	80009bc <__aeabi_dcmplt>
 8005872:	b110      	cbz	r0, 800587a <_printf_float+0x86>
 8005874:	232d      	movs	r3, #45	; 0x2d
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587a:	4b92      	ldr	r3, [pc, #584]	; (8005ac4 <_printf_float+0x2d0>)
 800587c:	4892      	ldr	r0, [pc, #584]	; (8005ac8 <_printf_float+0x2d4>)
 800587e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005882:	bf94      	ite	ls
 8005884:	4698      	movls	r8, r3
 8005886:	4680      	movhi	r8, r0
 8005888:	2303      	movs	r3, #3
 800588a:	f04f 0a00 	mov.w	sl, #0
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	f02b 0304 	bic.w	r3, fp, #4
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	4633      	mov	r3, r6
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	9700      	str	r7, [sp, #0]
 800589e:	aa0f      	add	r2, sp, #60	; 0x3c
 80058a0:	f000 f9d4 	bl	8005c4c <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 8090 	bne.w	80059ca <_printf_float+0x1d6>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b011      	add	sp, #68	; 0x44
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4642      	mov	r2, r8
 80058b6:	4653      	mov	r3, sl
 80058b8:	4640      	mov	r0, r8
 80058ba:	4651      	mov	r1, sl
 80058bc:	f7fb f8a6 	bl	8000a0c <__aeabi_dcmpun>
 80058c0:	b148      	cbz	r0, 80058d6 <_printf_float+0xe2>
 80058c2:	f1ba 0f00 	cmp.w	sl, #0
 80058c6:	bfb8      	it	lt
 80058c8:	232d      	movlt	r3, #45	; 0x2d
 80058ca:	4880      	ldr	r0, [pc, #512]	; (8005acc <_printf_float+0x2d8>)
 80058cc:	bfb8      	it	lt
 80058ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058d2:	4b7f      	ldr	r3, [pc, #508]	; (8005ad0 <_printf_float+0x2dc>)
 80058d4:	e7d3      	b.n	800587e <_printf_float+0x8a>
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	d142      	bne.n	8005966 <_printf_float+0x172>
 80058e0:	2306      	movs	r3, #6
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	9206      	str	r2, [sp, #24]
 80058e8:	aa0e      	add	r2, sp, #56	; 0x38
 80058ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80058ee:	aa0d      	add	r2, sp, #52	; 0x34
 80058f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80058f4:	9203      	str	r2, [sp, #12]
 80058f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80058fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	4642      	mov	r2, r8
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4628      	mov	r0, r5
 8005908:	4653      	mov	r3, sl
 800590a:	910b      	str	r1, [sp, #44]	; 0x2c
 800590c:	f7ff fed4 	bl	80056b8 <__cvt>
 8005910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005912:	4680      	mov	r8, r0
 8005914:	2947      	cmp	r1, #71	; 0x47
 8005916:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005918:	d108      	bne.n	800592c <_printf_float+0x138>
 800591a:	1cc8      	adds	r0, r1, #3
 800591c:	db02      	blt.n	8005924 <_printf_float+0x130>
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	4299      	cmp	r1, r3
 8005922:	dd40      	ble.n	80059a6 <_printf_float+0x1b2>
 8005924:	f1a9 0902 	sub.w	r9, r9, #2
 8005928:	fa5f f989 	uxtb.w	r9, r9
 800592c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005930:	d81f      	bhi.n	8005972 <_printf_float+0x17e>
 8005932:	464a      	mov	r2, r9
 8005934:	3901      	subs	r1, #1
 8005936:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800593a:	910d      	str	r1, [sp, #52]	; 0x34
 800593c:	f7ff ff1b 	bl	8005776 <__exponent>
 8005940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005942:	4682      	mov	sl, r0
 8005944:	1813      	adds	r3, r2, r0
 8005946:	2a01      	cmp	r2, #1
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	dc02      	bgt.n	8005952 <_printf_float+0x15e>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	07d2      	lsls	r2, r2, #31
 8005950:	d501      	bpl.n	8005956 <_printf_float+0x162>
 8005952:	3301      	adds	r3, #1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800595a:	2b00      	cmp	r3, #0
 800595c:	d09b      	beq.n	8005896 <_printf_float+0xa2>
 800595e:	232d      	movs	r3, #45	; 0x2d
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005964:	e797      	b.n	8005896 <_printf_float+0xa2>
 8005966:	2947      	cmp	r1, #71	; 0x47
 8005968:	d1bc      	bne.n	80058e4 <_printf_float+0xf0>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ba      	bne.n	80058e4 <_printf_float+0xf0>
 800596e:	2301      	movs	r3, #1
 8005970:	e7b7      	b.n	80058e2 <_printf_float+0xee>
 8005972:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005976:	d118      	bne.n	80059aa <_printf_float+0x1b6>
 8005978:	2900      	cmp	r1, #0
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	dd0b      	ble.n	8005996 <_printf_float+0x1a2>
 800597e:	6121      	str	r1, [r4, #16]
 8005980:	b913      	cbnz	r3, 8005988 <_printf_float+0x194>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	07d0      	lsls	r0, r2, #31
 8005986:	d502      	bpl.n	800598e <_printf_float+0x19a>
 8005988:	3301      	adds	r3, #1
 800598a:	440b      	add	r3, r1
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	f04f 0a00 	mov.w	sl, #0
 8005992:	65a1      	str	r1, [r4, #88]	; 0x58
 8005994:	e7df      	b.n	8005956 <_printf_float+0x162>
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x1aa>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d2      	lsls	r2, r2, #31
 800599c:	d501      	bpl.n	80059a2 <_printf_float+0x1ae>
 800599e:	3302      	adds	r3, #2
 80059a0:	e7f4      	b.n	800598c <_printf_float+0x198>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f2      	b.n	800598c <_printf_float+0x198>
 80059a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ac:	4299      	cmp	r1, r3
 80059ae:	db05      	blt.n	80059bc <_printf_float+0x1c8>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	6121      	str	r1, [r4, #16]
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	d5ea      	bpl.n	800598e <_printf_float+0x19a>
 80059b8:	1c4b      	adds	r3, r1, #1
 80059ba:	e7e7      	b.n	800598c <_printf_float+0x198>
 80059bc:	2900      	cmp	r1, #0
 80059be:	bfcc      	ite	gt
 80059c0:	2201      	movgt	r2, #1
 80059c2:	f1c1 0202 	rsble	r2, r1, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	e7e0      	b.n	800598c <_printf_float+0x198>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	055a      	lsls	r2, r3, #21
 80059ce:	d407      	bmi.n	80059e0 <_printf_float+0x1ec>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	4642      	mov	r2, r8
 80059d4:	4631      	mov	r1, r6
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b8      	blx	r7
 80059da:	3001      	adds	r0, #1
 80059dc:	d12b      	bne.n	8005a36 <_printf_float+0x242>
 80059de:	e764      	b.n	80058aa <_printf_float+0xb6>
 80059e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059e4:	f240 80dd 	bls.w	8005ba2 <_printf_float+0x3ae>
 80059e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059ec:	2200      	movs	r2, #0
 80059ee:	2300      	movs	r3, #0
 80059f0:	f7fa ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d033      	beq.n	8005a60 <_printf_float+0x26c>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <_printf_float+0x2e0>)
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af51 	beq.w	80058aa <_printf_float+0xb6>
 8005a08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	db02      	blt.n	8005a16 <_printf_float+0x222>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	07d8      	lsls	r0, r3, #31
 8005a14:	d50f      	bpl.n	8005a36 <_printf_float+0x242>
 8005a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	f43f af42 	beq.w	80058aa <_printf_float+0xb6>
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	f104 091a 	add.w	r9, r4, #26
 8005a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a30:	3b01      	subs	r3, #1
 8005a32:	4543      	cmp	r3, r8
 8005a34:	dc09      	bgt.n	8005a4a <_printf_float+0x256>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	079b      	lsls	r3, r3, #30
 8005a3a:	f100 8102 	bmi.w	8005c42 <_printf_float+0x44e>
 8005a3e:	68e0      	ldr	r0, [r4, #12]
 8005a40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a42:	4298      	cmp	r0, r3
 8005a44:	bfb8      	it	lt
 8005a46:	4618      	movlt	r0, r3
 8005a48:	e731      	b.n	80058ae <_printf_float+0xba>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	464a      	mov	r2, r9
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	f43f af28 	beq.w	80058aa <_printf_float+0xb6>
 8005a5a:	f108 0801 	add.w	r8, r8, #1
 8005a5e:	e7e6      	b.n	8005a2e <_printf_float+0x23a>
 8005a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dc38      	bgt.n	8005ad8 <_printf_float+0x2e4>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <_printf_float+0x2e0>)
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f af1a 	beq.w	80058aa <_printf_float+0xb6>
 8005a76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d102      	bne.n	8005a84 <_printf_float+0x290>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	07d9      	lsls	r1, r3, #31
 8005a82:	d5d8      	bpl.n	8005a36 <_printf_float+0x242>
 8005a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f af0b 	beq.w	80058aa <_printf_float+0xb6>
 8005a94:	f04f 0900 	mov.w	r9, #0
 8005a98:	f104 0a1a 	add.w	sl, r4, #26
 8005a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	454b      	cmp	r3, r9
 8005aa2:	dc01      	bgt.n	8005aa8 <_printf_float+0x2b4>
 8005aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa6:	e794      	b.n	80059d2 <_printf_float+0x1de>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4652      	mov	r2, sl
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f aef9 	beq.w	80058aa <_printf_float+0xb6>
 8005ab8:	f109 0901 	add.w	r9, r9, #1
 8005abc:	e7ee      	b.n	8005a9c <_printf_float+0x2a8>
 8005abe:	bf00      	nop
 8005ac0:	7fefffff 	.word	0x7fefffff
 8005ac4:	08008484 	.word	0x08008484
 8005ac8:	08008488 	.word	0x08008488
 8005acc:	08008490 	.word	0x08008490
 8005ad0:	0800848c 	.word	0x0800848c
 8005ad4:	08008494 	.word	0x08008494
 8005ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bfa8      	it	ge
 8005ae0:	461a      	movge	r2, r3
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	4691      	mov	r9, r2
 8005ae6:	dc37      	bgt.n	8005b58 <_printf_float+0x364>
 8005ae8:	f04f 0b00 	mov.w	fp, #0
 8005aec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af0:	f104 021a 	add.w	r2, r4, #26
 8005af4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005af8:	ebaa 0309 	sub.w	r3, sl, r9
 8005afc:	455b      	cmp	r3, fp
 8005afe:	dc33      	bgt.n	8005b68 <_printf_float+0x374>
 8005b00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b04:	429a      	cmp	r2, r3
 8005b06:	db3b      	blt.n	8005b80 <_printf_float+0x38c>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07da      	lsls	r2, r3, #31
 8005b0c:	d438      	bmi.n	8005b80 <_printf_float+0x38c>
 8005b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b12:	eba2 030a 	sub.w	r3, r2, sl
 8005b16:	eba2 0901 	sub.w	r9, r2, r1
 8005b1a:	4599      	cmp	r9, r3
 8005b1c:	bfa8      	it	ge
 8005b1e:	4699      	movge	r9, r3
 8005b20:	f1b9 0f00 	cmp.w	r9, #0
 8005b24:	dc34      	bgt.n	8005b90 <_printf_float+0x39c>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b2e:	f104 0a1a 	add.w	sl, r4, #26
 8005b32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	eba3 0309 	sub.w	r3, r3, r9
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	f77f af7a 	ble.w	8005a36 <_printf_float+0x242>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4652      	mov	r2, sl
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f aeac 	beq.w	80058aa <_printf_float+0xb6>
 8005b52:	f108 0801 	add.w	r8, r8, #1
 8005b56:	e7ec      	b.n	8005b32 <_printf_float+0x33e>
 8005b58:	4613      	mov	r3, r2
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	d1c0      	bne.n	8005ae8 <_printf_float+0x2f4>
 8005b66:	e6a0      	b.n	80058aa <_printf_float+0xb6>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f ae99 	beq.w	80058aa <_printf_float+0xb6>
 8005b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b7a:	f10b 0b01 	add.w	fp, fp, #1
 8005b7e:	e7b9      	b.n	8005af4 <_printf_float+0x300>
 8005b80:	4631      	mov	r1, r6
 8005b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d1bf      	bne.n	8005b0e <_printf_float+0x31a>
 8005b8e:	e68c      	b.n	80058aa <_printf_float+0xb6>
 8005b90:	464b      	mov	r3, r9
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	eb08 020a 	add.w	r2, r8, sl
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d1c2      	bne.n	8005b26 <_printf_float+0x332>
 8005ba0:	e683      	b.n	80058aa <_printf_float+0xb6>
 8005ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba4:	2a01      	cmp	r2, #1
 8005ba6:	dc01      	bgt.n	8005bac <_printf_float+0x3b8>
 8005ba8:	07db      	lsls	r3, r3, #31
 8005baa:	d537      	bpl.n	8005c1c <_printf_float+0x428>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4642      	mov	r2, r8
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f ae77 	beq.w	80058aa <_printf_float+0xb6>
 8005bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f ae6f 	beq.w	80058aa <_printf_float+0xb6>
 8005bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f7fa fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8005bd8:	b9d8      	cbnz	r0, 8005c12 <_printf_float+0x41e>
 8005bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bdc:	f108 0201 	add.w	r2, r8, #1
 8005be0:	3b01      	subs	r3, #1
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d10e      	bne.n	8005c0a <_printf_float+0x416>
 8005bec:	e65d      	b.n	80058aa <_printf_float+0xb6>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae56 	beq.w	80058aa <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4543      	cmp	r3, r8
 8005c08:	dcf1      	bgt.n	8005bee <_printf_float+0x3fa>
 8005c0a:	4653      	mov	r3, sl
 8005c0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c10:	e6e0      	b.n	80059d4 <_printf_float+0x1e0>
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	f104 091a 	add.w	r9, r4, #26
 8005c1a:	e7f2      	b.n	8005c02 <_printf_float+0x40e>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4642      	mov	r2, r8
 8005c20:	e7df      	b.n	8005be2 <_printf_float+0x3ee>
 8005c22:	2301      	movs	r3, #1
 8005c24:	464a      	mov	r2, r9
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f ae3c 	beq.w	80058aa <_printf_float+0xb6>
 8005c32:	f108 0801 	add.w	r8, r8, #1
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	4543      	cmp	r3, r8
 8005c3e:	dcf0      	bgt.n	8005c22 <_printf_float+0x42e>
 8005c40:	e6fd      	b.n	8005a3e <_printf_float+0x24a>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	f104 0919 	add.w	r9, r4, #25
 8005c4a:	e7f4      	b.n	8005c36 <_printf_float+0x442>

08005c4c <_printf_common>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	4616      	mov	r6, r2
 8005c52:	4699      	mov	r9, r3
 8005c54:	688a      	ldr	r2, [r1, #8]
 8005c56:	690b      	ldr	r3, [r1, #16]
 8005c58:	4607      	mov	r7, r0
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	bfb8      	it	lt
 8005c5e:	4613      	movlt	r3, r2
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c66:	460c      	mov	r4, r1
 8005c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c6c:	b10a      	cbz	r2, 8005c72 <_printf_common+0x26>
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6033      	str	r3, [r6, #0]
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	0699      	lsls	r1, r3, #26
 8005c76:	bf42      	ittt	mi
 8005c78:	6833      	ldrmi	r3, [r6, #0]
 8005c7a:	3302      	addmi	r3, #2
 8005c7c:	6033      	strmi	r3, [r6, #0]
 8005c7e:	6825      	ldr	r5, [r4, #0]
 8005c80:	f015 0506 	ands.w	r5, r5, #6
 8005c84:	d106      	bne.n	8005c94 <_printf_common+0x48>
 8005c86:	f104 0a19 	add.w	sl, r4, #25
 8005c8a:	68e3      	ldr	r3, [r4, #12]
 8005c8c:	6832      	ldr	r2, [r6, #0]
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dc28      	bgt.n	8005ce6 <_printf_common+0x9a>
 8005c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c98:	1e13      	subs	r3, r2, #0
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	bf18      	it	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	0692      	lsls	r2, r2, #26
 8005ca2:	d42d      	bmi.n	8005d00 <_printf_common+0xb4>
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cac:	47c0      	blx	r8
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d020      	beq.n	8005cf4 <_printf_common+0xa8>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	68e5      	ldr	r5, [r4, #12]
 8005cb6:	f003 0306 	and.w	r3, r3, #6
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	bf18      	it	ne
 8005cbe:	2500      	movne	r5, #0
 8005cc0:	6832      	ldr	r2, [r6, #0]
 8005cc2:	f04f 0600 	mov.w	r6, #0
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	bf08      	it	eq
 8005cca:	1aad      	subeq	r5, r5, r2
 8005ccc:	6922      	ldr	r2, [r4, #16]
 8005cce:	bf08      	it	eq
 8005cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	bfc4      	itt	gt
 8005cd8:	1a9b      	subgt	r3, r3, r2
 8005cda:	18ed      	addgt	r5, r5, r3
 8005cdc:	341a      	adds	r4, #26
 8005cde:	42b5      	cmp	r5, r6
 8005ce0:	d11a      	bne.n	8005d18 <_printf_common+0xcc>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e008      	b.n	8005cf8 <_printf_common+0xac>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4649      	mov	r1, r9
 8005cec:	4638      	mov	r0, r7
 8005cee:	47c0      	blx	r8
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d103      	bne.n	8005cfc <_printf_common+0xb0>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	e7c4      	b.n	8005c8a <_printf_common+0x3e>
 8005d00:	2030      	movs	r0, #48	; 0x30
 8005d02:	18e1      	adds	r1, r4, r3
 8005d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d0e:	4422      	add	r2, r4
 8005d10:	3302      	adds	r3, #2
 8005d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d16:	e7c5      	b.n	8005ca4 <_printf_common+0x58>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d0e6      	beq.n	8005cf4 <_printf_common+0xa8>
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7d9      	b.n	8005cde <_printf_common+0x92>
	...

08005d2c <_printf_i>:
 8005d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	7e27      	ldrb	r7, [r4, #24]
 8005d34:	4691      	mov	r9, r2
 8005d36:	2f78      	cmp	r7, #120	; 0x78
 8005d38:	4680      	mov	r8, r0
 8005d3a:	469a      	mov	sl, r3
 8005d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d42:	d807      	bhi.n	8005d54 <_printf_i+0x28>
 8005d44:	2f62      	cmp	r7, #98	; 0x62
 8005d46:	d80a      	bhi.n	8005d5e <_printf_i+0x32>
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	f000 80d9 	beq.w	8005f00 <_printf_i+0x1d4>
 8005d4e:	2f58      	cmp	r7, #88	; 0x58
 8005d50:	f000 80a4 	beq.w	8005e9c <_printf_i+0x170>
 8005d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d5c:	e03a      	b.n	8005dd4 <_printf_i+0xa8>
 8005d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d62:	2b15      	cmp	r3, #21
 8005d64:	d8f6      	bhi.n	8005d54 <_printf_i+0x28>
 8005d66:	a001      	add	r0, pc, #4	; (adr r0, 8005d6c <_printf_i+0x40>)
 8005d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005d55 	.word	0x08005d55
 8005d78:	08005d55 	.word	0x08005d55
 8005d7c:	08005d55 	.word	0x08005d55
 8005d80:	08005d55 	.word	0x08005d55
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005d55 	.word	0x08005d55
 8005d8c:	08005d55 	.word	0x08005d55
 8005d90:	08005d55 	.word	0x08005d55
 8005d94:	08005d55 	.word	0x08005d55
 8005d98:	08005ee7 	.word	0x08005ee7
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005ec9 	.word	0x08005ec9
 8005da4:	08005d55 	.word	0x08005d55
 8005da8:	08005d55 	.word	0x08005d55
 8005dac:	08005f09 	.word	0x08005f09
 8005db0:	08005d55 	.word	0x08005d55
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d55 	.word	0x08005d55
 8005dbc:	08005d55 	.word	0x08005d55
 8005dc0:	08005ed1 	.word	0x08005ed1
 8005dc4:	680b      	ldr	r3, [r1, #0]
 8005dc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dca:	1d1a      	adds	r2, r3, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	600a      	str	r2, [r1, #0]
 8005dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0a4      	b.n	8005f22 <_printf_i+0x1f6>
 8005dd8:	6825      	ldr	r5, [r4, #0]
 8005dda:	6808      	ldr	r0, [r1, #0]
 8005ddc:	062e      	lsls	r6, r5, #24
 8005dde:	f100 0304 	add.w	r3, r0, #4
 8005de2:	d50a      	bpl.n	8005dfa <_printf_i+0xce>
 8005de4:	6805      	ldr	r5, [r0, #0]
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	da03      	bge.n	8005df4 <_printf_i+0xc8>
 8005dec:	232d      	movs	r3, #45	; 0x2d
 8005dee:	426d      	negs	r5, r5
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df4:	230a      	movs	r3, #10
 8005df6:	485e      	ldr	r0, [pc, #376]	; (8005f70 <_printf_i+0x244>)
 8005df8:	e019      	b.n	8005e2e <_printf_i+0x102>
 8005dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dfe:	6805      	ldr	r5, [r0, #0]
 8005e00:	600b      	str	r3, [r1, #0]
 8005e02:	bf18      	it	ne
 8005e04:	b22d      	sxthne	r5, r5
 8005e06:	e7ef      	b.n	8005de8 <_printf_i+0xbc>
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	1d18      	adds	r0, r3, #4
 8005e0e:	6008      	str	r0, [r1, #0]
 8005e10:	0628      	lsls	r0, r5, #24
 8005e12:	d501      	bpl.n	8005e18 <_printf_i+0xec>
 8005e14:	681d      	ldr	r5, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <_printf_i+0xf2>
 8005e18:	0669      	lsls	r1, r5, #25
 8005e1a:	d5fb      	bpl.n	8005e14 <_printf_i+0xe8>
 8005e1c:	881d      	ldrh	r5, [r3, #0]
 8005e1e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e20:	bf0c      	ite	eq
 8005e22:	2308      	moveq	r3, #8
 8005e24:	230a      	movne	r3, #10
 8005e26:	4852      	ldr	r0, [pc, #328]	; (8005f70 <_printf_i+0x244>)
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e2e:	6866      	ldr	r6, [r4, #4]
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	bfa8      	it	ge
 8005e34:	6821      	ldrge	r1, [r4, #0]
 8005e36:	60a6      	str	r6, [r4, #8]
 8005e38:	bfa4      	itt	ge
 8005e3a:	f021 0104 	bicge.w	r1, r1, #4
 8005e3e:	6021      	strge	r1, [r4, #0]
 8005e40:	b90d      	cbnz	r5, 8005e46 <_printf_i+0x11a>
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	d04d      	beq.n	8005ee2 <_printf_i+0x1b6>
 8005e46:	4616      	mov	r6, r2
 8005e48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e50:	5dc7      	ldrb	r7, [r0, r7]
 8005e52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e56:	462f      	mov	r7, r5
 8005e58:	42bb      	cmp	r3, r7
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	d9f4      	bls.n	8005e48 <_printf_i+0x11c>
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d10b      	bne.n	8005e7a <_printf_i+0x14e>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	07df      	lsls	r7, r3, #31
 8005e66:	d508      	bpl.n	8005e7a <_printf_i+0x14e>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	6861      	ldr	r1, [r4, #4]
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	bfde      	ittt	le
 8005e70:	2330      	movle	r3, #48	; 0x30
 8005e72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e7a:	1b92      	subs	r2, r2, r6
 8005e7c:	6122      	str	r2, [r4, #16]
 8005e7e:	464b      	mov	r3, r9
 8005e80:	4621      	mov	r1, r4
 8005e82:	4640      	mov	r0, r8
 8005e84:	f8cd a000 	str.w	sl, [sp]
 8005e88:	aa03      	add	r2, sp, #12
 8005e8a:	f7ff fedf 	bl	8005c4c <_printf_common>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d14c      	bne.n	8005f2c <_printf_i+0x200>
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295
 8005e96:	b004      	add	sp, #16
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	4834      	ldr	r0, [pc, #208]	; (8005f70 <_printf_i+0x244>)
 8005e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ea2:	680e      	ldr	r6, [r1, #0]
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005eaa:	061f      	lsls	r7, r3, #24
 8005eac:	600e      	str	r6, [r1, #0]
 8005eae:	d514      	bpl.n	8005eda <_printf_i+0x1ae>
 8005eb0:	07d9      	lsls	r1, r3, #31
 8005eb2:	bf44      	itt	mi
 8005eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb8:	6023      	strmi	r3, [r4, #0]
 8005eba:	b91d      	cbnz	r5, 8005ec4 <_printf_i+0x198>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	e7af      	b.n	8005e28 <_printf_i+0xfc>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	f043 0320 	orr.w	r3, r3, #32
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	2378      	movs	r3, #120	; 0x78
 8005ed2:	4828      	ldr	r0, [pc, #160]	; (8005f74 <_printf_i+0x248>)
 8005ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ed8:	e7e3      	b.n	8005ea2 <_printf_i+0x176>
 8005eda:	065e      	lsls	r6, r3, #25
 8005edc:	bf48      	it	mi
 8005ede:	b2ad      	uxthmi	r5, r5
 8005ee0:	e7e6      	b.n	8005eb0 <_printf_i+0x184>
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	e7bb      	b.n	8005e5e <_printf_i+0x132>
 8005ee6:	680b      	ldr	r3, [r1, #0]
 8005ee8:	6826      	ldr	r6, [r4, #0]
 8005eea:	1d1d      	adds	r5, r3, #4
 8005eec:	6960      	ldr	r0, [r4, #20]
 8005eee:	600d      	str	r5, [r1, #0]
 8005ef0:	0635      	lsls	r5, r6, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	d501      	bpl.n	8005efa <_printf_i+0x1ce>
 8005ef6:	6018      	str	r0, [r3, #0]
 8005ef8:	e002      	b.n	8005f00 <_printf_i+0x1d4>
 8005efa:	0671      	lsls	r1, r6, #25
 8005efc:	d5fb      	bpl.n	8005ef6 <_printf_i+0x1ca>
 8005efe:	8018      	strh	r0, [r3, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	4616      	mov	r6, r2
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	e7ba      	b.n	8005e7e <_printf_i+0x152>
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	600a      	str	r2, [r1, #0]
 8005f0e:	681e      	ldr	r6, [r3, #0]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4630      	mov	r0, r6
 8005f14:	6862      	ldr	r2, [r4, #4]
 8005f16:	f000 fed9 	bl	8006ccc <memchr>
 8005f1a:	b108      	cbz	r0, 8005f20 <_printf_i+0x1f4>
 8005f1c:	1b80      	subs	r0, r0, r6
 8005f1e:	6060      	str	r0, [r4, #4]
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	2300      	movs	r3, #0
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2a:	e7a8      	b.n	8005e7e <_printf_i+0x152>
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	47d0      	blx	sl
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0ab      	beq.n	8005e92 <_printf_i+0x166>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d413      	bmi.n	8005f68 <_printf_i+0x23c>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e7a4      	b.n	8005e96 <_printf_i+0x16a>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4632      	mov	r2, r6
 8005f50:	4649      	mov	r1, r9
 8005f52:	4640      	mov	r0, r8
 8005f54:	47d0      	blx	sl
 8005f56:	3001      	adds	r0, #1
 8005f58:	d09b      	beq.n	8005e92 <_printf_i+0x166>
 8005f5a:	3501      	adds	r5, #1
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	9903      	ldr	r1, [sp, #12]
 8005f60:	1a5b      	subs	r3, r3, r1
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dcf2      	bgt.n	8005f4c <_printf_i+0x220>
 8005f66:	e7eb      	b.n	8005f40 <_printf_i+0x214>
 8005f68:	2500      	movs	r5, #0
 8005f6a:	f104 0619 	add.w	r6, r4, #25
 8005f6e:	e7f5      	b.n	8005f5c <_printf_i+0x230>
 8005f70:	08008496 	.word	0x08008496
 8005f74:	080084a7 	.word	0x080084a7

08005f78 <siprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f7e:	b500      	push	{lr}
 8005f80:	b09c      	sub	sp, #112	; 0x70
 8005f82:	ab1d      	add	r3, sp, #116	; 0x74
 8005f84:	9002      	str	r0, [sp, #8]
 8005f86:	9006      	str	r0, [sp, #24]
 8005f88:	9107      	str	r1, [sp, #28]
 8005f8a:	9104      	str	r1, [sp, #16]
 8005f8c:	4808      	ldr	r0, [pc, #32]	; (8005fb0 <siprintf+0x38>)
 8005f8e:	4909      	ldr	r1, [pc, #36]	; (8005fb4 <siprintf+0x3c>)
 8005f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	a902      	add	r1, sp, #8
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f001 fb44 	bl	8007628 <_svfiprintf_r>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	9b02      	ldr	r3, [sp, #8]
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	b01c      	add	sp, #112	; 0x70
 8005fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fac:	b003      	add	sp, #12
 8005fae:	4770      	bx	lr
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <quorem>:
 8005fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	6903      	ldr	r3, [r0, #16]
 8005fbe:	690c      	ldr	r4, [r1, #16]
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	f2c0 8083 	blt.w	80060ce <quorem+0x116>
 8005fc8:	3c01      	subs	r4, #1
 8005fca:	f100 0514 	add.w	r5, r0, #20
 8005fce:	f101 0814 	add.w	r8, r1, #20
 8005fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fe8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ff0:	d332      	bcc.n	8006058 <quorem+0xa0>
 8005ff2:	f04f 0e00 	mov.w	lr, #0
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	46ac      	mov	ip, r5
 8005ffa:	46f2      	mov	sl, lr
 8005ffc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006000:	b293      	uxth	r3, r2
 8006002:	fb06 e303 	mla	r3, r6, r3, lr
 8006006:	0c12      	lsrs	r2, r2, #16
 8006008:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800600c:	fb06 e202 	mla	r2, r6, r2, lr
 8006010:	b29b      	uxth	r3, r3
 8006012:	ebaa 0303 	sub.w	r3, sl, r3
 8006016:	f8dc a000 	ldr.w	sl, [ip]
 800601a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800601e:	fa1f fa8a 	uxth.w	sl, sl
 8006022:	4453      	add	r3, sl
 8006024:	fa1f fa82 	uxth.w	sl, r2
 8006028:	f8dc 2000 	ldr.w	r2, [ip]
 800602c:	4581      	cmp	r9, r0
 800602e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006032:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800603c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006040:	f84c 3b04 	str.w	r3, [ip], #4
 8006044:	d2da      	bcs.n	8005ffc <quorem+0x44>
 8006046:	f855 300b 	ldr.w	r3, [r5, fp]
 800604a:	b92b      	cbnz	r3, 8006058 <quorem+0xa0>
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	3b04      	subs	r3, #4
 8006050:	429d      	cmp	r5, r3
 8006052:	461a      	mov	r2, r3
 8006054:	d32f      	bcc.n	80060b6 <quorem+0xfe>
 8006056:	613c      	str	r4, [r7, #16]
 8006058:	4638      	mov	r0, r7
 800605a:	f001 f8cd 	bl	80071f8 <__mcmp>
 800605e:	2800      	cmp	r0, #0
 8006060:	db25      	blt.n	80060ae <quorem+0xf6>
 8006062:	4628      	mov	r0, r5
 8006064:	f04f 0c00 	mov.w	ip, #0
 8006068:	3601      	adds	r6, #1
 800606a:	f858 1b04 	ldr.w	r1, [r8], #4
 800606e:	f8d0 e000 	ldr.w	lr, [r0]
 8006072:	b28b      	uxth	r3, r1
 8006074:	ebac 0303 	sub.w	r3, ip, r3
 8006078:	fa1f f28e 	uxth.w	r2, lr
 800607c:	4413      	add	r3, r2
 800607e:	0c0a      	lsrs	r2, r1, #16
 8006080:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800608e:	45c1      	cmp	r9, r8
 8006090:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006094:	f840 3b04 	str.w	r3, [r0], #4
 8006098:	d2e7      	bcs.n	800606a <quorem+0xb2>
 800609a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800609e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060a2:	b922      	cbnz	r2, 80060ae <quorem+0xf6>
 80060a4:	3b04      	subs	r3, #4
 80060a6:	429d      	cmp	r5, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	d30a      	bcc.n	80060c2 <quorem+0x10a>
 80060ac:	613c      	str	r4, [r7, #16]
 80060ae:	4630      	mov	r0, r6
 80060b0:	b003      	add	sp, #12
 80060b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	3b04      	subs	r3, #4
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d1cb      	bne.n	8006056 <quorem+0x9e>
 80060be:	3c01      	subs	r4, #1
 80060c0:	e7c6      	b.n	8006050 <quorem+0x98>
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d1f0      	bne.n	80060ac <quorem+0xf4>
 80060ca:	3c01      	subs	r4, #1
 80060cc:	e7eb      	b.n	80060a6 <quorem+0xee>
 80060ce:	2000      	movs	r0, #0
 80060d0:	e7ee      	b.n	80060b0 <quorem+0xf8>
 80060d2:	0000      	movs	r0, r0
 80060d4:	0000      	movs	r0, r0
	...

080060d8 <_dtoa_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	461f      	mov	r7, r3
 80060e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060e2:	b099      	sub	sp, #100	; 0x64
 80060e4:	4605      	mov	r5, r0
 80060e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80060ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80060ee:	b974      	cbnz	r4, 800610e <_dtoa_r+0x36>
 80060f0:	2010      	movs	r0, #16
 80060f2:	f000 fde3 	bl	8006cbc <malloc>
 80060f6:	4602      	mov	r2, r0
 80060f8:	6268      	str	r0, [r5, #36]	; 0x24
 80060fa:	b920      	cbnz	r0, 8006106 <_dtoa_r+0x2e>
 80060fc:	21ea      	movs	r1, #234	; 0xea
 80060fe:	4bae      	ldr	r3, [pc, #696]	; (80063b8 <_dtoa_r+0x2e0>)
 8006100:	48ae      	ldr	r0, [pc, #696]	; (80063bc <_dtoa_r+0x2e4>)
 8006102:	f001 fba1 	bl	8007848 <__assert_func>
 8006106:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800610a:	6004      	str	r4, [r0, #0]
 800610c:	60c4      	str	r4, [r0, #12]
 800610e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	b151      	cbz	r1, 800612a <_dtoa_r+0x52>
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	2301      	movs	r3, #1
 8006118:	4093      	lsls	r3, r2
 800611a:	604a      	str	r2, [r1, #4]
 800611c:	608b      	str	r3, [r1, #8]
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fe30 	bl	8006d84 <_Bfree>
 8006124:	2200      	movs	r2, #0
 8006126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	1e3b      	subs	r3, r7, #0
 800612c:	bfaf      	iteee	ge
 800612e:	2300      	movge	r3, #0
 8006130:	2201      	movlt	r2, #1
 8006132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006136:	9305      	strlt	r3, [sp, #20]
 8006138:	bfa8      	it	ge
 800613a:	f8c8 3000 	strge.w	r3, [r8]
 800613e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006142:	4b9f      	ldr	r3, [pc, #636]	; (80063c0 <_dtoa_r+0x2e8>)
 8006144:	bfb8      	it	lt
 8006146:	f8c8 2000 	strlt.w	r2, [r8]
 800614a:	ea33 0309 	bics.w	r3, r3, r9
 800614e:	d119      	bne.n	8006184 <_dtoa_r+0xac>
 8006150:	f242 730f 	movw	r3, #9999	; 0x270f
 8006154:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800615c:	4333      	orrs	r3, r6
 800615e:	f000 8580 	beq.w	8006c62 <_dtoa_r+0xb8a>
 8006162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006164:	b953      	cbnz	r3, 800617c <_dtoa_r+0xa4>
 8006166:	4b97      	ldr	r3, [pc, #604]	; (80063c4 <_dtoa_r+0x2ec>)
 8006168:	e022      	b.n	80061b0 <_dtoa_r+0xd8>
 800616a:	4b97      	ldr	r3, [pc, #604]	; (80063c8 <_dtoa_r+0x2f0>)
 800616c:	9308      	str	r3, [sp, #32]
 800616e:	3308      	adds	r3, #8
 8006170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	9808      	ldr	r0, [sp, #32]
 8006176:	b019      	add	sp, #100	; 0x64
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	4b91      	ldr	r3, [pc, #580]	; (80063c4 <_dtoa_r+0x2ec>)
 800617e:	9308      	str	r3, [sp, #32]
 8006180:	3303      	adds	r3, #3
 8006182:	e7f5      	b.n	8006170 <_dtoa_r+0x98>
 8006184:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006188:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800618c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	f7fa fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8006198:	4680      	mov	r8, r0
 800619a:	b158      	cbz	r0, 80061b4 <_dtoa_r+0xdc>
 800619c:	2301      	movs	r3, #1
 800619e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8559 	beq.w	8006c5c <_dtoa_r+0xb84>
 80061aa:	4888      	ldr	r0, [pc, #544]	; (80063cc <_dtoa_r+0x2f4>)
 80061ac:	6018      	str	r0, [r3, #0]
 80061ae:	1e43      	subs	r3, r0, #1
 80061b0:	9308      	str	r3, [sp, #32]
 80061b2:	e7df      	b.n	8006174 <_dtoa_r+0x9c>
 80061b4:	ab16      	add	r3, sp, #88	; 0x58
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	ab17      	add	r3, sp, #92	; 0x5c
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	4628      	mov	r0, r5
 80061be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061c2:	f001 f8c5 	bl	8007350 <__d2b>
 80061c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061ca:	4682      	mov	sl, r0
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d07e      	beq.n	80062ce <_dtoa_r+0x1f6>
 80061d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80061da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80061e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80061e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80061ea:	2200      	movs	r2, #0
 80061ec:	4b78      	ldr	r3, [pc, #480]	; (80063d0 <_dtoa_r+0x2f8>)
 80061ee:	f7f9 ffbb 	bl	8000168 <__aeabi_dsub>
 80061f2:	a36b      	add	r3, pc, #428	; (adr r3, 80063a0 <_dtoa_r+0x2c8>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	a36a      	add	r3, pc, #424	; (adr r3, 80063a8 <_dtoa_r+0x2d0>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7f9 ffb3 	bl	800016c <__adddf3>
 8006206:	4606      	mov	r6, r0
 8006208:	4620      	mov	r0, r4
 800620a:	460f      	mov	r7, r1
 800620c:	f7fa f8fa 	bl	8000404 <__aeabi_i2d>
 8006210:	a367      	add	r3, pc, #412	; (adr r3, 80063b0 <_dtoa_r+0x2d8>)
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f7fa f95f 	bl	80004d8 <__aeabi_dmul>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4630      	mov	r0, r6
 8006220:	4639      	mov	r1, r7
 8006222:	f7f9 ffa3 	bl	800016c <__adddf3>
 8006226:	4606      	mov	r6, r0
 8006228:	460f      	mov	r7, r1
 800622a:	f7fa fc05 	bl	8000a38 <__aeabi_d2iz>
 800622e:	2200      	movs	r2, #0
 8006230:	4681      	mov	r9, r0
 8006232:	2300      	movs	r3, #0
 8006234:	4630      	mov	r0, r6
 8006236:	4639      	mov	r1, r7
 8006238:	f7fa fbc0 	bl	80009bc <__aeabi_dcmplt>
 800623c:	b148      	cbz	r0, 8006252 <_dtoa_r+0x17a>
 800623e:	4648      	mov	r0, r9
 8006240:	f7fa f8e0 	bl	8000404 <__aeabi_i2d>
 8006244:	4632      	mov	r2, r6
 8006246:	463b      	mov	r3, r7
 8006248:	f7fa fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800624c:	b908      	cbnz	r0, 8006252 <_dtoa_r+0x17a>
 800624e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006252:	f1b9 0f16 	cmp.w	r9, #22
 8006256:	d857      	bhi.n	8006308 <_dtoa_r+0x230>
 8006258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800625c:	4b5d      	ldr	r3, [pc, #372]	; (80063d4 <_dtoa_r+0x2fc>)
 800625e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f7fa fba9 	bl	80009bc <__aeabi_dcmplt>
 800626a:	2800      	cmp	r0, #0
 800626c:	d04e      	beq.n	800630c <_dtoa_r+0x234>
 800626e:	2300      	movs	r3, #0
 8006270:	f109 39ff 	add.w	r9, r9, #4294967295
 8006274:	930f      	str	r3, [sp, #60]	; 0x3c
 8006276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006278:	1b1c      	subs	r4, r3, r4
 800627a:	1e63      	subs	r3, r4, #1
 800627c:	9309      	str	r3, [sp, #36]	; 0x24
 800627e:	bf49      	itett	mi
 8006280:	f1c4 0301 	rsbmi	r3, r4, #1
 8006284:	2300      	movpl	r3, #0
 8006286:	9306      	strmi	r3, [sp, #24]
 8006288:	2300      	movmi	r3, #0
 800628a:	bf54      	ite	pl
 800628c:	9306      	strpl	r3, [sp, #24]
 800628e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006290:	f1b9 0f00 	cmp.w	r9, #0
 8006294:	db3c      	blt.n	8006310 <_dtoa_r+0x238>
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800629c:	444b      	add	r3, r9
 800629e:	9309      	str	r3, [sp, #36]	; 0x24
 80062a0:	2300      	movs	r3, #0
 80062a2:	930a      	str	r3, [sp, #40]	; 0x28
 80062a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d86c      	bhi.n	8006384 <_dtoa_r+0x2ac>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b4:	bfc8      	it	gt
 80062b6:	2400      	movgt	r4, #0
 80062b8:	f1a3 0302 	sub.w	r3, r3, #2
 80062bc:	bfd8      	it	le
 80062be:	2401      	movle	r4, #1
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	f200 808b 	bhi.w	80063dc <_dtoa_r+0x304>
 80062c6:	e8df f003 	tbb	[pc, r3]
 80062ca:	4f2d      	.short	0x4f2d
 80062cc:	5b4d      	.short	0x5b4d
 80062ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80062d2:	441c      	add	r4, r3
 80062d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80062d8:	2b20      	cmp	r3, #32
 80062da:	bfc3      	ittte	gt
 80062dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80062e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80062e8:	f1c3 0320 	rsble	r3, r3, #32
 80062ec:	bfc6      	itte	gt
 80062ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062f2:	4318      	orrgt	r0, r3
 80062f4:	fa06 f003 	lslle.w	r0, r6, r3
 80062f8:	f7fa f874 	bl	80003e4 <__aeabi_ui2d>
 80062fc:	2301      	movs	r3, #1
 80062fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006302:	3c01      	subs	r4, #1
 8006304:	9313      	str	r3, [sp, #76]	; 0x4c
 8006306:	e770      	b.n	80061ea <_dtoa_r+0x112>
 8006308:	2301      	movs	r3, #1
 800630a:	e7b3      	b.n	8006274 <_dtoa_r+0x19c>
 800630c:	900f      	str	r0, [sp, #60]	; 0x3c
 800630e:	e7b2      	b.n	8006276 <_dtoa_r+0x19e>
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	eba3 0309 	sub.w	r3, r3, r9
 8006316:	9306      	str	r3, [sp, #24]
 8006318:	f1c9 0300 	rsb	r3, r9, #0
 800631c:	930a      	str	r3, [sp, #40]	; 0x28
 800631e:	2300      	movs	r3, #0
 8006320:	930e      	str	r3, [sp, #56]	; 0x38
 8006322:	e7bf      	b.n	80062a4 <_dtoa_r+0x1cc>
 8006324:	2300      	movs	r3, #0
 8006326:	930b      	str	r3, [sp, #44]	; 0x2c
 8006328:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc59      	bgt.n	80063e2 <_dtoa_r+0x30a>
 800632e:	f04f 0b01 	mov.w	fp, #1
 8006332:	465b      	mov	r3, fp
 8006334:	f8cd b008 	str.w	fp, [sp, #8]
 8006338:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800633c:	2200      	movs	r2, #0
 800633e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006340:	6042      	str	r2, [r0, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	f102 0614 	add.w	r6, r2, #20
 8006348:	429e      	cmp	r6, r3
 800634a:	6841      	ldr	r1, [r0, #4]
 800634c:	d94f      	bls.n	80063ee <_dtoa_r+0x316>
 800634e:	4628      	mov	r0, r5
 8006350:	f000 fcd8 	bl	8006d04 <_Balloc>
 8006354:	9008      	str	r0, [sp, #32]
 8006356:	2800      	cmp	r0, #0
 8006358:	d14d      	bne.n	80063f6 <_dtoa_r+0x31e>
 800635a:	4602      	mov	r2, r0
 800635c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <_dtoa_r+0x300>)
 8006362:	e6cd      	b.n	8006100 <_dtoa_r+0x28>
 8006364:	2301      	movs	r3, #1
 8006366:	e7de      	b.n	8006326 <_dtoa_r+0x24e>
 8006368:	2300      	movs	r3, #0
 800636a:	930b      	str	r3, [sp, #44]	; 0x2c
 800636c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800636e:	eb09 0b03 	add.w	fp, r9, r3
 8006372:	f10b 0301 	add.w	r3, fp, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	9302      	str	r3, [sp, #8]
 800637a:	bfb8      	it	lt
 800637c:	2301      	movlt	r3, #1
 800637e:	e7dd      	b.n	800633c <_dtoa_r+0x264>
 8006380:	2301      	movs	r3, #1
 8006382:	e7f2      	b.n	800636a <_dtoa_r+0x292>
 8006384:	2401      	movs	r4, #1
 8006386:	2300      	movs	r3, #0
 8006388:	940b      	str	r4, [sp, #44]	; 0x2c
 800638a:	9322      	str	r3, [sp, #136]	; 0x88
 800638c:	f04f 3bff 	mov.w	fp, #4294967295
 8006390:	2200      	movs	r2, #0
 8006392:	2312      	movs	r3, #18
 8006394:	f8cd b008 	str.w	fp, [sp, #8]
 8006398:	9223      	str	r2, [sp, #140]	; 0x8c
 800639a:	e7cf      	b.n	800633c <_dtoa_r+0x264>
 800639c:	f3af 8000 	nop.w
 80063a0:	636f4361 	.word	0x636f4361
 80063a4:	3fd287a7 	.word	0x3fd287a7
 80063a8:	8b60c8b3 	.word	0x8b60c8b3
 80063ac:	3fc68a28 	.word	0x3fc68a28
 80063b0:	509f79fb 	.word	0x509f79fb
 80063b4:	3fd34413 	.word	0x3fd34413
 80063b8:	080084c5 	.word	0x080084c5
 80063bc:	080084dc 	.word	0x080084dc
 80063c0:	7ff00000 	.word	0x7ff00000
 80063c4:	080084c1 	.word	0x080084c1
 80063c8:	080084b8 	.word	0x080084b8
 80063cc:	08008495 	.word	0x08008495
 80063d0:	3ff80000 	.word	0x3ff80000
 80063d4:	080085d8 	.word	0x080085d8
 80063d8:	0800853b 	.word	0x0800853b
 80063dc:	2301      	movs	r3, #1
 80063de:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e0:	e7d4      	b.n	800638c <_dtoa_r+0x2b4>
 80063e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80063e6:	465b      	mov	r3, fp
 80063e8:	f8cd b008 	str.w	fp, [sp, #8]
 80063ec:	e7a6      	b.n	800633c <_dtoa_r+0x264>
 80063ee:	3101      	adds	r1, #1
 80063f0:	6041      	str	r1, [r0, #4]
 80063f2:	0052      	lsls	r2, r2, #1
 80063f4:	e7a6      	b.n	8006344 <_dtoa_r+0x26c>
 80063f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063f8:	9a08      	ldr	r2, [sp, #32]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	9b02      	ldr	r3, [sp, #8]
 80063fe:	2b0e      	cmp	r3, #14
 8006400:	f200 80a8 	bhi.w	8006554 <_dtoa_r+0x47c>
 8006404:	2c00      	cmp	r4, #0
 8006406:	f000 80a5 	beq.w	8006554 <_dtoa_r+0x47c>
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	dd34      	ble.n	800647a <_dtoa_r+0x3a2>
 8006410:	4a9a      	ldr	r2, [pc, #616]	; (800667c <_dtoa_r+0x5a4>)
 8006412:	f009 030f 	and.w	r3, r9, #15
 8006416:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800641a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800641e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006422:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006426:	ea4f 1429 	mov.w	r4, r9, asr #4
 800642a:	d016      	beq.n	800645a <_dtoa_r+0x382>
 800642c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006430:	4b93      	ldr	r3, [pc, #588]	; (8006680 <_dtoa_r+0x5a8>)
 8006432:	2703      	movs	r7, #3
 8006434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006438:	f7fa f978 	bl	800072c <__aeabi_ddiv>
 800643c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006440:	f004 040f 	and.w	r4, r4, #15
 8006444:	4e8e      	ldr	r6, [pc, #568]	; (8006680 <_dtoa_r+0x5a8>)
 8006446:	b954      	cbnz	r4, 800645e <_dtoa_r+0x386>
 8006448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800644c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006450:	f7fa f96c 	bl	800072c <__aeabi_ddiv>
 8006454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006458:	e029      	b.n	80064ae <_dtoa_r+0x3d6>
 800645a:	2702      	movs	r7, #2
 800645c:	e7f2      	b.n	8006444 <_dtoa_r+0x36c>
 800645e:	07e1      	lsls	r1, r4, #31
 8006460:	d508      	bpl.n	8006474 <_dtoa_r+0x39c>
 8006462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006466:	e9d6 2300 	ldrd	r2, r3, [r6]
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006472:	3701      	adds	r7, #1
 8006474:	1064      	asrs	r4, r4, #1
 8006476:	3608      	adds	r6, #8
 8006478:	e7e5      	b.n	8006446 <_dtoa_r+0x36e>
 800647a:	f000 80a5 	beq.w	80065c8 <_dtoa_r+0x4f0>
 800647e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006482:	f1c9 0400 	rsb	r4, r9, #0
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <_dtoa_r+0x5a4>)
 8006488:	f004 020f 	and.w	r2, r4, #15
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fa f820 	bl	80004d8 <__aeabi_dmul>
 8006498:	2702      	movs	r7, #2
 800649a:	2300      	movs	r3, #0
 800649c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064a0:	4e77      	ldr	r6, [pc, #476]	; (8006680 <_dtoa_r+0x5a8>)
 80064a2:	1124      	asrs	r4, r4, #4
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	f040 8084 	bne.w	80065b2 <_dtoa_r+0x4da>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1d2      	bne.n	8006454 <_dtoa_r+0x37c>
 80064ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 808b 	beq.w	80065cc <_dtoa_r+0x4f4>
 80064b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064c2:	2200      	movs	r2, #0
 80064c4:	4b6f      	ldr	r3, [pc, #444]	; (8006684 <_dtoa_r+0x5ac>)
 80064c6:	f7fa fa79 	bl	80009bc <__aeabi_dcmplt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d07e      	beq.n	80065cc <_dtoa_r+0x4f4>
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d07b      	beq.n	80065cc <_dtoa_r+0x4f4>
 80064d4:	f1bb 0f00 	cmp.w	fp, #0
 80064d8:	dd38      	ble.n	800654c <_dtoa_r+0x474>
 80064da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064de:	2200      	movs	r2, #0
 80064e0:	4b69      	ldr	r3, [pc, #420]	; (8006688 <_dtoa_r+0x5b0>)
 80064e2:	f7f9 fff9 	bl	80004d8 <__aeabi_dmul>
 80064e6:	465c      	mov	r4, fp
 80064e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80064f0:	3701      	adds	r7, #1
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7f9 ff86 	bl	8000404 <__aeabi_i2d>
 80064f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fc:	f7f9 ffec 	bl	80004d8 <__aeabi_dmul>
 8006500:	2200      	movs	r2, #0
 8006502:	4b62      	ldr	r3, [pc, #392]	; (800668c <_dtoa_r+0x5b4>)
 8006504:	f7f9 fe32 	bl	800016c <__adddf3>
 8006508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800650c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006510:	9611      	str	r6, [sp, #68]	; 0x44
 8006512:	2c00      	cmp	r4, #0
 8006514:	d15d      	bne.n	80065d2 <_dtoa_r+0x4fa>
 8006516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800651a:	2200      	movs	r2, #0
 800651c:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <_dtoa_r+0x5b8>)
 800651e:	f7f9 fe23 	bl	8000168 <__aeabi_dsub>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800652a:	4633      	mov	r3, r6
 800652c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800652e:	f7fa fa63 	bl	80009f8 <__aeabi_dcmpgt>
 8006532:	2800      	cmp	r0, #0
 8006534:	f040 829e 	bne.w	8006a74 <_dtoa_r+0x99c>
 8006538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800653c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800653e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006542:	f7fa fa3b 	bl	80009bc <__aeabi_dcmplt>
 8006546:	2800      	cmp	r0, #0
 8006548:	f040 8292 	bne.w	8006a70 <_dtoa_r+0x998>
 800654c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006556:	2b00      	cmp	r3, #0
 8006558:	f2c0 8153 	blt.w	8006802 <_dtoa_r+0x72a>
 800655c:	f1b9 0f0e 	cmp.w	r9, #14
 8006560:	f300 814f 	bgt.w	8006802 <_dtoa_r+0x72a>
 8006564:	4b45      	ldr	r3, [pc, #276]	; (800667c <_dtoa_r+0x5a4>)
 8006566:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800656a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800656e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006574:	2b00      	cmp	r3, #0
 8006576:	f280 80db 	bge.w	8006730 <_dtoa_r+0x658>
 800657a:	9b02      	ldr	r3, [sp, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f300 80d7 	bgt.w	8006730 <_dtoa_r+0x658>
 8006582:	f040 8274 	bne.w	8006a6e <_dtoa_r+0x996>
 8006586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800658a:	2200      	movs	r2, #0
 800658c:	4b40      	ldr	r3, [pc, #256]	; (8006690 <_dtoa_r+0x5b8>)
 800658e:	f7f9 ffa3 	bl	80004d8 <__aeabi_dmul>
 8006592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006596:	f7fa fa25 	bl	80009e4 <__aeabi_dcmpge>
 800659a:	9c02      	ldr	r4, [sp, #8]
 800659c:	4626      	mov	r6, r4
 800659e:	2800      	cmp	r0, #0
 80065a0:	f040 824a 	bne.w	8006a38 <_dtoa_r+0x960>
 80065a4:	2331      	movs	r3, #49	; 0x31
 80065a6:	9f08      	ldr	r7, [sp, #32]
 80065a8:	f109 0901 	add.w	r9, r9, #1
 80065ac:	f807 3b01 	strb.w	r3, [r7], #1
 80065b0:	e246      	b.n	8006a40 <_dtoa_r+0x968>
 80065b2:	07e2      	lsls	r2, r4, #31
 80065b4:	d505      	bpl.n	80065c2 <_dtoa_r+0x4ea>
 80065b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ba:	f7f9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80065be:	2301      	movs	r3, #1
 80065c0:	3701      	adds	r7, #1
 80065c2:	1064      	asrs	r4, r4, #1
 80065c4:	3608      	adds	r6, #8
 80065c6:	e76d      	b.n	80064a4 <_dtoa_r+0x3cc>
 80065c8:	2702      	movs	r7, #2
 80065ca:	e770      	b.n	80064ae <_dtoa_r+0x3d6>
 80065cc:	46c8      	mov	r8, r9
 80065ce:	9c02      	ldr	r4, [sp, #8]
 80065d0:	e78f      	b.n	80064f2 <_dtoa_r+0x41a>
 80065d2:	9908      	ldr	r1, [sp, #32]
 80065d4:	4b29      	ldr	r3, [pc, #164]	; (800667c <_dtoa_r+0x5a4>)
 80065d6:	4421      	add	r1, r4
 80065d8:	9112      	str	r1, [sp, #72]	; 0x48
 80065da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065e8:	2900      	cmp	r1, #0
 80065ea:	d055      	beq.n	8006698 <_dtoa_r+0x5c0>
 80065ec:	2000      	movs	r0, #0
 80065ee:	4929      	ldr	r1, [pc, #164]	; (8006694 <_dtoa_r+0x5bc>)
 80065f0:	f7fa f89c 	bl	800072c <__aeabi_ddiv>
 80065f4:	463b      	mov	r3, r7
 80065f6:	4632      	mov	r2, r6
 80065f8:	f7f9 fdb6 	bl	8000168 <__aeabi_dsub>
 80065fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006600:	9f08      	ldr	r7, [sp, #32]
 8006602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006606:	f7fa fa17 	bl	8000a38 <__aeabi_d2iz>
 800660a:	4604      	mov	r4, r0
 800660c:	f7f9 fefa 	bl	8000404 <__aeabi_i2d>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006618:	f7f9 fda6 	bl	8000168 <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	3430      	adds	r4, #48	; 0x30
 8006622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800662a:	f807 4b01 	strb.w	r4, [r7], #1
 800662e:	f7fa f9c5 	bl	80009bc <__aeabi_dcmplt>
 8006632:	2800      	cmp	r0, #0
 8006634:	d174      	bne.n	8006720 <_dtoa_r+0x648>
 8006636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663a:	2000      	movs	r0, #0
 800663c:	4911      	ldr	r1, [pc, #68]	; (8006684 <_dtoa_r+0x5ac>)
 800663e:	f7f9 fd93 	bl	8000168 <__aeabi_dsub>
 8006642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006646:	f7fa f9b9 	bl	80009bc <__aeabi_dcmplt>
 800664a:	2800      	cmp	r0, #0
 800664c:	f040 80b6 	bne.w	80067bc <_dtoa_r+0x6e4>
 8006650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006652:	429f      	cmp	r7, r3
 8006654:	f43f af7a 	beq.w	800654c <_dtoa_r+0x474>
 8006658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800665c:	2200      	movs	r2, #0
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <_dtoa_r+0x5b0>)
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	2200      	movs	r2, #0
 8006666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800666a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <_dtoa_r+0x5b0>)
 8006670:	f7f9 ff32 	bl	80004d8 <__aeabi_dmul>
 8006674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006678:	e7c3      	b.n	8006602 <_dtoa_r+0x52a>
 800667a:	bf00      	nop
 800667c:	080085d8 	.word	0x080085d8
 8006680:	080085b0 	.word	0x080085b0
 8006684:	3ff00000 	.word	0x3ff00000
 8006688:	40240000 	.word	0x40240000
 800668c:	401c0000 	.word	0x401c0000
 8006690:	40140000 	.word	0x40140000
 8006694:	3fe00000 	.word	0x3fe00000
 8006698:	4630      	mov	r0, r6
 800669a:	4639      	mov	r1, r7
 800669c:	f7f9 ff1c 	bl	80004d8 <__aeabi_dmul>
 80066a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066a6:	9c08      	ldr	r4, [sp, #32]
 80066a8:	9314      	str	r3, [sp, #80]	; 0x50
 80066aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ae:	f7fa f9c3 	bl	8000a38 <__aeabi_d2iz>
 80066b2:	9015      	str	r0, [sp, #84]	; 0x54
 80066b4:	f7f9 fea6 	bl	8000404 <__aeabi_i2d>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c0:	f7f9 fd52 	bl	8000168 <__aeabi_dsub>
 80066c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066c6:	4606      	mov	r6, r0
 80066c8:	3330      	adds	r3, #48	; 0x30
 80066ca:	f804 3b01 	strb.w	r3, [r4], #1
 80066ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d0:	460f      	mov	r7, r1
 80066d2:	429c      	cmp	r4, r3
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	d124      	bne.n	8006724 <_dtoa_r+0x64c>
 80066da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066de:	4bb3      	ldr	r3, [pc, #716]	; (80069ac <_dtoa_r+0x8d4>)
 80066e0:	f7f9 fd44 	bl	800016c <__adddf3>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7fa f984 	bl	80009f8 <__aeabi_dcmpgt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d162      	bne.n	80067ba <_dtoa_r+0x6e2>
 80066f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066f8:	2000      	movs	r0, #0
 80066fa:	49ac      	ldr	r1, [pc, #688]	; (80069ac <_dtoa_r+0x8d4>)
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4630      	mov	r0, r6
 8006706:	4639      	mov	r1, r7
 8006708:	f7fa f958 	bl	80009bc <__aeabi_dcmplt>
 800670c:	2800      	cmp	r0, #0
 800670e:	f43f af1d 	beq.w	800654c <_dtoa_r+0x474>
 8006712:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006714:	1e7b      	subs	r3, r7, #1
 8006716:	9314      	str	r3, [sp, #80]	; 0x50
 8006718:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d0f8      	beq.n	8006712 <_dtoa_r+0x63a>
 8006720:	46c1      	mov	r9, r8
 8006722:	e03a      	b.n	800679a <_dtoa_r+0x6c2>
 8006724:	4ba2      	ldr	r3, [pc, #648]	; (80069b0 <_dtoa_r+0x8d8>)
 8006726:	f7f9 fed7 	bl	80004d8 <__aeabi_dmul>
 800672a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800672e:	e7bc      	b.n	80066aa <_dtoa_r+0x5d2>
 8006730:	9f08      	ldr	r7, [sp, #32]
 8006732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800673a:	f7f9 fff7 	bl	800072c <__aeabi_ddiv>
 800673e:	f7fa f97b 	bl	8000a38 <__aeabi_d2iz>
 8006742:	4604      	mov	r4, r0
 8006744:	f7f9 fe5e 	bl	8000404 <__aeabi_i2d>
 8006748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800674c:	f7f9 fec4 	bl	80004d8 <__aeabi_dmul>
 8006750:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006754:	460b      	mov	r3, r1
 8006756:	4602      	mov	r2, r0
 8006758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800675c:	f7f9 fd04 	bl	8000168 <__aeabi_dsub>
 8006760:	f807 6b01 	strb.w	r6, [r7], #1
 8006764:	9e08      	ldr	r6, [sp, #32]
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	1bbe      	subs	r6, r7, r6
 800676a:	42b3      	cmp	r3, r6
 800676c:	d13a      	bne.n	80067e4 <_dtoa_r+0x70c>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	f7f9 fcfb 	bl	800016c <__adddf3>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800677e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006782:	f7fa f939 	bl	80009f8 <__aeabi_dcmpgt>
 8006786:	bb58      	cbnz	r0, 80067e0 <_dtoa_r+0x708>
 8006788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800678c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006790:	f7fa f90a 	bl	80009a8 <__aeabi_dcmpeq>
 8006794:	b108      	cbz	r0, 800679a <_dtoa_r+0x6c2>
 8006796:	07e1      	lsls	r1, r4, #31
 8006798:	d422      	bmi.n	80067e0 <_dtoa_r+0x708>
 800679a:	4628      	mov	r0, r5
 800679c:	4651      	mov	r1, sl
 800679e:	f000 faf1 	bl	8006d84 <_Bfree>
 80067a2:	2300      	movs	r3, #0
 80067a4:	703b      	strb	r3, [r7, #0]
 80067a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067a8:	f109 0001 	add.w	r0, r9, #1
 80067ac:	6018      	str	r0, [r3, #0]
 80067ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f43f acdf 	beq.w	8006174 <_dtoa_r+0x9c>
 80067b6:	601f      	str	r7, [r3, #0]
 80067b8:	e4dc      	b.n	8006174 <_dtoa_r+0x9c>
 80067ba:	4627      	mov	r7, r4
 80067bc:	463b      	mov	r3, r7
 80067be:	461f      	mov	r7, r3
 80067c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067c4:	2a39      	cmp	r2, #57	; 0x39
 80067c6:	d107      	bne.n	80067d8 <_dtoa_r+0x700>
 80067c8:	9a08      	ldr	r2, [sp, #32]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1f7      	bne.n	80067be <_dtoa_r+0x6e6>
 80067ce:	2230      	movs	r2, #48	; 0x30
 80067d0:	9908      	ldr	r1, [sp, #32]
 80067d2:	f108 0801 	add.w	r8, r8, #1
 80067d6:	700a      	strb	r2, [r1, #0]
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	3201      	adds	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e79f      	b.n	8006720 <_dtoa_r+0x648>
 80067e0:	46c8      	mov	r8, r9
 80067e2:	e7eb      	b.n	80067bc <_dtoa_r+0x6e4>
 80067e4:	2200      	movs	r2, #0
 80067e6:	4b72      	ldr	r3, [pc, #456]	; (80069b0 <_dtoa_r+0x8d8>)
 80067e8:	f7f9 fe76 	bl	80004d8 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d098      	beq.n	8006732 <_dtoa_r+0x65a>
 8006800:	e7cb      	b.n	800679a <_dtoa_r+0x6c2>
 8006802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006804:	2a00      	cmp	r2, #0
 8006806:	f000 80cd 	beq.w	80069a4 <_dtoa_r+0x8cc>
 800680a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800680c:	2a01      	cmp	r2, #1
 800680e:	f300 80af 	bgt.w	8006970 <_dtoa_r+0x898>
 8006812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006814:	2a00      	cmp	r2, #0
 8006816:	f000 80a7 	beq.w	8006968 <_dtoa_r+0x890>
 800681a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800681e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006820:	9f06      	ldr	r7, [sp, #24]
 8006822:	9a06      	ldr	r2, [sp, #24]
 8006824:	2101      	movs	r1, #1
 8006826:	441a      	add	r2, r3
 8006828:	9206      	str	r2, [sp, #24]
 800682a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800682c:	4628      	mov	r0, r5
 800682e:	441a      	add	r2, r3
 8006830:	9209      	str	r2, [sp, #36]	; 0x24
 8006832:	f000 fb61 	bl	8006ef8 <__i2b>
 8006836:	4606      	mov	r6, r0
 8006838:	2f00      	cmp	r7, #0
 800683a:	dd0c      	ble.n	8006856 <_dtoa_r+0x77e>
 800683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd09      	ble.n	8006856 <_dtoa_r+0x77e>
 8006842:	42bb      	cmp	r3, r7
 8006844:	bfa8      	it	ge
 8006846:	463b      	movge	r3, r7
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	1aff      	subs	r7, r7, r3
 800684c:	1ad2      	subs	r2, r2, r3
 800684e:	9206      	str	r2, [sp, #24]
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	9309      	str	r3, [sp, #36]	; 0x24
 8006856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006858:	b1f3      	cbz	r3, 8006898 <_dtoa_r+0x7c0>
 800685a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a9 	beq.w	80069b4 <_dtoa_r+0x8dc>
 8006862:	2c00      	cmp	r4, #0
 8006864:	dd10      	ble.n	8006888 <_dtoa_r+0x7b0>
 8006866:	4631      	mov	r1, r6
 8006868:	4622      	mov	r2, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 fbfe 	bl	800706c <__pow5mult>
 8006870:	4652      	mov	r2, sl
 8006872:	4601      	mov	r1, r0
 8006874:	4606      	mov	r6, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fb54 	bl	8006f24 <__multiply>
 800687c:	4680      	mov	r8, r0
 800687e:	4651      	mov	r1, sl
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fa7f 	bl	8006d84 <_Bfree>
 8006886:	46c2      	mov	sl, r8
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	1b1a      	subs	r2, r3, r4
 800688c:	d004      	beq.n	8006898 <_dtoa_r+0x7c0>
 800688e:	4651      	mov	r1, sl
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fbeb 	bl	800706c <__pow5mult>
 8006896:	4682      	mov	sl, r0
 8006898:	2101      	movs	r1, #1
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fb2c 	bl	8006ef8 <__i2b>
 80068a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a2:	4604      	mov	r4, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f340 8087 	ble.w	80069b8 <_dtoa_r+0x8e0>
 80068aa:	461a      	mov	r2, r3
 80068ac:	4601      	mov	r1, r0
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fbdc 	bl	800706c <__pow5mult>
 80068b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b6:	4604      	mov	r4, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f340 8080 	ble.w	80069be <_dtoa_r+0x8e6>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068c8:	6918      	ldr	r0, [r3, #16]
 80068ca:	f000 fac7 	bl	8006e5c <__hi0bits>
 80068ce:	f1c0 0020 	rsb	r0, r0, #32
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	4418      	add	r0, r3
 80068d6:	f010 001f 	ands.w	r0, r0, #31
 80068da:	f000 8092 	beq.w	8006a02 <_dtoa_r+0x92a>
 80068de:	f1c0 0320 	rsb	r3, r0, #32
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	f340 808a 	ble.w	80069fc <_dtoa_r+0x924>
 80068e8:	f1c0 001c 	rsb	r0, r0, #28
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	4407      	add	r7, r0
 80068f0:	4403      	add	r3, r0
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	4403      	add	r3, r0
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd05      	ble.n	800690c <_dtoa_r+0x834>
 8006900:	4651      	mov	r1, sl
 8006902:	461a      	mov	r2, r3
 8006904:	4628      	mov	r0, r5
 8006906:	f000 fc0b 	bl	8007120 <__lshift>
 800690a:	4682      	mov	sl, r0
 800690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	dd05      	ble.n	800691e <_dtoa_r+0x846>
 8006912:	4621      	mov	r1, r4
 8006914:	461a      	mov	r2, r3
 8006916:	4628      	mov	r0, r5
 8006918:	f000 fc02 	bl	8007120 <__lshift>
 800691c:	4604      	mov	r4, r0
 800691e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d070      	beq.n	8006a06 <_dtoa_r+0x92e>
 8006924:	4621      	mov	r1, r4
 8006926:	4650      	mov	r0, sl
 8006928:	f000 fc66 	bl	80071f8 <__mcmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	da6a      	bge.n	8006a06 <_dtoa_r+0x92e>
 8006930:	2300      	movs	r3, #0
 8006932:	4651      	mov	r1, sl
 8006934:	220a      	movs	r2, #10
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fa46 	bl	8006dc8 <__multadd>
 800693c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693e:	4682      	mov	sl, r0
 8006940:	f109 39ff 	add.w	r9, r9, #4294967295
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8193 	beq.w	8006c70 <_dtoa_r+0xb98>
 800694a:	4631      	mov	r1, r6
 800694c:	2300      	movs	r3, #0
 800694e:	220a      	movs	r2, #10
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fa39 	bl	8006dc8 <__multadd>
 8006956:	f1bb 0f00 	cmp.w	fp, #0
 800695a:	4606      	mov	r6, r0
 800695c:	f300 8093 	bgt.w	8006a86 <_dtoa_r+0x9ae>
 8006960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006962:	2b02      	cmp	r3, #2
 8006964:	dc57      	bgt.n	8006a16 <_dtoa_r+0x93e>
 8006966:	e08e      	b.n	8006a86 <_dtoa_r+0x9ae>
 8006968:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800696a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800696e:	e756      	b.n	800681e <_dtoa_r+0x746>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	1e5c      	subs	r4, r3, #1
 8006974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006976:	42a3      	cmp	r3, r4
 8006978:	bfb7      	itett	lt
 800697a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800697c:	1b1c      	subge	r4, r3, r4
 800697e:	1ae2      	sublt	r2, r4, r3
 8006980:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006982:	bfbe      	ittt	lt
 8006984:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006986:	189b      	addlt	r3, r3, r2
 8006988:	930e      	strlt	r3, [sp, #56]	; 0x38
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	bfb8      	it	lt
 800698e:	2400      	movlt	r4, #0
 8006990:	2b00      	cmp	r3, #0
 8006992:	bfbb      	ittet	lt
 8006994:	9b06      	ldrlt	r3, [sp, #24]
 8006996:	9a02      	ldrlt	r2, [sp, #8]
 8006998:	9f06      	ldrge	r7, [sp, #24]
 800699a:	1a9f      	sublt	r7, r3, r2
 800699c:	bfac      	ite	ge
 800699e:	9b02      	ldrge	r3, [sp, #8]
 80069a0:	2300      	movlt	r3, #0
 80069a2:	e73e      	b.n	8006822 <_dtoa_r+0x74a>
 80069a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069a6:	9f06      	ldr	r7, [sp, #24]
 80069a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069aa:	e745      	b.n	8006838 <_dtoa_r+0x760>
 80069ac:	3fe00000 	.word	0x3fe00000
 80069b0:	40240000 	.word	0x40240000
 80069b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b6:	e76a      	b.n	800688e <_dtoa_r+0x7b6>
 80069b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	dc19      	bgt.n	80069f2 <_dtoa_r+0x91a>
 80069be:	9b04      	ldr	r3, [sp, #16]
 80069c0:	b9bb      	cbnz	r3, 80069f2 <_dtoa_r+0x91a>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c8:	b99b      	cbnz	r3, 80069f2 <_dtoa_r+0x91a>
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	0d1b      	lsrs	r3, r3, #20
 80069d2:	051b      	lsls	r3, r3, #20
 80069d4:	b183      	cbz	r3, 80069f8 <_dtoa_r+0x920>
 80069d6:	f04f 0801 	mov.w	r8, #1
 80069da:	9b06      	ldr	r3, [sp, #24]
 80069dc:	3301      	adds	r3, #1
 80069de:	9306      	str	r3, [sp, #24]
 80069e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	9309      	str	r3, [sp, #36]	; 0x24
 80069e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f47f af6a 	bne.w	80068c2 <_dtoa_r+0x7ea>
 80069ee:	2001      	movs	r0, #1
 80069f0:	e76f      	b.n	80068d2 <_dtoa_r+0x7fa>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	e7f6      	b.n	80069e6 <_dtoa_r+0x90e>
 80069f8:	4698      	mov	r8, r3
 80069fa:	e7f4      	b.n	80069e6 <_dtoa_r+0x90e>
 80069fc:	f43f af7d 	beq.w	80068fa <_dtoa_r+0x822>
 8006a00:	4618      	mov	r0, r3
 8006a02:	301c      	adds	r0, #28
 8006a04:	e772      	b.n	80068ec <_dtoa_r+0x814>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc36      	bgt.n	8006a7a <_dtoa_r+0x9a2>
 8006a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	dd33      	ble.n	8006a7a <_dtoa_r+0x9a2>
 8006a12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a16:	f1bb 0f00 	cmp.w	fp, #0
 8006a1a:	d10d      	bne.n	8006a38 <_dtoa_r+0x960>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	465b      	mov	r3, fp
 8006a20:	2205      	movs	r2, #5
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f9d0 	bl	8006dc8 <__multadd>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f000 fbe3 	bl	80071f8 <__mcmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f73f adb6 	bgt.w	80065a4 <_dtoa_r+0x4cc>
 8006a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a3a:	9f08      	ldr	r7, [sp, #32]
 8006a3c:	ea6f 0903 	mvn.w	r9, r3
 8006a40:	f04f 0800 	mov.w	r8, #0
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f99c 	bl	8006d84 <_Bfree>
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	f43f aea4 	beq.w	800679a <_dtoa_r+0x6c2>
 8006a52:	f1b8 0f00 	cmp.w	r8, #0
 8006a56:	d005      	beq.n	8006a64 <_dtoa_r+0x98c>
 8006a58:	45b0      	cmp	r8, r6
 8006a5a:	d003      	beq.n	8006a64 <_dtoa_r+0x98c>
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f990 	bl	8006d84 <_Bfree>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f98c 	bl	8006d84 <_Bfree>
 8006a6c:	e695      	b.n	800679a <_dtoa_r+0x6c2>
 8006a6e:	2400      	movs	r4, #0
 8006a70:	4626      	mov	r6, r4
 8006a72:	e7e1      	b.n	8006a38 <_dtoa_r+0x960>
 8006a74:	46c1      	mov	r9, r8
 8006a76:	4626      	mov	r6, r4
 8006a78:	e594      	b.n	80065a4 <_dtoa_r+0x4cc>
 8006a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80fc 	beq.w	8006c7e <_dtoa_r+0xba6>
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	dd05      	ble.n	8006a96 <_dtoa_r+0x9be>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	463a      	mov	r2, r7
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fb46 	bl	8007120 <__lshift>
 8006a94:	4606      	mov	r6, r0
 8006a96:	f1b8 0f00 	cmp.w	r8, #0
 8006a9a:	d05c      	beq.n	8006b56 <_dtoa_r+0xa7e>
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	6871      	ldr	r1, [r6, #4]
 8006aa0:	f000 f930 	bl	8006d04 <_Balloc>
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	b928      	cbnz	r0, 8006ab4 <_dtoa_r+0x9dc>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aae:	4b7e      	ldr	r3, [pc, #504]	; (8006ca8 <_dtoa_r+0xbd0>)
 8006ab0:	f7ff bb26 	b.w	8006100 <_dtoa_r+0x28>
 8006ab4:	6932      	ldr	r2, [r6, #16]
 8006ab6:	f106 010c 	add.w	r1, r6, #12
 8006aba:	3202      	adds	r2, #2
 8006abc:	0092      	lsls	r2, r2, #2
 8006abe:	300c      	adds	r0, #12
 8006ac0:	f000 f912 	bl	8006ce8 <memcpy>
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 fb29 	bl	8007120 <__lshift>
 8006ace:	46b0      	mov	r8, r6
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	9302      	str	r3, [sp, #8]
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	445b      	add	r3, fp
 8006adc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ade:	9b04      	ldr	r3, [sp, #16]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4650      	mov	r0, sl
 8006aec:	f103 3bff 	add.w	fp, r3, #4294967295
 8006af0:	f7ff fa62 	bl	8005fb8 <quorem>
 8006af4:	4603      	mov	r3, r0
 8006af6:	4641      	mov	r1, r8
 8006af8:	3330      	adds	r3, #48	; 0x30
 8006afa:	9004      	str	r0, [sp, #16]
 8006afc:	4650      	mov	r0, sl
 8006afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b00:	f000 fb7a 	bl	80071f8 <__mcmp>
 8006b04:	4632      	mov	r2, r6
 8006b06:	9006      	str	r0, [sp, #24]
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fb90 	bl	8007230 <__mdiff>
 8006b10:	68c2      	ldr	r2, [r0, #12]
 8006b12:	4607      	mov	r7, r0
 8006b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b16:	bb02      	cbnz	r2, 8006b5a <_dtoa_r+0xa82>
 8006b18:	4601      	mov	r1, r0
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	f000 fb6c 	bl	80071f8 <__mcmp>
 8006b20:	4602      	mov	r2, r0
 8006b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b24:	4639      	mov	r1, r7
 8006b26:	4628      	mov	r0, r5
 8006b28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b2c:	f000 f92a 	bl	8006d84 <_Bfree>
 8006b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b34:	9f02      	ldr	r7, [sp, #8]
 8006b36:	ea43 0102 	orr.w	r1, r3, r2
 8006b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b40:	d10d      	bne.n	8006b5e <_dtoa_r+0xa86>
 8006b42:	2b39      	cmp	r3, #57	; 0x39
 8006b44:	d027      	beq.n	8006b96 <_dtoa_r+0xabe>
 8006b46:	9a06      	ldr	r2, [sp, #24]
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	dd01      	ble.n	8006b50 <_dtoa_r+0xa78>
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	3331      	adds	r3, #49	; 0x31
 8006b50:	f88b 3000 	strb.w	r3, [fp]
 8006b54:	e776      	b.n	8006a44 <_dtoa_r+0x96c>
 8006b56:	4630      	mov	r0, r6
 8006b58:	e7b9      	b.n	8006ace <_dtoa_r+0x9f6>
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	e7e2      	b.n	8006b24 <_dtoa_r+0xa4c>
 8006b5e:	9906      	ldr	r1, [sp, #24]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	db04      	blt.n	8006b6e <_dtoa_r+0xa96>
 8006b64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006b66:	4301      	orrs	r1, r0
 8006b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b6a:	4301      	orrs	r1, r0
 8006b6c:	d120      	bne.n	8006bb0 <_dtoa_r+0xad8>
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	ddee      	ble.n	8006b50 <_dtoa_r+0xa78>
 8006b72:	4651      	mov	r1, sl
 8006b74:	2201      	movs	r2, #1
 8006b76:	4628      	mov	r0, r5
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	f000 fad1 	bl	8007120 <__lshift>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4682      	mov	sl, r0
 8006b82:	f000 fb39 	bl	80071f8 <__mcmp>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	dc02      	bgt.n	8006b92 <_dtoa_r+0xaba>
 8006b8c:	d1e0      	bne.n	8006b50 <_dtoa_r+0xa78>
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d5de      	bpl.n	8006b50 <_dtoa_r+0xa78>
 8006b92:	2b39      	cmp	r3, #57	; 0x39
 8006b94:	d1da      	bne.n	8006b4c <_dtoa_r+0xa74>
 8006b96:	2339      	movs	r3, #57	; 0x39
 8006b98:	f88b 3000 	strb.w	r3, [fp]
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2a39      	cmp	r2, #57	; 0x39
 8006ba8:	d050      	beq.n	8006c4c <_dtoa_r+0xb74>
 8006baa:	3201      	adds	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e749      	b.n	8006a44 <_dtoa_r+0x96c>
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	dd03      	ble.n	8006bbc <_dtoa_r+0xae4>
 8006bb4:	2b39      	cmp	r3, #57	; 0x39
 8006bb6:	d0ee      	beq.n	8006b96 <_dtoa_r+0xabe>
 8006bb8:	3301      	adds	r3, #1
 8006bba:	e7c9      	b.n	8006b50 <_dtoa_r+0xa78>
 8006bbc:	9a02      	ldr	r2, [sp, #8]
 8006bbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bc4:	428a      	cmp	r2, r1
 8006bc6:	d02a      	beq.n	8006c1e <_dtoa_r+0xb46>
 8006bc8:	4651      	mov	r1, sl
 8006bca:	2300      	movs	r3, #0
 8006bcc:	220a      	movs	r2, #10
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f8fa 	bl	8006dc8 <__multadd>
 8006bd4:	45b0      	cmp	r8, r6
 8006bd6:	4682      	mov	sl, r0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	f04f 020a 	mov.w	r2, #10
 8006be0:	4641      	mov	r1, r8
 8006be2:	4628      	mov	r0, r5
 8006be4:	d107      	bne.n	8006bf6 <_dtoa_r+0xb1e>
 8006be6:	f000 f8ef 	bl	8006dc8 <__multadd>
 8006bea:	4680      	mov	r8, r0
 8006bec:	4606      	mov	r6, r0
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	e777      	b.n	8006ae6 <_dtoa_r+0xa0e>
 8006bf6:	f000 f8e7 	bl	8006dc8 <__multadd>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	220a      	movs	r2, #10
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f8e0 	bl	8006dc8 <__multadd>
 8006c08:	4606      	mov	r6, r0
 8006c0a:	e7f0      	b.n	8006bee <_dtoa_r+0xb16>
 8006c0c:	f1bb 0f00 	cmp.w	fp, #0
 8006c10:	bfcc      	ite	gt
 8006c12:	465f      	movgt	r7, fp
 8006c14:	2701      	movle	r7, #1
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	9a08      	ldr	r2, [sp, #32]
 8006c1c:	4417      	add	r7, r2
 8006c1e:	4651      	mov	r1, sl
 8006c20:	2201      	movs	r2, #1
 8006c22:	4628      	mov	r0, r5
 8006c24:	9302      	str	r3, [sp, #8]
 8006c26:	f000 fa7b 	bl	8007120 <__lshift>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	f000 fae3 	bl	80071f8 <__mcmp>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	dcb2      	bgt.n	8006b9c <_dtoa_r+0xac4>
 8006c36:	d102      	bne.n	8006c3e <_dtoa_r+0xb66>
 8006c38:	9b02      	ldr	r3, [sp, #8]
 8006c3a:	07db      	lsls	r3, r3, #31
 8006c3c:	d4ae      	bmi.n	8006b9c <_dtoa_r+0xac4>
 8006c3e:	463b      	mov	r3, r7
 8006c40:	461f      	mov	r7, r3
 8006c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c46:	2a30      	cmp	r2, #48	; 0x30
 8006c48:	d0fa      	beq.n	8006c40 <_dtoa_r+0xb68>
 8006c4a:	e6fb      	b.n	8006a44 <_dtoa_r+0x96c>
 8006c4c:	9a08      	ldr	r2, [sp, #32]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d1a5      	bne.n	8006b9e <_dtoa_r+0xac6>
 8006c52:	2331      	movs	r3, #49	; 0x31
 8006c54:	f109 0901 	add.w	r9, r9, #1
 8006c58:	7013      	strb	r3, [r2, #0]
 8006c5a:	e6f3      	b.n	8006a44 <_dtoa_r+0x96c>
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <_dtoa_r+0xbd4>)
 8006c5e:	f7ff baa7 	b.w	80061b0 <_dtoa_r+0xd8>
 8006c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f aa80 	bne.w	800616a <_dtoa_r+0x92>
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <_dtoa_r+0xbd8>)
 8006c6c:	f7ff baa0 	b.w	80061b0 <_dtoa_r+0xd8>
 8006c70:	f1bb 0f00 	cmp.w	fp, #0
 8006c74:	dc03      	bgt.n	8006c7e <_dtoa_r+0xba6>
 8006c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f73f aecc 	bgt.w	8006a16 <_dtoa_r+0x93e>
 8006c7e:	9f08      	ldr	r7, [sp, #32]
 8006c80:	4621      	mov	r1, r4
 8006c82:	4650      	mov	r0, sl
 8006c84:	f7ff f998 	bl	8005fb8 <quorem>
 8006c88:	9a08      	ldr	r2, [sp, #32]
 8006c8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c8e:	f807 3b01 	strb.w	r3, [r7], #1
 8006c92:	1aba      	subs	r2, r7, r2
 8006c94:	4593      	cmp	fp, r2
 8006c96:	ddb9      	ble.n	8006c0c <_dtoa_r+0xb34>
 8006c98:	4651      	mov	r1, sl
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f892 	bl	8006dc8 <__multadd>
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	e7eb      	b.n	8006c80 <_dtoa_r+0xba8>
 8006ca8:	0800853b 	.word	0x0800853b
 8006cac:	08008494 	.word	0x08008494
 8006cb0:	080084b8 	.word	0x080084b8

08006cb4 <_localeconv_r>:
 8006cb4:	4800      	ldr	r0, [pc, #0]	; (8006cb8 <_localeconv_r+0x4>)
 8006cb6:	4770      	bx	lr
 8006cb8:	20000160 	.word	0x20000160

08006cbc <malloc>:
 8006cbc:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <malloc+0xc>)
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	f000 bbfb 	b.w	80074bc <_malloc_r>
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <memchr>:
 8006ccc:	4603      	mov	r3, r0
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	b2c9      	uxtb	r1, r1
 8006cd2:	4402      	add	r2, r0
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	d101      	bne.n	8006cde <memchr+0x12>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e003      	b.n	8006ce6 <memchr+0x1a>
 8006cde:	7804      	ldrb	r4, [r0, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	428c      	cmp	r4, r1
 8006ce4:	d1f6      	bne.n	8006cd4 <memchr+0x8>
 8006ce6:	bd10      	pop	{r4, pc}

08006ce8 <memcpy>:
 8006ce8:	440a      	add	r2, r1
 8006cea:	4291      	cmp	r1, r2
 8006cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf0:	d100      	bne.n	8006cf4 <memcpy+0xc>
 8006cf2:	4770      	bx	lr
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d00:	d1f9      	bne.n	8006cf6 <memcpy+0xe>
 8006d02:	bd10      	pop	{r4, pc}

08006d04 <_Balloc>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	b976      	cbnz	r6, 8006d2c <_Balloc+0x28>
 8006d0e:	2010      	movs	r0, #16
 8006d10:	f7ff ffd4 	bl	8006cbc <malloc>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6260      	str	r0, [r4, #36]	; 0x24
 8006d18:	b920      	cbnz	r0, 8006d24 <_Balloc+0x20>
 8006d1a:	2166      	movs	r1, #102	; 0x66
 8006d1c:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <_Balloc+0x78>)
 8006d1e:	4818      	ldr	r0, [pc, #96]	; (8006d80 <_Balloc+0x7c>)
 8006d20:	f000 fd92 	bl	8007848 <__assert_func>
 8006d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d28:	6006      	str	r6, [r0, #0]
 8006d2a:	60c6      	str	r6, [r0, #12]
 8006d2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d2e:	68f3      	ldr	r3, [r6, #12]
 8006d30:	b183      	cbz	r3, 8006d54 <_Balloc+0x50>
 8006d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d3a:	b9b8      	cbnz	r0, 8006d6c <_Balloc+0x68>
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d42:	1d72      	adds	r2, r6, #5
 8006d44:	4620      	mov	r0, r4
 8006d46:	0092      	lsls	r2, r2, #2
 8006d48:	f000 fb5e 	bl	8007408 <_calloc_r>
 8006d4c:	b160      	cbz	r0, 8006d68 <_Balloc+0x64>
 8006d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d52:	e00e      	b.n	8006d72 <_Balloc+0x6e>
 8006d54:	2221      	movs	r2, #33	; 0x21
 8006d56:	2104      	movs	r1, #4
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fb55 	bl	8007408 <_calloc_r>
 8006d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d60:	60f0      	str	r0, [r6, #12]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e4      	bne.n	8006d32 <_Balloc+0x2e>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	6802      	ldr	r2, [r0, #0]
 8006d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d72:	2300      	movs	r3, #0
 8006d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d78:	e7f7      	b.n	8006d6a <_Balloc+0x66>
 8006d7a:	bf00      	nop
 8006d7c:	080084c5 	.word	0x080084c5
 8006d80:	0800854c 	.word	0x0800854c

08006d84 <_Bfree>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d88:	4605      	mov	r5, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	b976      	cbnz	r6, 8006dac <_Bfree+0x28>
 8006d8e:	2010      	movs	r0, #16
 8006d90:	f7ff ff94 	bl	8006cbc <malloc>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6268      	str	r0, [r5, #36]	; 0x24
 8006d98:	b920      	cbnz	r0, 8006da4 <_Bfree+0x20>
 8006d9a:	218a      	movs	r1, #138	; 0x8a
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <_Bfree+0x3c>)
 8006d9e:	4809      	ldr	r0, [pc, #36]	; (8006dc4 <_Bfree+0x40>)
 8006da0:	f000 fd52 	bl	8007848 <__assert_func>
 8006da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da8:	6006      	str	r6, [r0, #0]
 8006daa:	60c6      	str	r6, [r0, #12]
 8006dac:	b13c      	cbz	r4, 8006dbe <_Bfree+0x3a>
 8006dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006db0:	6862      	ldr	r2, [r4, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006db8:	6021      	str	r1, [r4, #0]
 8006dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	080084c5 	.word	0x080084c5
 8006dc4:	0800854c 	.word	0x0800854c

08006dc8 <__multadd>:
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	4698      	mov	r8, r3
 8006dce:	460c      	mov	r4, r1
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	690e      	ldr	r6, [r1, #16]
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	f101 0014 	add.w	r0, r1, #20
 8006dda:	6805      	ldr	r5, [r0, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2a9      	uxth	r1, r5
 8006de0:	fb02 8101 	mla	r1, r2, r1, r8
 8006de4:	0c2d      	lsrs	r5, r5, #16
 8006de6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006dea:	fb02 c505 	mla	r5, r2, r5, ip
 8006dee:	b289      	uxth	r1, r1
 8006df0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006df4:	429e      	cmp	r6, r3
 8006df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006dfa:	f840 1b04 	str.w	r1, [r0], #4
 8006dfe:	dcec      	bgt.n	8006dda <__multadd+0x12>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d022      	beq.n	8006e4c <__multadd+0x84>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	dc19      	bgt.n	8006e40 <__multadd+0x78>
 8006e0c:	6861      	ldr	r1, [r4, #4]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	3101      	adds	r1, #1
 8006e12:	f7ff ff77 	bl	8006d04 <_Balloc>
 8006e16:	4605      	mov	r5, r0
 8006e18:	b928      	cbnz	r0, 8006e26 <__multadd+0x5e>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	21b5      	movs	r1, #181	; 0xb5
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <__multadd+0x8c>)
 8006e20:	480d      	ldr	r0, [pc, #52]	; (8006e58 <__multadd+0x90>)
 8006e22:	f000 fd11 	bl	8007848 <__assert_func>
 8006e26:	6922      	ldr	r2, [r4, #16]
 8006e28:	f104 010c 	add.w	r1, r4, #12
 8006e2c:	3202      	adds	r2, #2
 8006e2e:	0092      	lsls	r2, r2, #2
 8006e30:	300c      	adds	r0, #12
 8006e32:	f7ff ff59 	bl	8006ce8 <memcpy>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff ffa3 	bl	8006d84 <_Bfree>
 8006e3e:	462c      	mov	r4, r5
 8006e40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e44:	3601      	adds	r6, #1
 8006e46:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e4a:	6126      	str	r6, [r4, #16]
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e52:	bf00      	nop
 8006e54:	0800853b 	.word	0x0800853b
 8006e58:	0800854c 	.word	0x0800854c

08006e5c <__hi0bits>:
 8006e5c:	0c02      	lsrs	r2, r0, #16
 8006e5e:	0412      	lsls	r2, r2, #16
 8006e60:	4603      	mov	r3, r0
 8006e62:	b9ca      	cbnz	r2, 8006e98 <__hi0bits+0x3c>
 8006e64:	0403      	lsls	r3, r0, #16
 8006e66:	2010      	movs	r0, #16
 8006e68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e6c:	bf04      	itt	eq
 8006e6e:	021b      	lsleq	r3, r3, #8
 8006e70:	3008      	addeq	r0, #8
 8006e72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e76:	bf04      	itt	eq
 8006e78:	011b      	lsleq	r3, r3, #4
 8006e7a:	3004      	addeq	r0, #4
 8006e7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e80:	bf04      	itt	eq
 8006e82:	009b      	lsleq	r3, r3, #2
 8006e84:	3002      	addeq	r0, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	db05      	blt.n	8006e96 <__hi0bits+0x3a>
 8006e8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006e8e:	f100 0001 	add.w	r0, r0, #1
 8006e92:	bf08      	it	eq
 8006e94:	2020      	moveq	r0, #32
 8006e96:	4770      	bx	lr
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7e5      	b.n	8006e68 <__hi0bits+0xc>

08006e9c <__lo0bits>:
 8006e9c:	6803      	ldr	r3, [r0, #0]
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f013 0007 	ands.w	r0, r3, #7
 8006ea4:	d00b      	beq.n	8006ebe <__lo0bits+0x22>
 8006ea6:	07d9      	lsls	r1, r3, #31
 8006ea8:	d422      	bmi.n	8006ef0 <__lo0bits+0x54>
 8006eaa:	0798      	lsls	r0, r3, #30
 8006eac:	bf49      	itett	mi
 8006eae:	085b      	lsrmi	r3, r3, #1
 8006eb0:	089b      	lsrpl	r3, r3, #2
 8006eb2:	2001      	movmi	r0, #1
 8006eb4:	6013      	strmi	r3, [r2, #0]
 8006eb6:	bf5c      	itt	pl
 8006eb8:	2002      	movpl	r0, #2
 8006eba:	6013      	strpl	r3, [r2, #0]
 8006ebc:	4770      	bx	lr
 8006ebe:	b299      	uxth	r1, r3
 8006ec0:	b909      	cbnz	r1, 8006ec6 <__lo0bits+0x2a>
 8006ec2:	2010      	movs	r0, #16
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006eca:	bf04      	itt	eq
 8006ecc:	0a1b      	lsreq	r3, r3, #8
 8006ece:	3008      	addeq	r0, #8
 8006ed0:	0719      	lsls	r1, r3, #28
 8006ed2:	bf04      	itt	eq
 8006ed4:	091b      	lsreq	r3, r3, #4
 8006ed6:	3004      	addeq	r0, #4
 8006ed8:	0799      	lsls	r1, r3, #30
 8006eda:	bf04      	itt	eq
 8006edc:	089b      	lsreq	r3, r3, #2
 8006ede:	3002      	addeq	r0, #2
 8006ee0:	07d9      	lsls	r1, r3, #31
 8006ee2:	d403      	bmi.n	8006eec <__lo0bits+0x50>
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	f100 0001 	add.w	r0, r0, #1
 8006eea:	d003      	beq.n	8006ef4 <__lo0bits+0x58>
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4770      	bx	lr
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr
 8006ef4:	2020      	movs	r0, #32
 8006ef6:	4770      	bx	lr

08006ef8 <__i2b>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	2101      	movs	r1, #1
 8006efe:	f7ff ff01 	bl	8006d04 <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__i2b+0x1a>
 8006f06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <__i2b+0x24>)
 8006f0c:	4804      	ldr	r0, [pc, #16]	; (8006f20 <__i2b+0x28>)
 8006f0e:	f000 fc9b 	bl	8007848 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	6144      	str	r4, [r0, #20]
 8006f16:	6103      	str	r3, [r0, #16]
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop
 8006f1c:	0800853b 	.word	0x0800853b
 8006f20:	0800854c 	.word	0x0800854c

08006f24 <__multiply>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	4614      	mov	r4, r2
 8006f2a:	690a      	ldr	r2, [r1, #16]
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	460d      	mov	r5, r1
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bfbe      	ittt	lt
 8006f34:	460b      	movlt	r3, r1
 8006f36:	4625      	movlt	r5, r4
 8006f38:	461c      	movlt	r4, r3
 8006f3a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f42:	68ab      	ldr	r3, [r5, #8]
 8006f44:	6869      	ldr	r1, [r5, #4]
 8006f46:	eb0a 0709 	add.w	r7, sl, r9
 8006f4a:	42bb      	cmp	r3, r7
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	bfb8      	it	lt
 8006f50:	3101      	addlt	r1, #1
 8006f52:	f7ff fed7 	bl	8006d04 <_Balloc>
 8006f56:	b930      	cbnz	r0, 8006f66 <__multiply+0x42>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	f240 115d 	movw	r1, #349	; 0x15d
 8006f5e:	4b41      	ldr	r3, [pc, #260]	; (8007064 <__multiply+0x140>)
 8006f60:	4841      	ldr	r0, [pc, #260]	; (8007068 <__multiply+0x144>)
 8006f62:	f000 fc71 	bl	8007848 <__assert_func>
 8006f66:	f100 0614 	add.w	r6, r0, #20
 8006f6a:	4633      	mov	r3, r6
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f72:	4543      	cmp	r3, r8
 8006f74:	d31e      	bcc.n	8006fb4 <__multiply+0x90>
 8006f76:	f105 0c14 	add.w	ip, r5, #20
 8006f7a:	f104 0314 	add.w	r3, r4, #20
 8006f7e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006f82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	ebac 0205 	sub.w	r2, ip, r5
 8006f8c:	3a15      	subs	r2, #21
 8006f8e:	f022 0203 	bic.w	r2, r2, #3
 8006f92:	3204      	adds	r2, #4
 8006f94:	f105 0115 	add.w	r1, r5, #21
 8006f98:	458c      	cmp	ip, r1
 8006f9a:	bf38      	it	cc
 8006f9c:	2204      	movcc	r2, #4
 8006f9e:	9201      	str	r2, [sp, #4]
 8006fa0:	9a02      	ldr	r2, [sp, #8]
 8006fa2:	9303      	str	r3, [sp, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d808      	bhi.n	8006fba <__multiply+0x96>
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	dc55      	bgt.n	8007058 <__multiply+0x134>
 8006fac:	6107      	str	r7, [r0, #16]
 8006fae:	b005      	add	sp, #20
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	f843 2b04 	str.w	r2, [r3], #4
 8006fb8:	e7db      	b.n	8006f72 <__multiply+0x4e>
 8006fba:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fbe:	f1ba 0f00 	cmp.w	sl, #0
 8006fc2:	d020      	beq.n	8007006 <__multiply+0xe2>
 8006fc4:	46b1      	mov	r9, r6
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f105 0e14 	add.w	lr, r5, #20
 8006fcc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006fd0:	f8d9 b000 	ldr.w	fp, [r9]
 8006fd4:	b2a1      	uxth	r1, r4
 8006fd6:	fa1f fb8b 	uxth.w	fp, fp
 8006fda:	fb0a b101 	mla	r1, sl, r1, fp
 8006fde:	4411      	add	r1, r2
 8006fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fe4:	0c24      	lsrs	r4, r4, #16
 8006fe6:	0c12      	lsrs	r2, r2, #16
 8006fe8:	fb0a 2404 	mla	r4, sl, r4, r2
 8006fec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ff0:	b289      	uxth	r1, r1
 8006ff2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ff6:	45f4      	cmp	ip, lr
 8006ff8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ffc:	f849 1b04 	str.w	r1, [r9], #4
 8007000:	d8e4      	bhi.n	8006fcc <__multiply+0xa8>
 8007002:	9901      	ldr	r1, [sp, #4]
 8007004:	5072      	str	r2, [r6, r1]
 8007006:	9a03      	ldr	r2, [sp, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800700e:	f1b9 0f00 	cmp.w	r9, #0
 8007012:	d01f      	beq.n	8007054 <__multiply+0x130>
 8007014:	46b6      	mov	lr, r6
 8007016:	f04f 0a00 	mov.w	sl, #0
 800701a:	6834      	ldr	r4, [r6, #0]
 800701c:	f105 0114 	add.w	r1, r5, #20
 8007020:	880a      	ldrh	r2, [r1, #0]
 8007022:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007026:	b2a4      	uxth	r4, r4
 8007028:	fb09 b202 	mla	r2, r9, r2, fp
 800702c:	4492      	add	sl, r2
 800702e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007032:	f84e 4b04 	str.w	r4, [lr], #4
 8007036:	f851 4b04 	ldr.w	r4, [r1], #4
 800703a:	f8be 2000 	ldrh.w	r2, [lr]
 800703e:	0c24      	lsrs	r4, r4, #16
 8007040:	fb09 2404 	mla	r4, r9, r4, r2
 8007044:	458c      	cmp	ip, r1
 8007046:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800704a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800704e:	d8e7      	bhi.n	8007020 <__multiply+0xfc>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	50b4      	str	r4, [r6, r2]
 8007054:	3604      	adds	r6, #4
 8007056:	e7a3      	b.n	8006fa0 <__multiply+0x7c>
 8007058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1a5      	bne.n	8006fac <__multiply+0x88>
 8007060:	3f01      	subs	r7, #1
 8007062:	e7a1      	b.n	8006fa8 <__multiply+0x84>
 8007064:	0800853b 	.word	0x0800853b
 8007068:	0800854c 	.word	0x0800854c

0800706c <__pow5mult>:
 800706c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007070:	4615      	mov	r5, r2
 8007072:	f012 0203 	ands.w	r2, r2, #3
 8007076:	4606      	mov	r6, r0
 8007078:	460f      	mov	r7, r1
 800707a:	d007      	beq.n	800708c <__pow5mult+0x20>
 800707c:	4c25      	ldr	r4, [pc, #148]	; (8007114 <__pow5mult+0xa8>)
 800707e:	3a01      	subs	r2, #1
 8007080:	2300      	movs	r3, #0
 8007082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007086:	f7ff fe9f 	bl	8006dc8 <__multadd>
 800708a:	4607      	mov	r7, r0
 800708c:	10ad      	asrs	r5, r5, #2
 800708e:	d03d      	beq.n	800710c <__pow5mult+0xa0>
 8007090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007092:	b97c      	cbnz	r4, 80070b4 <__pow5mult+0x48>
 8007094:	2010      	movs	r0, #16
 8007096:	f7ff fe11 	bl	8006cbc <malloc>
 800709a:	4602      	mov	r2, r0
 800709c:	6270      	str	r0, [r6, #36]	; 0x24
 800709e:	b928      	cbnz	r0, 80070ac <__pow5mult+0x40>
 80070a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070a4:	4b1c      	ldr	r3, [pc, #112]	; (8007118 <__pow5mult+0xac>)
 80070a6:	481d      	ldr	r0, [pc, #116]	; (800711c <__pow5mult+0xb0>)
 80070a8:	f000 fbce 	bl	8007848 <__assert_func>
 80070ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070b0:	6004      	str	r4, [r0, #0]
 80070b2:	60c4      	str	r4, [r0, #12]
 80070b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070bc:	b94c      	cbnz	r4, 80070d2 <__pow5mult+0x66>
 80070be:	f240 2171 	movw	r1, #625	; 0x271
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff18 	bl	8006ef8 <__i2b>
 80070c8:	2300      	movs	r3, #0
 80070ca:	4604      	mov	r4, r0
 80070cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	f04f 0900 	mov.w	r9, #0
 80070d6:	07eb      	lsls	r3, r5, #31
 80070d8:	d50a      	bpl.n	80070f0 <__pow5mult+0x84>
 80070da:	4639      	mov	r1, r7
 80070dc:	4622      	mov	r2, r4
 80070de:	4630      	mov	r0, r6
 80070e0:	f7ff ff20 	bl	8006f24 <__multiply>
 80070e4:	4680      	mov	r8, r0
 80070e6:	4639      	mov	r1, r7
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff fe4b 	bl	8006d84 <_Bfree>
 80070ee:	4647      	mov	r7, r8
 80070f0:	106d      	asrs	r5, r5, #1
 80070f2:	d00b      	beq.n	800710c <__pow5mult+0xa0>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	b938      	cbnz	r0, 8007108 <__pow5mult+0x9c>
 80070f8:	4622      	mov	r2, r4
 80070fa:	4621      	mov	r1, r4
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7ff ff11 	bl	8006f24 <__multiply>
 8007102:	6020      	str	r0, [r4, #0]
 8007104:	f8c0 9000 	str.w	r9, [r0]
 8007108:	4604      	mov	r4, r0
 800710a:	e7e4      	b.n	80070d6 <__pow5mult+0x6a>
 800710c:	4638      	mov	r0, r7
 800710e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007112:	bf00      	nop
 8007114:	080086a0 	.word	0x080086a0
 8007118:	080084c5 	.word	0x080084c5
 800711c:	0800854c 	.word	0x0800854c

08007120 <__lshift>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	460c      	mov	r4, r1
 8007126:	4607      	mov	r7, r0
 8007128:	4691      	mov	r9, r2
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	6849      	ldr	r1, [r1, #4]
 800712e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007132:	68a3      	ldr	r3, [r4, #8]
 8007134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007138:	f108 0601 	add.w	r6, r8, #1
 800713c:	42b3      	cmp	r3, r6
 800713e:	db0b      	blt.n	8007158 <__lshift+0x38>
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff fddf 	bl	8006d04 <_Balloc>
 8007146:	4605      	mov	r5, r0
 8007148:	b948      	cbnz	r0, 800715e <__lshift+0x3e>
 800714a:	4602      	mov	r2, r0
 800714c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007150:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <__lshift+0xd0>)
 8007152:	4828      	ldr	r0, [pc, #160]	; (80071f4 <__lshift+0xd4>)
 8007154:	f000 fb78 	bl	8007848 <__assert_func>
 8007158:	3101      	adds	r1, #1
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	e7ee      	b.n	800713c <__lshift+0x1c>
 800715e:	2300      	movs	r3, #0
 8007160:	f100 0114 	add.w	r1, r0, #20
 8007164:	f100 0210 	add.w	r2, r0, #16
 8007168:	4618      	mov	r0, r3
 800716a:	4553      	cmp	r3, sl
 800716c:	db33      	blt.n	80071d6 <__lshift+0xb6>
 800716e:	6920      	ldr	r0, [r4, #16]
 8007170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007174:	f104 0314 	add.w	r3, r4, #20
 8007178:	f019 091f 	ands.w	r9, r9, #31
 800717c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007184:	d02b      	beq.n	80071de <__lshift+0xbe>
 8007186:	468a      	mov	sl, r1
 8007188:	2200      	movs	r2, #0
 800718a:	f1c9 0e20 	rsb	lr, r9, #32
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	fa00 f009 	lsl.w	r0, r0, r9
 8007194:	4302      	orrs	r2, r0
 8007196:	f84a 2b04 	str.w	r2, [sl], #4
 800719a:	f853 2b04 	ldr.w	r2, [r3], #4
 800719e:	459c      	cmp	ip, r3
 80071a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80071a4:	d8f3      	bhi.n	800718e <__lshift+0x6e>
 80071a6:	ebac 0304 	sub.w	r3, ip, r4
 80071aa:	3b15      	subs	r3, #21
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	3304      	adds	r3, #4
 80071b2:	f104 0015 	add.w	r0, r4, #21
 80071b6:	4584      	cmp	ip, r0
 80071b8:	bf38      	it	cc
 80071ba:	2304      	movcc	r3, #4
 80071bc:	50ca      	str	r2, [r1, r3]
 80071be:	b10a      	cbz	r2, 80071c4 <__lshift+0xa4>
 80071c0:	f108 0602 	add.w	r6, r8, #2
 80071c4:	3e01      	subs	r6, #1
 80071c6:	4638      	mov	r0, r7
 80071c8:	4621      	mov	r1, r4
 80071ca:	612e      	str	r6, [r5, #16]
 80071cc:	f7ff fdda 	bl	8006d84 <_Bfree>
 80071d0:	4628      	mov	r0, r5
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80071da:	3301      	adds	r3, #1
 80071dc:	e7c5      	b.n	800716a <__lshift+0x4a>
 80071de:	3904      	subs	r1, #4
 80071e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e4:	459c      	cmp	ip, r3
 80071e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80071ea:	d8f9      	bhi.n	80071e0 <__lshift+0xc0>
 80071ec:	e7ea      	b.n	80071c4 <__lshift+0xa4>
 80071ee:	bf00      	nop
 80071f0:	0800853b 	.word	0x0800853b
 80071f4:	0800854c 	.word	0x0800854c

080071f8 <__mcmp>:
 80071f8:	4603      	mov	r3, r0
 80071fa:	690a      	ldr	r2, [r1, #16]
 80071fc:	6900      	ldr	r0, [r0, #16]
 80071fe:	b530      	push	{r4, r5, lr}
 8007200:	1a80      	subs	r0, r0, r2
 8007202:	d10d      	bne.n	8007220 <__mcmp+0x28>
 8007204:	3314      	adds	r3, #20
 8007206:	3114      	adds	r1, #20
 8007208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800720c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007218:	4295      	cmp	r5, r2
 800721a:	d002      	beq.n	8007222 <__mcmp+0x2a>
 800721c:	d304      	bcc.n	8007228 <__mcmp+0x30>
 800721e:	2001      	movs	r0, #1
 8007220:	bd30      	pop	{r4, r5, pc}
 8007222:	42a3      	cmp	r3, r4
 8007224:	d3f4      	bcc.n	8007210 <__mcmp+0x18>
 8007226:	e7fb      	b.n	8007220 <__mcmp+0x28>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e7f8      	b.n	8007220 <__mcmp+0x28>
	...

08007230 <__mdiff>:
 8007230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	4606      	mov	r6, r0
 8007238:	4611      	mov	r1, r2
 800723a:	4620      	mov	r0, r4
 800723c:	4692      	mov	sl, r2
 800723e:	f7ff ffdb 	bl	80071f8 <__mcmp>
 8007242:	1e05      	subs	r5, r0, #0
 8007244:	d111      	bne.n	800726a <__mdiff+0x3a>
 8007246:	4629      	mov	r1, r5
 8007248:	4630      	mov	r0, r6
 800724a:	f7ff fd5b 	bl	8006d04 <_Balloc>
 800724e:	4602      	mov	r2, r0
 8007250:	b928      	cbnz	r0, 800725e <__mdiff+0x2e>
 8007252:	f240 2132 	movw	r1, #562	; 0x232
 8007256:	4b3c      	ldr	r3, [pc, #240]	; (8007348 <__mdiff+0x118>)
 8007258:	483c      	ldr	r0, [pc, #240]	; (800734c <__mdiff+0x11c>)
 800725a:	f000 faf5 	bl	8007848 <__assert_func>
 800725e:	2301      	movs	r3, #1
 8007260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007264:	4610      	mov	r0, r2
 8007266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	bfa4      	itt	ge
 800726c:	4653      	movge	r3, sl
 800726e:	46a2      	movge	sl, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007276:	bfa6      	itte	ge
 8007278:	461c      	movge	r4, r3
 800727a:	2500      	movge	r5, #0
 800727c:	2501      	movlt	r5, #1
 800727e:	f7ff fd41 	bl	8006d04 <_Balloc>
 8007282:	4602      	mov	r2, r0
 8007284:	b918      	cbnz	r0, 800728e <__mdiff+0x5e>
 8007286:	f44f 7110 	mov.w	r1, #576	; 0x240
 800728a:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <__mdiff+0x118>)
 800728c:	e7e4      	b.n	8007258 <__mdiff+0x28>
 800728e:	f100 0814 	add.w	r8, r0, #20
 8007292:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007296:	60c5      	str	r5, [r0, #12]
 8007298:	f04f 0c00 	mov.w	ip, #0
 800729c:	f10a 0514 	add.w	r5, sl, #20
 80072a0:	f10a 0010 	add.w	r0, sl, #16
 80072a4:	46c2      	mov	sl, r8
 80072a6:	6926      	ldr	r6, [r4, #16]
 80072a8:	f104 0914 	add.w	r9, r4, #20
 80072ac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80072b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072b4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80072b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80072bc:	fa1f f18b 	uxth.w	r1, fp
 80072c0:	4461      	add	r1, ip
 80072c2:	fa1f fc83 	uxth.w	ip, r3
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	eba1 010c 	sub.w	r1, r1, ip
 80072cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80072d4:	b289      	uxth	r1, r1
 80072d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80072da:	454e      	cmp	r6, r9
 80072dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80072e0:	f84a 3b04 	str.w	r3, [sl], #4
 80072e4:	d8e6      	bhi.n	80072b4 <__mdiff+0x84>
 80072e6:	1b33      	subs	r3, r6, r4
 80072e8:	3b15      	subs	r3, #21
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	3415      	adds	r4, #21
 80072f0:	3304      	adds	r3, #4
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	bf38      	it	cc
 80072f6:	2304      	movcc	r3, #4
 80072f8:	441d      	add	r5, r3
 80072fa:	4443      	add	r3, r8
 80072fc:	461e      	mov	r6, r3
 80072fe:	462c      	mov	r4, r5
 8007300:	4574      	cmp	r4, lr
 8007302:	d30e      	bcc.n	8007322 <__mdiff+0xf2>
 8007304:	f10e 0103 	add.w	r1, lr, #3
 8007308:	1b49      	subs	r1, r1, r5
 800730a:	f021 0103 	bic.w	r1, r1, #3
 800730e:	3d03      	subs	r5, #3
 8007310:	45ae      	cmp	lr, r5
 8007312:	bf38      	it	cc
 8007314:	2100      	movcc	r1, #0
 8007316:	4419      	add	r1, r3
 8007318:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800731c:	b18b      	cbz	r3, 8007342 <__mdiff+0x112>
 800731e:	6117      	str	r7, [r2, #16]
 8007320:	e7a0      	b.n	8007264 <__mdiff+0x34>
 8007322:	f854 8b04 	ldr.w	r8, [r4], #4
 8007326:	fa1f f188 	uxth.w	r1, r8
 800732a:	4461      	add	r1, ip
 800732c:	1408      	asrs	r0, r1, #16
 800732e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007332:	b289      	uxth	r1, r1
 8007334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007338:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800733c:	f846 1b04 	str.w	r1, [r6], #4
 8007340:	e7de      	b.n	8007300 <__mdiff+0xd0>
 8007342:	3f01      	subs	r7, #1
 8007344:	e7e8      	b.n	8007318 <__mdiff+0xe8>
 8007346:	bf00      	nop
 8007348:	0800853b 	.word	0x0800853b
 800734c:	0800854c 	.word	0x0800854c

08007350 <__d2b>:
 8007350:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007354:	2101      	movs	r1, #1
 8007356:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800735a:	4690      	mov	r8, r2
 800735c:	461d      	mov	r5, r3
 800735e:	f7ff fcd1 	bl	8006d04 <_Balloc>
 8007362:	4604      	mov	r4, r0
 8007364:	b930      	cbnz	r0, 8007374 <__d2b+0x24>
 8007366:	4602      	mov	r2, r0
 8007368:	f240 310a 	movw	r1, #778	; 0x30a
 800736c:	4b24      	ldr	r3, [pc, #144]	; (8007400 <__d2b+0xb0>)
 800736e:	4825      	ldr	r0, [pc, #148]	; (8007404 <__d2b+0xb4>)
 8007370:	f000 fa6a 	bl	8007848 <__assert_func>
 8007374:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007378:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800737c:	bb2d      	cbnz	r5, 80073ca <__d2b+0x7a>
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	f1b8 0300 	subs.w	r3, r8, #0
 8007384:	d026      	beq.n	80073d4 <__d2b+0x84>
 8007386:	4668      	mov	r0, sp
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	f7ff fd87 	bl	8006e9c <__lo0bits>
 800738e:	9900      	ldr	r1, [sp, #0]
 8007390:	b1f0      	cbz	r0, 80073d0 <__d2b+0x80>
 8007392:	9a01      	ldr	r2, [sp, #4]
 8007394:	f1c0 0320 	rsb	r3, r0, #32
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	430b      	orrs	r3, r1
 800739e:	40c2      	lsrs	r2, r0
 80073a0:	6163      	str	r3, [r4, #20]
 80073a2:	9201      	str	r2, [sp, #4]
 80073a4:	9b01      	ldr	r3, [sp, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf14      	ite	ne
 80073aa:	2102      	movne	r1, #2
 80073ac:	2101      	moveq	r1, #1
 80073ae:	61a3      	str	r3, [r4, #24]
 80073b0:	6121      	str	r1, [r4, #16]
 80073b2:	b1c5      	cbz	r5, 80073e6 <__d2b+0x96>
 80073b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073b8:	4405      	add	r5, r0
 80073ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073be:	603d      	str	r5, [r7, #0]
 80073c0:	6030      	str	r0, [r6, #0]
 80073c2:	4620      	mov	r0, r4
 80073c4:	b002      	add	sp, #8
 80073c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ce:	e7d6      	b.n	800737e <__d2b+0x2e>
 80073d0:	6161      	str	r1, [r4, #20]
 80073d2:	e7e7      	b.n	80073a4 <__d2b+0x54>
 80073d4:	a801      	add	r0, sp, #4
 80073d6:	f7ff fd61 	bl	8006e9c <__lo0bits>
 80073da:	2101      	movs	r1, #1
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	6121      	str	r1, [r4, #16]
 80073e0:	6163      	str	r3, [r4, #20]
 80073e2:	3020      	adds	r0, #32
 80073e4:	e7e5      	b.n	80073b2 <__d2b+0x62>
 80073e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80073ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073ee:	6038      	str	r0, [r7, #0]
 80073f0:	6918      	ldr	r0, [r3, #16]
 80073f2:	f7ff fd33 	bl	8006e5c <__hi0bits>
 80073f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80073fa:	6031      	str	r1, [r6, #0]
 80073fc:	e7e1      	b.n	80073c2 <__d2b+0x72>
 80073fe:	bf00      	nop
 8007400:	0800853b 	.word	0x0800853b
 8007404:	0800854c 	.word	0x0800854c

08007408 <_calloc_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	fb02 f501 	mul.w	r5, r2, r1
 800740e:	4629      	mov	r1, r5
 8007410:	f000 f854 	bl	80074bc <_malloc_r>
 8007414:	4604      	mov	r4, r0
 8007416:	b118      	cbz	r0, 8007420 <_calloc_r+0x18>
 8007418:	462a      	mov	r2, r5
 800741a:	2100      	movs	r1, #0
 800741c:	f7fe f944 	bl	80056a8 <memset>
 8007420:	4620      	mov	r0, r4
 8007422:	bd38      	pop	{r3, r4, r5, pc}

08007424 <_free_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	2900      	cmp	r1, #0
 800742a:	d043      	beq.n	80074b4 <_free_r+0x90>
 800742c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007430:	1f0c      	subs	r4, r1, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfb8      	it	lt
 8007436:	18e4      	addlt	r4, r4, r3
 8007438:	f000 fa62 	bl	8007900 <__malloc_lock>
 800743c:	4a1e      	ldr	r2, [pc, #120]	; (80074b8 <_free_r+0x94>)
 800743e:	6813      	ldr	r3, [r2, #0]
 8007440:	4610      	mov	r0, r2
 8007442:	b933      	cbnz	r3, 8007452 <_free_r+0x2e>
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	6014      	str	r4, [r2, #0]
 8007448:	4628      	mov	r0, r5
 800744a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800744e:	f000 ba5d 	b.w	800790c <__malloc_unlock>
 8007452:	42a3      	cmp	r3, r4
 8007454:	d90a      	bls.n	800746c <_free_r+0x48>
 8007456:	6821      	ldr	r1, [r4, #0]
 8007458:	1862      	adds	r2, r4, r1
 800745a:	4293      	cmp	r3, r2
 800745c:	bf01      	itttt	eq
 800745e:	681a      	ldreq	r2, [r3, #0]
 8007460:	685b      	ldreq	r3, [r3, #4]
 8007462:	1852      	addeq	r2, r2, r1
 8007464:	6022      	streq	r2, [r4, #0]
 8007466:	6063      	str	r3, [r4, #4]
 8007468:	6004      	str	r4, [r0, #0]
 800746a:	e7ed      	b.n	8007448 <_free_r+0x24>
 800746c:	461a      	mov	r2, r3
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	b10b      	cbz	r3, 8007476 <_free_r+0x52>
 8007472:	42a3      	cmp	r3, r4
 8007474:	d9fa      	bls.n	800746c <_free_r+0x48>
 8007476:	6811      	ldr	r1, [r2, #0]
 8007478:	1850      	adds	r0, r2, r1
 800747a:	42a0      	cmp	r0, r4
 800747c:	d10b      	bne.n	8007496 <_free_r+0x72>
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	4401      	add	r1, r0
 8007482:	1850      	adds	r0, r2, r1
 8007484:	4283      	cmp	r3, r0
 8007486:	6011      	str	r1, [r2, #0]
 8007488:	d1de      	bne.n	8007448 <_free_r+0x24>
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4401      	add	r1, r0
 8007490:	6011      	str	r1, [r2, #0]
 8007492:	6053      	str	r3, [r2, #4]
 8007494:	e7d8      	b.n	8007448 <_free_r+0x24>
 8007496:	d902      	bls.n	800749e <_free_r+0x7a>
 8007498:	230c      	movs	r3, #12
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	e7d4      	b.n	8007448 <_free_r+0x24>
 800749e:	6820      	ldr	r0, [r4, #0]
 80074a0:	1821      	adds	r1, r4, r0
 80074a2:	428b      	cmp	r3, r1
 80074a4:	bf01      	itttt	eq
 80074a6:	6819      	ldreq	r1, [r3, #0]
 80074a8:	685b      	ldreq	r3, [r3, #4]
 80074aa:	1809      	addeq	r1, r1, r0
 80074ac:	6021      	streq	r1, [r4, #0]
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	6054      	str	r4, [r2, #4]
 80074b2:	e7c9      	b.n	8007448 <_free_r+0x24>
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	bf00      	nop
 80074b8:	200001fc 	.word	0x200001fc

080074bc <_malloc_r>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	1ccd      	adds	r5, r1, #3
 80074c0:	f025 0503 	bic.w	r5, r5, #3
 80074c4:	3508      	adds	r5, #8
 80074c6:	2d0c      	cmp	r5, #12
 80074c8:	bf38      	it	cc
 80074ca:	250c      	movcc	r5, #12
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	4606      	mov	r6, r0
 80074d0:	db01      	blt.n	80074d6 <_malloc_r+0x1a>
 80074d2:	42a9      	cmp	r1, r5
 80074d4:	d903      	bls.n	80074de <_malloc_r+0x22>
 80074d6:	230c      	movs	r3, #12
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	2000      	movs	r0, #0
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074de:	f000 fa0f 	bl	8007900 <__malloc_lock>
 80074e2:	4921      	ldr	r1, [pc, #132]	; (8007568 <_malloc_r+0xac>)
 80074e4:	680a      	ldr	r2, [r1, #0]
 80074e6:	4614      	mov	r4, r2
 80074e8:	b99c      	cbnz	r4, 8007512 <_malloc_r+0x56>
 80074ea:	4f20      	ldr	r7, [pc, #128]	; (800756c <_malloc_r+0xb0>)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	b923      	cbnz	r3, 80074fa <_malloc_r+0x3e>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4630      	mov	r0, r6
 80074f4:	f000 f998 	bl	8007828 <_sbrk_r>
 80074f8:	6038      	str	r0, [r7, #0]
 80074fa:	4629      	mov	r1, r5
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f993 	bl	8007828 <_sbrk_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d123      	bne.n	800754e <_malloc_r+0x92>
 8007506:	230c      	movs	r3, #12
 8007508:	4630      	mov	r0, r6
 800750a:	6033      	str	r3, [r6, #0]
 800750c:	f000 f9fe 	bl	800790c <__malloc_unlock>
 8007510:	e7e3      	b.n	80074da <_malloc_r+0x1e>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	1b5b      	subs	r3, r3, r5
 8007516:	d417      	bmi.n	8007548 <_malloc_r+0x8c>
 8007518:	2b0b      	cmp	r3, #11
 800751a:	d903      	bls.n	8007524 <_malloc_r+0x68>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	441c      	add	r4, r3
 8007520:	6025      	str	r5, [r4, #0]
 8007522:	e004      	b.n	800752e <_malloc_r+0x72>
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	42a2      	cmp	r2, r4
 8007528:	bf0c      	ite	eq
 800752a:	600b      	streq	r3, [r1, #0]
 800752c:	6053      	strne	r3, [r2, #4]
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f9ec 	bl	800790c <__malloc_unlock>
 8007534:	f104 000b 	add.w	r0, r4, #11
 8007538:	1d23      	adds	r3, r4, #4
 800753a:	f020 0007 	bic.w	r0, r0, #7
 800753e:	1ac2      	subs	r2, r0, r3
 8007540:	d0cc      	beq.n	80074dc <_malloc_r+0x20>
 8007542:	1a1b      	subs	r3, r3, r0
 8007544:	50a3      	str	r3, [r4, r2]
 8007546:	e7c9      	b.n	80074dc <_malloc_r+0x20>
 8007548:	4622      	mov	r2, r4
 800754a:	6864      	ldr	r4, [r4, #4]
 800754c:	e7cc      	b.n	80074e8 <_malloc_r+0x2c>
 800754e:	1cc4      	adds	r4, r0, #3
 8007550:	f024 0403 	bic.w	r4, r4, #3
 8007554:	42a0      	cmp	r0, r4
 8007556:	d0e3      	beq.n	8007520 <_malloc_r+0x64>
 8007558:	1a21      	subs	r1, r4, r0
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f964 	bl	8007828 <_sbrk_r>
 8007560:	3001      	adds	r0, #1
 8007562:	d1dd      	bne.n	8007520 <_malloc_r+0x64>
 8007564:	e7cf      	b.n	8007506 <_malloc_r+0x4a>
 8007566:	bf00      	nop
 8007568:	200001fc 	.word	0x200001fc
 800756c:	20000200 	.word	0x20000200

08007570 <__ssputs_r>:
 8007570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	688e      	ldr	r6, [r1, #8]
 8007576:	4682      	mov	sl, r0
 8007578:	429e      	cmp	r6, r3
 800757a:	460c      	mov	r4, r1
 800757c:	4690      	mov	r8, r2
 800757e:	461f      	mov	r7, r3
 8007580:	d838      	bhi.n	80075f4 <__ssputs_r+0x84>
 8007582:	898a      	ldrh	r2, [r1, #12]
 8007584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007588:	d032      	beq.n	80075f0 <__ssputs_r+0x80>
 800758a:	6825      	ldr	r5, [r4, #0]
 800758c:	6909      	ldr	r1, [r1, #16]
 800758e:	3301      	adds	r3, #1
 8007590:	eba5 0901 	sub.w	r9, r5, r1
 8007594:	6965      	ldr	r5, [r4, #20]
 8007596:	444b      	add	r3, r9
 8007598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800759c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075a0:	106d      	asrs	r5, r5, #1
 80075a2:	429d      	cmp	r5, r3
 80075a4:	bf38      	it	cc
 80075a6:	461d      	movcc	r5, r3
 80075a8:	0553      	lsls	r3, r2, #21
 80075aa:	d531      	bpl.n	8007610 <__ssputs_r+0xa0>
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7ff ff85 	bl	80074bc <_malloc_r>
 80075b2:	4606      	mov	r6, r0
 80075b4:	b950      	cbnz	r0, 80075cc <__ssputs_r+0x5c>
 80075b6:	230c      	movs	r3, #12
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	f8ca 3000 	str.w	r3, [sl]
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	464a      	mov	r2, r9
 80075ce:	6921      	ldr	r1, [r4, #16]
 80075d0:	f7ff fb8a 	bl	8006ce8 <memcpy>
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	6126      	str	r6, [r4, #16]
 80075e2:	444e      	add	r6, r9
 80075e4:	6026      	str	r6, [r4, #0]
 80075e6:	463e      	mov	r6, r7
 80075e8:	6165      	str	r5, [r4, #20]
 80075ea:	eba5 0509 	sub.w	r5, r5, r9
 80075ee:	60a5      	str	r5, [r4, #8]
 80075f0:	42be      	cmp	r6, r7
 80075f2:	d900      	bls.n	80075f6 <__ssputs_r+0x86>
 80075f4:	463e      	mov	r6, r7
 80075f6:	4632      	mov	r2, r6
 80075f8:	4641      	mov	r1, r8
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	f000 f966 	bl	80078cc <memmove>
 8007600:	68a3      	ldr	r3, [r4, #8]
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	1b9b      	subs	r3, r3, r6
 8007606:	4432      	add	r2, r6
 8007608:	2000      	movs	r0, #0
 800760a:	60a3      	str	r3, [r4, #8]
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	e7db      	b.n	80075c8 <__ssputs_r+0x58>
 8007610:	462a      	mov	r2, r5
 8007612:	f000 f981 	bl	8007918 <_realloc_r>
 8007616:	4606      	mov	r6, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d1e1      	bne.n	80075e0 <__ssputs_r+0x70>
 800761c:	4650      	mov	r0, sl
 800761e:	6921      	ldr	r1, [r4, #16]
 8007620:	f7ff ff00 	bl	8007424 <_free_r>
 8007624:	e7c7      	b.n	80075b6 <__ssputs_r+0x46>
	...

08007628 <_svfiprintf_r>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	4698      	mov	r8, r3
 800762e:	898b      	ldrh	r3, [r1, #12]
 8007630:	4607      	mov	r7, r0
 8007632:	061b      	lsls	r3, r3, #24
 8007634:	460d      	mov	r5, r1
 8007636:	4614      	mov	r4, r2
 8007638:	b09d      	sub	sp, #116	; 0x74
 800763a:	d50e      	bpl.n	800765a <_svfiprintf_r+0x32>
 800763c:	690b      	ldr	r3, [r1, #16]
 800763e:	b963      	cbnz	r3, 800765a <_svfiprintf_r+0x32>
 8007640:	2140      	movs	r1, #64	; 0x40
 8007642:	f7ff ff3b 	bl	80074bc <_malloc_r>
 8007646:	6028      	str	r0, [r5, #0]
 8007648:	6128      	str	r0, [r5, #16]
 800764a:	b920      	cbnz	r0, 8007656 <_svfiprintf_r+0x2e>
 800764c:	230c      	movs	r3, #12
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	e0d1      	b.n	80077fa <_svfiprintf_r+0x1d2>
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	616b      	str	r3, [r5, #20]
 800765a:	2300      	movs	r3, #0
 800765c:	9309      	str	r3, [sp, #36]	; 0x24
 800765e:	2320      	movs	r3, #32
 8007660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007664:	2330      	movs	r3, #48	; 0x30
 8007666:	f04f 0901 	mov.w	r9, #1
 800766a:	f8cd 800c 	str.w	r8, [sp, #12]
 800766e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007814 <_svfiprintf_r+0x1ec>
 8007672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007676:	4623      	mov	r3, r4
 8007678:	469a      	mov	sl, r3
 800767a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800767e:	b10a      	cbz	r2, 8007684 <_svfiprintf_r+0x5c>
 8007680:	2a25      	cmp	r2, #37	; 0x25
 8007682:	d1f9      	bne.n	8007678 <_svfiprintf_r+0x50>
 8007684:	ebba 0b04 	subs.w	fp, sl, r4
 8007688:	d00b      	beq.n	80076a2 <_svfiprintf_r+0x7a>
 800768a:	465b      	mov	r3, fp
 800768c:	4622      	mov	r2, r4
 800768e:	4629      	mov	r1, r5
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff ff6d 	bl	8007570 <__ssputs_r>
 8007696:	3001      	adds	r0, #1
 8007698:	f000 80aa 	beq.w	80077f0 <_svfiprintf_r+0x1c8>
 800769c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800769e:	445a      	add	r2, fp
 80076a0:	9209      	str	r2, [sp, #36]	; 0x24
 80076a2:	f89a 3000 	ldrb.w	r3, [sl]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80a2 	beq.w	80077f0 <_svfiprintf_r+0x1c8>
 80076ac:	2300      	movs	r3, #0
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295
 80076b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b6:	f10a 0a01 	add.w	sl, sl, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9307      	str	r3, [sp, #28]
 80076be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c2:	931a      	str	r3, [sp, #104]	; 0x68
 80076c4:	4654      	mov	r4, sl
 80076c6:	2205      	movs	r2, #5
 80076c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076cc:	4851      	ldr	r0, [pc, #324]	; (8007814 <_svfiprintf_r+0x1ec>)
 80076ce:	f7ff fafd 	bl	8006ccc <memchr>
 80076d2:	9a04      	ldr	r2, [sp, #16]
 80076d4:	b9d8      	cbnz	r0, 800770e <_svfiprintf_r+0xe6>
 80076d6:	06d0      	lsls	r0, r2, #27
 80076d8:	bf44      	itt	mi
 80076da:	2320      	movmi	r3, #32
 80076dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e0:	0711      	lsls	r1, r2, #28
 80076e2:	bf44      	itt	mi
 80076e4:	232b      	movmi	r3, #43	; 0x2b
 80076e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ea:	f89a 3000 	ldrb.w	r3, [sl]
 80076ee:	2b2a      	cmp	r3, #42	; 0x2a
 80076f0:	d015      	beq.n	800771e <_svfiprintf_r+0xf6>
 80076f2:	4654      	mov	r4, sl
 80076f4:	2000      	movs	r0, #0
 80076f6:	f04f 0c0a 	mov.w	ip, #10
 80076fa:	9a07      	ldr	r2, [sp, #28]
 80076fc:	4621      	mov	r1, r4
 80076fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007702:	3b30      	subs	r3, #48	; 0x30
 8007704:	2b09      	cmp	r3, #9
 8007706:	d94e      	bls.n	80077a6 <_svfiprintf_r+0x17e>
 8007708:	b1b0      	cbz	r0, 8007738 <_svfiprintf_r+0x110>
 800770a:	9207      	str	r2, [sp, #28]
 800770c:	e014      	b.n	8007738 <_svfiprintf_r+0x110>
 800770e:	eba0 0308 	sub.w	r3, r0, r8
 8007712:	fa09 f303 	lsl.w	r3, r9, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	46a2      	mov	sl, r4
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	e7d2      	b.n	80076c4 <_svfiprintf_r+0x9c>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9103      	str	r1, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfbb      	ittet	lt
 800772a:	425b      	neglt	r3, r3
 800772c:	f042 0202 	orrlt.w	r2, r2, #2
 8007730:	9307      	strge	r3, [sp, #28]
 8007732:	9307      	strlt	r3, [sp, #28]
 8007734:	bfb8      	it	lt
 8007736:	9204      	strlt	r2, [sp, #16]
 8007738:	7823      	ldrb	r3, [r4, #0]
 800773a:	2b2e      	cmp	r3, #46	; 0x2e
 800773c:	d10c      	bne.n	8007758 <_svfiprintf_r+0x130>
 800773e:	7863      	ldrb	r3, [r4, #1]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d135      	bne.n	80077b0 <_svfiprintf_r+0x188>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	3402      	adds	r4, #2
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfb8      	it	lt
 8007752:	f04f 33ff 	movlt.w	r3, #4294967295
 8007756:	9305      	str	r3, [sp, #20]
 8007758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007824 <_svfiprintf_r+0x1fc>
 800775c:	2203      	movs	r2, #3
 800775e:	4650      	mov	r0, sl
 8007760:	7821      	ldrb	r1, [r4, #0]
 8007762:	f7ff fab3 	bl	8006ccc <memchr>
 8007766:	b140      	cbz	r0, 800777a <_svfiprintf_r+0x152>
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	eba0 000a 	sub.w	r0, r0, sl
 800776e:	fa03 f000 	lsl.w	r0, r3, r0
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	3401      	adds	r4, #1
 8007776:	4303      	orrs	r3, r0
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777e:	2206      	movs	r2, #6
 8007780:	4825      	ldr	r0, [pc, #148]	; (8007818 <_svfiprintf_r+0x1f0>)
 8007782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007786:	f7ff faa1 	bl	8006ccc <memchr>
 800778a:	2800      	cmp	r0, #0
 800778c:	d038      	beq.n	8007800 <_svfiprintf_r+0x1d8>
 800778e:	4b23      	ldr	r3, [pc, #140]	; (800781c <_svfiprintf_r+0x1f4>)
 8007790:	bb1b      	cbnz	r3, 80077da <_svfiprintf_r+0x1b2>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	3307      	adds	r3, #7
 8007796:	f023 0307 	bic.w	r3, r3, #7
 800779a:	3308      	adds	r3, #8
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	4433      	add	r3, r6
 80077a2:	9309      	str	r3, [sp, #36]	; 0x24
 80077a4:	e767      	b.n	8007676 <_svfiprintf_r+0x4e>
 80077a6:	460c      	mov	r4, r1
 80077a8:	2001      	movs	r0, #1
 80077aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ae:	e7a5      	b.n	80076fc <_svfiprintf_r+0xd4>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f04f 0c0a 	mov.w	ip, #10
 80077b6:	4619      	mov	r1, r3
 80077b8:	3401      	adds	r4, #1
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	4620      	mov	r0, r4
 80077be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c2:	3a30      	subs	r2, #48	; 0x30
 80077c4:	2a09      	cmp	r2, #9
 80077c6:	d903      	bls.n	80077d0 <_svfiprintf_r+0x1a8>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0c5      	beq.n	8007758 <_svfiprintf_r+0x130>
 80077cc:	9105      	str	r1, [sp, #20]
 80077ce:	e7c3      	b.n	8007758 <_svfiprintf_r+0x130>
 80077d0:	4604      	mov	r4, r0
 80077d2:	2301      	movs	r3, #1
 80077d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d8:	e7f0      	b.n	80077bc <_svfiprintf_r+0x194>
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4638      	mov	r0, r7
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <_svfiprintf_r+0x1f8>)
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	f7fe f805 	bl	80057f4 <_printf_float>
 80077ea:	1c42      	adds	r2, r0, #1
 80077ec:	4606      	mov	r6, r0
 80077ee:	d1d6      	bne.n	800779e <_svfiprintf_r+0x176>
 80077f0:	89ab      	ldrh	r3, [r5, #12]
 80077f2:	065b      	lsls	r3, r3, #25
 80077f4:	f53f af2c 	bmi.w	8007650 <_svfiprintf_r+0x28>
 80077f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fa:	b01d      	add	sp, #116	; 0x74
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462a      	mov	r2, r5
 8007806:	4638      	mov	r0, r7
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_svfiprintf_r+0x1f8>)
 800780a:	a904      	add	r1, sp, #16
 800780c:	f7fe fa8e 	bl	8005d2c <_printf_i>
 8007810:	e7eb      	b.n	80077ea <_svfiprintf_r+0x1c2>
 8007812:	bf00      	nop
 8007814:	080086ac 	.word	0x080086ac
 8007818:	080086b6 	.word	0x080086b6
 800781c:	080057f5 	.word	0x080057f5
 8007820:	08007571 	.word	0x08007571
 8007824:	080086b2 	.word	0x080086b2

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	2300      	movs	r3, #0
 800782c:	4d05      	ldr	r5, [pc, #20]	; (8007844 <_sbrk_r+0x1c>)
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa f9e8 	bl	8001c08 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	200003c0 	.word	0x200003c0

08007848 <__assert_func>:
 8007848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800784a:	4614      	mov	r4, r2
 800784c:	461a      	mov	r2, r3
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <__assert_func+0x2c>)
 8007850:	4605      	mov	r5, r0
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68d8      	ldr	r0, [r3, #12]
 8007856:	b14c      	cbz	r4, 800786c <__assert_func+0x24>
 8007858:	4b07      	ldr	r3, [pc, #28]	; (8007878 <__assert_func+0x30>)
 800785a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	462b      	mov	r3, r5
 8007862:	4906      	ldr	r1, [pc, #24]	; (800787c <__assert_func+0x34>)
 8007864:	f000 f80e 	bl	8007884 <fiprintf>
 8007868:	f000 faa2 	bl	8007db0 <abort>
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <__assert_func+0x38>)
 800786e:	461c      	mov	r4, r3
 8007870:	e7f3      	b.n	800785a <__assert_func+0x12>
 8007872:	bf00      	nop
 8007874:	2000000c 	.word	0x2000000c
 8007878:	080086bd 	.word	0x080086bd
 800787c:	080086ca 	.word	0x080086ca
 8007880:	080086f8 	.word	0x080086f8

08007884 <fiprintf>:
 8007884:	b40e      	push	{r1, r2, r3}
 8007886:	b503      	push	{r0, r1, lr}
 8007888:	4601      	mov	r1, r0
 800788a:	ab03      	add	r3, sp, #12
 800788c:	4805      	ldr	r0, [pc, #20]	; (80078a4 <fiprintf+0x20>)
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 f88d 	bl	80079b4 <_vfiprintf_r>
 800789a:	b002      	add	sp, #8
 800789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a0:	b003      	add	sp, #12
 80078a2:	4770      	bx	lr
 80078a4:	2000000c 	.word	0x2000000c

080078a8 <__ascii_mbtowc>:
 80078a8:	b082      	sub	sp, #8
 80078aa:	b901      	cbnz	r1, 80078ae <__ascii_mbtowc+0x6>
 80078ac:	a901      	add	r1, sp, #4
 80078ae:	b142      	cbz	r2, 80078c2 <__ascii_mbtowc+0x1a>
 80078b0:	b14b      	cbz	r3, 80078c6 <__ascii_mbtowc+0x1e>
 80078b2:	7813      	ldrb	r3, [r2, #0]
 80078b4:	600b      	str	r3, [r1, #0]
 80078b6:	7812      	ldrb	r2, [r2, #0]
 80078b8:	1e10      	subs	r0, r2, #0
 80078ba:	bf18      	it	ne
 80078bc:	2001      	movne	r0, #1
 80078be:	b002      	add	sp, #8
 80078c0:	4770      	bx	lr
 80078c2:	4610      	mov	r0, r2
 80078c4:	e7fb      	b.n	80078be <__ascii_mbtowc+0x16>
 80078c6:	f06f 0001 	mvn.w	r0, #1
 80078ca:	e7f8      	b.n	80078be <__ascii_mbtowc+0x16>

080078cc <memmove>:
 80078cc:	4288      	cmp	r0, r1
 80078ce:	b510      	push	{r4, lr}
 80078d0:	eb01 0402 	add.w	r4, r1, r2
 80078d4:	d902      	bls.n	80078dc <memmove+0x10>
 80078d6:	4284      	cmp	r4, r0
 80078d8:	4623      	mov	r3, r4
 80078da:	d807      	bhi.n	80078ec <memmove+0x20>
 80078dc:	1e43      	subs	r3, r0, #1
 80078de:	42a1      	cmp	r1, r4
 80078e0:	d008      	beq.n	80078f4 <memmove+0x28>
 80078e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ea:	e7f8      	b.n	80078de <memmove+0x12>
 80078ec:	4601      	mov	r1, r0
 80078ee:	4402      	add	r2, r0
 80078f0:	428a      	cmp	r2, r1
 80078f2:	d100      	bne.n	80078f6 <memmove+0x2a>
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078fe:	e7f7      	b.n	80078f0 <memmove+0x24>

08007900 <__malloc_lock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_lock+0x8>)
 8007902:	f000 bc15 	b.w	8008130 <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	200003c8 	.word	0x200003c8

0800790c <__malloc_unlock>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__malloc_unlock+0x8>)
 800790e:	f000 bc10 	b.w	8008132 <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	200003c8 	.word	0x200003c8

08007918 <_realloc_r>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	4607      	mov	r7, r0
 800791c:	4614      	mov	r4, r2
 800791e:	460e      	mov	r6, r1
 8007920:	b921      	cbnz	r1, 800792c <_realloc_r+0x14>
 8007922:	4611      	mov	r1, r2
 8007924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007928:	f7ff bdc8 	b.w	80074bc <_malloc_r>
 800792c:	b922      	cbnz	r2, 8007938 <_realloc_r+0x20>
 800792e:	f7ff fd79 	bl	8007424 <_free_r>
 8007932:	4625      	mov	r5, r4
 8007934:	4628      	mov	r0, r5
 8007936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007938:	f000 fc60 	bl	80081fc <_malloc_usable_size_r>
 800793c:	42a0      	cmp	r0, r4
 800793e:	d20f      	bcs.n	8007960 <_realloc_r+0x48>
 8007940:	4621      	mov	r1, r4
 8007942:	4638      	mov	r0, r7
 8007944:	f7ff fdba 	bl	80074bc <_malloc_r>
 8007948:	4605      	mov	r5, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	d0f2      	beq.n	8007934 <_realloc_r+0x1c>
 800794e:	4631      	mov	r1, r6
 8007950:	4622      	mov	r2, r4
 8007952:	f7ff f9c9 	bl	8006ce8 <memcpy>
 8007956:	4631      	mov	r1, r6
 8007958:	4638      	mov	r0, r7
 800795a:	f7ff fd63 	bl	8007424 <_free_r>
 800795e:	e7e9      	b.n	8007934 <_realloc_r+0x1c>
 8007960:	4635      	mov	r5, r6
 8007962:	e7e7      	b.n	8007934 <_realloc_r+0x1c>

08007964 <__sfputc_r>:
 8007964:	6893      	ldr	r3, [r2, #8]
 8007966:	b410      	push	{r4}
 8007968:	3b01      	subs	r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	6093      	str	r3, [r2, #8]
 800796e:	da07      	bge.n	8007980 <__sfputc_r+0x1c>
 8007970:	6994      	ldr	r4, [r2, #24]
 8007972:	42a3      	cmp	r3, r4
 8007974:	db01      	blt.n	800797a <__sfputc_r+0x16>
 8007976:	290a      	cmp	r1, #10
 8007978:	d102      	bne.n	8007980 <__sfputc_r+0x1c>
 800797a:	bc10      	pop	{r4}
 800797c:	f000 b94a 	b.w	8007c14 <__swbuf_r>
 8007980:	6813      	ldr	r3, [r2, #0]
 8007982:	1c58      	adds	r0, r3, #1
 8007984:	6010      	str	r0, [r2, #0]
 8007986:	7019      	strb	r1, [r3, #0]
 8007988:	4608      	mov	r0, r1
 800798a:	bc10      	pop	{r4}
 800798c:	4770      	bx	lr

0800798e <__sfputs_r>:
 800798e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007990:	4606      	mov	r6, r0
 8007992:	460f      	mov	r7, r1
 8007994:	4614      	mov	r4, r2
 8007996:	18d5      	adds	r5, r2, r3
 8007998:	42ac      	cmp	r4, r5
 800799a:	d101      	bne.n	80079a0 <__sfputs_r+0x12>
 800799c:	2000      	movs	r0, #0
 800799e:	e007      	b.n	80079b0 <__sfputs_r+0x22>
 80079a0:	463a      	mov	r2, r7
 80079a2:	4630      	mov	r0, r6
 80079a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a8:	f7ff ffdc 	bl	8007964 <__sfputc_r>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d1f3      	bne.n	8007998 <__sfputs_r+0xa>
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079b4 <_vfiprintf_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	460d      	mov	r5, r1
 80079ba:	4614      	mov	r4, r2
 80079bc:	4698      	mov	r8, r3
 80079be:	4606      	mov	r6, r0
 80079c0:	b09d      	sub	sp, #116	; 0x74
 80079c2:	b118      	cbz	r0, 80079cc <_vfiprintf_r+0x18>
 80079c4:	6983      	ldr	r3, [r0, #24]
 80079c6:	b90b      	cbnz	r3, 80079cc <_vfiprintf_r+0x18>
 80079c8:	f000 fb14 	bl	8007ff4 <__sinit>
 80079cc:	4b89      	ldr	r3, [pc, #548]	; (8007bf4 <_vfiprintf_r+0x240>)
 80079ce:	429d      	cmp	r5, r3
 80079d0:	d11b      	bne.n	8007a0a <_vfiprintf_r+0x56>
 80079d2:	6875      	ldr	r5, [r6, #4]
 80079d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d6:	07d9      	lsls	r1, r3, #31
 80079d8:	d405      	bmi.n	80079e6 <_vfiprintf_r+0x32>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	059a      	lsls	r2, r3, #22
 80079de:	d402      	bmi.n	80079e6 <_vfiprintf_r+0x32>
 80079e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e2:	f000 fba5 	bl	8008130 <__retarget_lock_acquire_recursive>
 80079e6:	89ab      	ldrh	r3, [r5, #12]
 80079e8:	071b      	lsls	r3, r3, #28
 80079ea:	d501      	bpl.n	80079f0 <_vfiprintf_r+0x3c>
 80079ec:	692b      	ldr	r3, [r5, #16]
 80079ee:	b9eb      	cbnz	r3, 8007a2c <_vfiprintf_r+0x78>
 80079f0:	4629      	mov	r1, r5
 80079f2:	4630      	mov	r0, r6
 80079f4:	f000 f96e 	bl	8007cd4 <__swsetup_r>
 80079f8:	b1c0      	cbz	r0, 8007a2c <_vfiprintf_r+0x78>
 80079fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079fc:	07dc      	lsls	r4, r3, #31
 80079fe:	d50e      	bpl.n	8007a1e <_vfiprintf_r+0x6a>
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	b01d      	add	sp, #116	; 0x74
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	4b7b      	ldr	r3, [pc, #492]	; (8007bf8 <_vfiprintf_r+0x244>)
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	d101      	bne.n	8007a14 <_vfiprintf_r+0x60>
 8007a10:	68b5      	ldr	r5, [r6, #8]
 8007a12:	e7df      	b.n	80079d4 <_vfiprintf_r+0x20>
 8007a14:	4b79      	ldr	r3, [pc, #484]	; (8007bfc <_vfiprintf_r+0x248>)
 8007a16:	429d      	cmp	r5, r3
 8007a18:	bf08      	it	eq
 8007a1a:	68f5      	ldreq	r5, [r6, #12]
 8007a1c:	e7da      	b.n	80079d4 <_vfiprintf_r+0x20>
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	0598      	lsls	r0, r3, #22
 8007a22:	d4ed      	bmi.n	8007a00 <_vfiprintf_r+0x4c>
 8007a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a26:	f000 fb84 	bl	8008132 <__retarget_lock_release_recursive>
 8007a2a:	e7e9      	b.n	8007a00 <_vfiprintf_r+0x4c>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a30:	2320      	movs	r3, #32
 8007a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a36:	2330      	movs	r3, #48	; 0x30
 8007a38:	f04f 0901 	mov.w	r9, #1
 8007a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c00 <_vfiprintf_r+0x24c>
 8007a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a48:	4623      	mov	r3, r4
 8007a4a:	469a      	mov	sl, r3
 8007a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a50:	b10a      	cbz	r2, 8007a56 <_vfiprintf_r+0xa2>
 8007a52:	2a25      	cmp	r2, #37	; 0x25
 8007a54:	d1f9      	bne.n	8007a4a <_vfiprintf_r+0x96>
 8007a56:	ebba 0b04 	subs.w	fp, sl, r4
 8007a5a:	d00b      	beq.n	8007a74 <_vfiprintf_r+0xc0>
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff ff93 	bl	800798e <__sfputs_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f000 80aa 	beq.w	8007bc2 <_vfiprintf_r+0x20e>
 8007a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a70:	445a      	add	r2, fp
 8007a72:	9209      	str	r2, [sp, #36]	; 0x24
 8007a74:	f89a 3000 	ldrb.w	r3, [sl]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80a2 	beq.w	8007bc2 <_vfiprintf_r+0x20e>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a88:	f10a 0a01 	add.w	sl, sl, #1
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a94:	931a      	str	r3, [sp, #104]	; 0x68
 8007a96:	4654      	mov	r4, sl
 8007a98:	2205      	movs	r2, #5
 8007a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9e:	4858      	ldr	r0, [pc, #352]	; (8007c00 <_vfiprintf_r+0x24c>)
 8007aa0:	f7ff f914 	bl	8006ccc <memchr>
 8007aa4:	9a04      	ldr	r2, [sp, #16]
 8007aa6:	b9d8      	cbnz	r0, 8007ae0 <_vfiprintf_r+0x12c>
 8007aa8:	06d1      	lsls	r1, r2, #27
 8007aaa:	bf44      	itt	mi
 8007aac:	2320      	movmi	r3, #32
 8007aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab2:	0713      	lsls	r3, r2, #28
 8007ab4:	bf44      	itt	mi
 8007ab6:	232b      	movmi	r3, #43	; 0x2b
 8007ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007abc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac2:	d015      	beq.n	8007af0 <_vfiprintf_r+0x13c>
 8007ac4:	4654      	mov	r4, sl
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f04f 0c0a 	mov.w	ip, #10
 8007acc:	9a07      	ldr	r2, [sp, #28]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad4:	3b30      	subs	r3, #48	; 0x30
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	d94e      	bls.n	8007b78 <_vfiprintf_r+0x1c4>
 8007ada:	b1b0      	cbz	r0, 8007b0a <_vfiprintf_r+0x156>
 8007adc:	9207      	str	r2, [sp, #28]
 8007ade:	e014      	b.n	8007b0a <_vfiprintf_r+0x156>
 8007ae0:	eba0 0308 	sub.w	r3, r0, r8
 8007ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	46a2      	mov	sl, r4
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	e7d2      	b.n	8007a96 <_vfiprintf_r+0xe2>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	1d19      	adds	r1, r3, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	9103      	str	r1, [sp, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfbb      	ittet	lt
 8007afc:	425b      	neglt	r3, r3
 8007afe:	f042 0202 	orrlt.w	r2, r2, #2
 8007b02:	9307      	strge	r3, [sp, #28]
 8007b04:	9307      	strlt	r3, [sp, #28]
 8007b06:	bfb8      	it	lt
 8007b08:	9204      	strlt	r2, [sp, #16]
 8007b0a:	7823      	ldrb	r3, [r4, #0]
 8007b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b0e:	d10c      	bne.n	8007b2a <_vfiprintf_r+0x176>
 8007b10:	7863      	ldrb	r3, [r4, #1]
 8007b12:	2b2a      	cmp	r3, #42	; 0x2a
 8007b14:	d135      	bne.n	8007b82 <_vfiprintf_r+0x1ce>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	3402      	adds	r4, #2
 8007b1a:	1d1a      	adds	r2, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	9203      	str	r2, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfb8      	it	lt
 8007b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c10 <_vfiprintf_r+0x25c>
 8007b2e:	2203      	movs	r2, #3
 8007b30:	4650      	mov	r0, sl
 8007b32:	7821      	ldrb	r1, [r4, #0]
 8007b34:	f7ff f8ca 	bl	8006ccc <memchr>
 8007b38:	b140      	cbz	r0, 8007b4c <_vfiprintf_r+0x198>
 8007b3a:	2340      	movs	r3, #64	; 0x40
 8007b3c:	eba0 000a 	sub.w	r0, r0, sl
 8007b40:	fa03 f000 	lsl.w	r0, r3, r0
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	3401      	adds	r4, #1
 8007b48:	4303      	orrs	r3, r0
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	2206      	movs	r2, #6
 8007b52:	482c      	ldr	r0, [pc, #176]	; (8007c04 <_vfiprintf_r+0x250>)
 8007b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b58:	f7ff f8b8 	bl	8006ccc <memchr>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d03f      	beq.n	8007be0 <_vfiprintf_r+0x22c>
 8007b60:	4b29      	ldr	r3, [pc, #164]	; (8007c08 <_vfiprintf_r+0x254>)
 8007b62:	bb1b      	cbnz	r3, 8007bac <_vfiprintf_r+0x1f8>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	3307      	adds	r3, #7
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b72:	443b      	add	r3, r7
 8007b74:	9309      	str	r3, [sp, #36]	; 0x24
 8007b76:	e767      	b.n	8007a48 <_vfiprintf_r+0x94>
 8007b78:	460c      	mov	r4, r1
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b80:	e7a5      	b.n	8007ace <_vfiprintf_r+0x11a>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f04f 0c0a 	mov.w	ip, #10
 8007b88:	4619      	mov	r1, r3
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b94:	3a30      	subs	r2, #48	; 0x30
 8007b96:	2a09      	cmp	r2, #9
 8007b98:	d903      	bls.n	8007ba2 <_vfiprintf_r+0x1ee>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0c5      	beq.n	8007b2a <_vfiprintf_r+0x176>
 8007b9e:	9105      	str	r1, [sp, #20]
 8007ba0:	e7c3      	b.n	8007b2a <_vfiprintf_r+0x176>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007baa:	e7f0      	b.n	8007b8e <_vfiprintf_r+0x1da>
 8007bac:	ab03      	add	r3, sp, #12
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <_vfiprintf_r+0x258>)
 8007bb6:	a904      	add	r1, sp, #16
 8007bb8:	f7fd fe1c 	bl	80057f4 <_printf_float>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	1c78      	adds	r0, r7, #1
 8007bc0:	d1d6      	bne.n	8007b70 <_vfiprintf_r+0x1bc>
 8007bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc4:	07d9      	lsls	r1, r3, #31
 8007bc6:	d405      	bmi.n	8007bd4 <_vfiprintf_r+0x220>
 8007bc8:	89ab      	ldrh	r3, [r5, #12]
 8007bca:	059a      	lsls	r2, r3, #22
 8007bcc:	d402      	bmi.n	8007bd4 <_vfiprintf_r+0x220>
 8007bce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd0:	f000 faaf 	bl	8008132 <__retarget_lock_release_recursive>
 8007bd4:	89ab      	ldrh	r3, [r5, #12]
 8007bd6:	065b      	lsls	r3, r3, #25
 8007bd8:	f53f af12 	bmi.w	8007a00 <_vfiprintf_r+0x4c>
 8007bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bde:	e711      	b.n	8007a04 <_vfiprintf_r+0x50>
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <_vfiprintf_r+0x258>)
 8007bea:	a904      	add	r1, sp, #16
 8007bec:	f7fe f89e 	bl	8005d2c <_printf_i>
 8007bf0:	e7e4      	b.n	8007bbc <_vfiprintf_r+0x208>
 8007bf2:	bf00      	nop
 8007bf4:	08008824 	.word	0x08008824
 8007bf8:	08008844 	.word	0x08008844
 8007bfc:	08008804 	.word	0x08008804
 8007c00:	080086ac 	.word	0x080086ac
 8007c04:	080086b6 	.word	0x080086b6
 8007c08:	080057f5 	.word	0x080057f5
 8007c0c:	0800798f 	.word	0x0800798f
 8007c10:	080086b2 	.word	0x080086b2

08007c14 <__swbuf_r>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	460e      	mov	r6, r1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	b118      	cbz	r0, 8007c26 <__swbuf_r+0x12>
 8007c1e:	6983      	ldr	r3, [r0, #24]
 8007c20:	b90b      	cbnz	r3, 8007c26 <__swbuf_r+0x12>
 8007c22:	f000 f9e7 	bl	8007ff4 <__sinit>
 8007c26:	4b21      	ldr	r3, [pc, #132]	; (8007cac <__swbuf_r+0x98>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d12b      	bne.n	8007c84 <__swbuf_r+0x70>
 8007c2c:	686c      	ldr	r4, [r5, #4]
 8007c2e:	69a3      	ldr	r3, [r4, #24]
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	071a      	lsls	r2, r3, #28
 8007c36:	d52f      	bpl.n	8007c98 <__swbuf_r+0x84>
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	b36b      	cbz	r3, 8007c98 <__swbuf_r+0x84>
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	b2f6      	uxtb	r6, r6
 8007c42:	1ac0      	subs	r0, r0, r3
 8007c44:	6963      	ldr	r3, [r4, #20]
 8007c46:	4637      	mov	r7, r6
 8007c48:	4283      	cmp	r3, r0
 8007c4a:	dc04      	bgt.n	8007c56 <__swbuf_r+0x42>
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f93c 	bl	8007ecc <_fflush_r>
 8007c54:	bb30      	cbnz	r0, 8007ca4 <__swbuf_r+0x90>
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	3001      	adds	r0, #1
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	60a3      	str	r3, [r4, #8]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	6022      	str	r2, [r4, #0]
 8007c64:	701e      	strb	r6, [r3, #0]
 8007c66:	6963      	ldr	r3, [r4, #20]
 8007c68:	4283      	cmp	r3, r0
 8007c6a:	d004      	beq.n	8007c76 <__swbuf_r+0x62>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	07db      	lsls	r3, r3, #31
 8007c70:	d506      	bpl.n	8007c80 <__swbuf_r+0x6c>
 8007c72:	2e0a      	cmp	r6, #10
 8007c74:	d104      	bne.n	8007c80 <__swbuf_r+0x6c>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f927 	bl	8007ecc <_fflush_r>
 8007c7e:	b988      	cbnz	r0, 8007ca4 <__swbuf_r+0x90>
 8007c80:	4638      	mov	r0, r7
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <__swbuf_r+0x9c>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d101      	bne.n	8007c8e <__swbuf_r+0x7a>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	e7cf      	b.n	8007c2e <__swbuf_r+0x1a>
 8007c8e:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <__swbuf_r+0xa0>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	bf08      	it	eq
 8007c94:	68ec      	ldreq	r4, [r5, #12]
 8007c96:	e7ca      	b.n	8007c2e <__swbuf_r+0x1a>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f81a 	bl	8007cd4 <__swsetup_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0cb      	beq.n	8007c3c <__swbuf_r+0x28>
 8007ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca8:	e7ea      	b.n	8007c80 <__swbuf_r+0x6c>
 8007caa:	bf00      	nop
 8007cac:	08008824 	.word	0x08008824
 8007cb0:	08008844 	.word	0x08008844
 8007cb4:	08008804 	.word	0x08008804

08007cb8 <__ascii_wctomb>:
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4608      	mov	r0, r1
 8007cbc:	b141      	cbz	r1, 8007cd0 <__ascii_wctomb+0x18>
 8007cbe:	2aff      	cmp	r2, #255	; 0xff
 8007cc0:	d904      	bls.n	8007ccc <__ascii_wctomb+0x14>
 8007cc2:	228a      	movs	r2, #138	; 0x8a
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	4770      	bx	lr
 8007ccc:	2001      	movs	r0, #1
 8007cce:	700a      	strb	r2, [r1, #0]
 8007cd0:	4770      	bx	lr
	...

08007cd4 <__swsetup_r>:
 8007cd4:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <__swsetup_r+0xcc>)
 8007cd6:	b570      	push	{r4, r5, r6, lr}
 8007cd8:	681d      	ldr	r5, [r3, #0]
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	b125      	cbz	r5, 8007cea <__swsetup_r+0x16>
 8007ce0:	69ab      	ldr	r3, [r5, #24]
 8007ce2:	b913      	cbnz	r3, 8007cea <__swsetup_r+0x16>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 f985 	bl	8007ff4 <__sinit>
 8007cea:	4b2e      	ldr	r3, [pc, #184]	; (8007da4 <__swsetup_r+0xd0>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d10f      	bne.n	8007d10 <__swsetup_r+0x3c>
 8007cf0:	686c      	ldr	r4, [r5, #4]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf8:	0719      	lsls	r1, r3, #28
 8007cfa:	d42c      	bmi.n	8007d56 <__swsetup_r+0x82>
 8007cfc:	06dd      	lsls	r5, r3, #27
 8007cfe:	d411      	bmi.n	8007d24 <__swsetup_r+0x50>
 8007d00:	2309      	movs	r3, #9
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	e03e      	b.n	8007d8e <__swsetup_r+0xba>
 8007d10:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <__swsetup_r+0xd4>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d101      	bne.n	8007d1a <__swsetup_r+0x46>
 8007d16:	68ac      	ldr	r4, [r5, #8]
 8007d18:	e7eb      	b.n	8007cf2 <__swsetup_r+0x1e>
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <__swsetup_r+0xd8>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	bf08      	it	eq
 8007d20:	68ec      	ldreq	r4, [r5, #12]
 8007d22:	e7e6      	b.n	8007cf2 <__swsetup_r+0x1e>
 8007d24:	0758      	lsls	r0, r3, #29
 8007d26:	d512      	bpl.n	8007d4e <__swsetup_r+0x7a>
 8007d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d2a:	b141      	cbz	r1, 8007d3e <__swsetup_r+0x6a>
 8007d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <__swsetup_r+0x66>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff fb75 	bl	8007424 <_free_r>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	2300      	movs	r3, #0
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0308 	orr.w	r3, r3, #8
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	b94b      	cbnz	r3, 8007d6e <__swsetup_r+0x9a>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d64:	d003      	beq.n	8007d6e <__swsetup_r+0x9a>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f000 fa07 	bl	800817c <__smakebuf_r>
 8007d6e:	89a0      	ldrh	r0, [r4, #12]
 8007d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d74:	f010 0301 	ands.w	r3, r0, #1
 8007d78:	d00a      	beq.n	8007d90 <__swsetup_r+0xbc>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60a3      	str	r3, [r4, #8]
 8007d7e:	6963      	ldr	r3, [r4, #20]
 8007d80:	425b      	negs	r3, r3
 8007d82:	61a3      	str	r3, [r4, #24]
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	b943      	cbnz	r3, 8007d9a <__swsetup_r+0xc6>
 8007d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d8c:	d1ba      	bne.n	8007d04 <__swsetup_r+0x30>
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	0781      	lsls	r1, r0, #30
 8007d92:	bf58      	it	pl
 8007d94:	6963      	ldrpl	r3, [r4, #20]
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	e7f4      	b.n	8007d84 <__swsetup_r+0xb0>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e7f7      	b.n	8007d8e <__swsetup_r+0xba>
 8007d9e:	bf00      	nop
 8007da0:	2000000c 	.word	0x2000000c
 8007da4:	08008824 	.word	0x08008824
 8007da8:	08008844 	.word	0x08008844
 8007dac:	08008804 	.word	0x08008804

08007db0 <abort>:
 8007db0:	2006      	movs	r0, #6
 8007db2:	b508      	push	{r3, lr}
 8007db4:	f000 fa52 	bl	800825c <raise>
 8007db8:	2001      	movs	r0, #1
 8007dba:	f7f9 feb2 	bl	8001b22 <_exit>
	...

08007dc0 <__sflush_r>:
 8007dc0:	898a      	ldrh	r2, [r1, #12]
 8007dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	0710      	lsls	r0, r2, #28
 8007dca:	460c      	mov	r4, r1
 8007dcc:	d458      	bmi.n	8007e80 <__sflush_r+0xc0>
 8007dce:	684b      	ldr	r3, [r1, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dc05      	bgt.n	8007de0 <__sflush_r+0x20>
 8007dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dc02      	bgt.n	8007de0 <__sflush_r+0x20>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d0f9      	beq.n	8007dda <__sflush_r+0x1a>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dec:	682f      	ldr	r7, [r5, #0]
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	d032      	beq.n	8007e58 <__sflush_r+0x98>
 8007df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	075a      	lsls	r2, r3, #29
 8007df8:	d505      	bpl.n	8007e06 <__sflush_r+0x46>
 8007dfa:	6863      	ldr	r3, [r4, #4]
 8007dfc:	1ac0      	subs	r0, r0, r3
 8007dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e00:	b10b      	cbz	r3, 8007e06 <__sflush_r+0x46>
 8007e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	2300      	movs	r3, #0
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	6a21      	ldr	r1, [r4, #32]
 8007e10:	47b0      	blx	r6
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	d106      	bne.n	8007e26 <__sflush_r+0x66>
 8007e18:	6829      	ldr	r1, [r5, #0]
 8007e1a:	291d      	cmp	r1, #29
 8007e1c:	d82c      	bhi.n	8007e78 <__sflush_r+0xb8>
 8007e1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ec8 <__sflush_r+0x108>)
 8007e20:	40ca      	lsrs	r2, r1
 8007e22:	07d6      	lsls	r6, r2, #31
 8007e24:	d528      	bpl.n	8007e78 <__sflush_r+0xb8>
 8007e26:	2200      	movs	r2, #0
 8007e28:	6062      	str	r2, [r4, #4]
 8007e2a:	6922      	ldr	r2, [r4, #16]
 8007e2c:	04d9      	lsls	r1, r3, #19
 8007e2e:	6022      	str	r2, [r4, #0]
 8007e30:	d504      	bpl.n	8007e3c <__sflush_r+0x7c>
 8007e32:	1c42      	adds	r2, r0, #1
 8007e34:	d101      	bne.n	8007e3a <__sflush_r+0x7a>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	b903      	cbnz	r3, 8007e3c <__sflush_r+0x7c>
 8007e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3e:	602f      	str	r7, [r5, #0]
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d0ca      	beq.n	8007dda <__sflush_r+0x1a>
 8007e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d002      	beq.n	8007e52 <__sflush_r+0x92>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f7ff fae9 	bl	8007424 <_free_r>
 8007e52:	2000      	movs	r0, #0
 8007e54:	6360      	str	r0, [r4, #52]	; 0x34
 8007e56:	e7c1      	b.n	8007ddc <__sflush_r+0x1c>
 8007e58:	6a21      	ldr	r1, [r4, #32]
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b0      	blx	r6
 8007e60:	1c41      	adds	r1, r0, #1
 8007e62:	d1c7      	bne.n	8007df4 <__sflush_r+0x34>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c4      	beq.n	8007df4 <__sflush_r+0x34>
 8007e6a:	2b1d      	cmp	r3, #29
 8007e6c:	d001      	beq.n	8007e72 <__sflush_r+0xb2>
 8007e6e:	2b16      	cmp	r3, #22
 8007e70:	d101      	bne.n	8007e76 <__sflush_r+0xb6>
 8007e72:	602f      	str	r7, [r5, #0]
 8007e74:	e7b1      	b.n	8007dda <__sflush_r+0x1a>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	e7ad      	b.n	8007ddc <__sflush_r+0x1c>
 8007e80:	690f      	ldr	r7, [r1, #16]
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	d0a9      	beq.n	8007dda <__sflush_r+0x1a>
 8007e86:	0793      	lsls	r3, r2, #30
 8007e88:	bf18      	it	ne
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	680e      	ldr	r6, [r1, #0]
 8007e8e:	bf08      	it	eq
 8007e90:	694b      	ldreq	r3, [r1, #20]
 8007e92:	eba6 0807 	sub.w	r8, r6, r7
 8007e96:	600f      	str	r7, [r1, #0]
 8007e98:	608b      	str	r3, [r1, #8]
 8007e9a:	f1b8 0f00 	cmp.w	r8, #0
 8007e9e:	dd9c      	ble.n	8007dda <__sflush_r+0x1a>
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	463a      	mov	r2, r7
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	6a21      	ldr	r1, [r4, #32]
 8007ea8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eaa:	47b0      	blx	r6
 8007eac:	2800      	cmp	r0, #0
 8007eae:	dc06      	bgt.n	8007ebe <__sflush_r+0xfe>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	e78e      	b.n	8007ddc <__sflush_r+0x1c>
 8007ebe:	4407      	add	r7, r0
 8007ec0:	eba8 0800 	sub.w	r8, r8, r0
 8007ec4:	e7e9      	b.n	8007e9a <__sflush_r+0xda>
 8007ec6:	bf00      	nop
 8007ec8:	20400001 	.word	0x20400001

08007ecc <_fflush_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	690b      	ldr	r3, [r1, #16]
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b913      	cbnz	r3, 8007edc <_fflush_r+0x10>
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	4628      	mov	r0, r5
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	b118      	cbz	r0, 8007ee6 <_fflush_r+0x1a>
 8007ede:	6983      	ldr	r3, [r0, #24]
 8007ee0:	b90b      	cbnz	r3, 8007ee6 <_fflush_r+0x1a>
 8007ee2:	f000 f887 	bl	8007ff4 <__sinit>
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <_fflush_r+0x6c>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	d11b      	bne.n	8007f24 <_fflush_r+0x58>
 8007eec:	686c      	ldr	r4, [r5, #4]
 8007eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0ef      	beq.n	8007ed6 <_fflush_r+0xa>
 8007ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ef8:	07d0      	lsls	r0, r2, #31
 8007efa:	d404      	bmi.n	8007f06 <_fflush_r+0x3a>
 8007efc:	0599      	lsls	r1, r3, #22
 8007efe:	d402      	bmi.n	8007f06 <_fflush_r+0x3a>
 8007f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f02:	f000 f915 	bl	8008130 <__retarget_lock_acquire_recursive>
 8007f06:	4628      	mov	r0, r5
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f7ff ff59 	bl	8007dc0 <__sflush_r>
 8007f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f10:	4605      	mov	r5, r0
 8007f12:	07da      	lsls	r2, r3, #31
 8007f14:	d4e0      	bmi.n	8007ed8 <_fflush_r+0xc>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	059b      	lsls	r3, r3, #22
 8007f1a:	d4dd      	bmi.n	8007ed8 <_fflush_r+0xc>
 8007f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1e:	f000 f908 	bl	8008132 <__retarget_lock_release_recursive>
 8007f22:	e7d9      	b.n	8007ed8 <_fflush_r+0xc>
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <_fflush_r+0x70>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d101      	bne.n	8007f2e <_fflush_r+0x62>
 8007f2a:	68ac      	ldr	r4, [r5, #8]
 8007f2c:	e7df      	b.n	8007eee <_fflush_r+0x22>
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <_fflush_r+0x74>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	bf08      	it	eq
 8007f34:	68ec      	ldreq	r4, [r5, #12]
 8007f36:	e7da      	b.n	8007eee <_fflush_r+0x22>
 8007f38:	08008824 	.word	0x08008824
 8007f3c:	08008844 	.word	0x08008844
 8007f40:	08008804 	.word	0x08008804

08007f44 <std>:
 8007f44:	2300      	movs	r3, #0
 8007f46:	b510      	push	{r4, lr}
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f52:	6083      	str	r3, [r0, #8]
 8007f54:	8181      	strh	r1, [r0, #12]
 8007f56:	6643      	str	r3, [r0, #100]	; 0x64
 8007f58:	81c2      	strh	r2, [r0, #14]
 8007f5a:	6183      	str	r3, [r0, #24]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	2208      	movs	r2, #8
 8007f60:	305c      	adds	r0, #92	; 0x5c
 8007f62:	f7fd fba1 	bl	80056a8 <memset>
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <std+0x38>)
 8007f68:	6224      	str	r4, [r4, #32]
 8007f6a:	6263      	str	r3, [r4, #36]	; 0x24
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <std+0x3c>)
 8007f6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <std+0x40>)
 8007f72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f74:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <std+0x44>)
 8007f76:	6323      	str	r3, [r4, #48]	; 0x30
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08008295 	.word	0x08008295
 8007f80:	080082b7 	.word	0x080082b7
 8007f84:	080082ef 	.word	0x080082ef
 8007f88:	08008313 	.word	0x08008313

08007f8c <_cleanup_r>:
 8007f8c:	4901      	ldr	r1, [pc, #4]	; (8007f94 <_cleanup_r+0x8>)
 8007f8e:	f000 b8af 	b.w	80080f0 <_fwalk_reent>
 8007f92:	bf00      	nop
 8007f94:	08007ecd 	.word	0x08007ecd

08007f98 <__sfmoreglue>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	2568      	movs	r5, #104	; 0x68
 8007f9c:	1e4a      	subs	r2, r1, #1
 8007f9e:	4355      	muls	r5, r2
 8007fa0:	460e      	mov	r6, r1
 8007fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fa6:	f7ff fa89 	bl	80074bc <_malloc_r>
 8007faa:	4604      	mov	r4, r0
 8007fac:	b140      	cbz	r0, 8007fc0 <__sfmoreglue+0x28>
 8007fae:	2100      	movs	r1, #0
 8007fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8007fb4:	300c      	adds	r0, #12
 8007fb6:	60a0      	str	r0, [r4, #8]
 8007fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fbc:	f7fd fb74 	bl	80056a8 <memset>
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}

08007fc4 <__sfp_lock_acquire>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__sfp_lock_acquire+0x8>)
 8007fc6:	f000 b8b3 	b.w	8008130 <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200003cc 	.word	0x200003cc

08007fd0 <__sfp_lock_release>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sfp_lock_release+0x8>)
 8007fd2:	f000 b8ae 	b.w	8008132 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200003cc 	.word	0x200003cc

08007fdc <__sinit_lock_acquire>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__sinit_lock_acquire+0x8>)
 8007fde:	f000 b8a7 	b.w	8008130 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	200003c7 	.word	0x200003c7

08007fe8 <__sinit_lock_release>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sinit_lock_release+0x8>)
 8007fea:	f000 b8a2 	b.w	8008132 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	200003c7 	.word	0x200003c7

08007ff4 <__sinit>:
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	f7ff fff0 	bl	8007fdc <__sinit_lock_acquire>
 8007ffc:	69a3      	ldr	r3, [r4, #24]
 8007ffe:	b11b      	cbz	r3, 8008008 <__sinit+0x14>
 8008000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008004:	f7ff bff0 	b.w	8007fe8 <__sinit_lock_release>
 8008008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800800c:	6523      	str	r3, [r4, #80]	; 0x50
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <__sinit+0x68>)
 8008010:	4a13      	ldr	r2, [pc, #76]	; (8008060 <__sinit+0x6c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	62a2      	str	r2, [r4, #40]	; 0x28
 8008016:	42a3      	cmp	r3, r4
 8008018:	bf08      	it	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	4620      	mov	r0, r4
 800801e:	bf08      	it	eq
 8008020:	61a3      	streq	r3, [r4, #24]
 8008022:	f000 f81f 	bl	8008064 <__sfp>
 8008026:	6060      	str	r0, [r4, #4]
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f81b 	bl	8008064 <__sfp>
 800802e:	60a0      	str	r0, [r4, #8]
 8008030:	4620      	mov	r0, r4
 8008032:	f000 f817 	bl	8008064 <__sfp>
 8008036:	2200      	movs	r2, #0
 8008038:	2104      	movs	r1, #4
 800803a:	60e0      	str	r0, [r4, #12]
 800803c:	6860      	ldr	r0, [r4, #4]
 800803e:	f7ff ff81 	bl	8007f44 <std>
 8008042:	2201      	movs	r2, #1
 8008044:	2109      	movs	r1, #9
 8008046:	68a0      	ldr	r0, [r4, #8]
 8008048:	f7ff ff7c 	bl	8007f44 <std>
 800804c:	2202      	movs	r2, #2
 800804e:	2112      	movs	r1, #18
 8008050:	68e0      	ldr	r0, [r4, #12]
 8008052:	f7ff ff77 	bl	8007f44 <std>
 8008056:	2301      	movs	r3, #1
 8008058:	61a3      	str	r3, [r4, #24]
 800805a:	e7d1      	b.n	8008000 <__sinit+0xc>
 800805c:	08008480 	.word	0x08008480
 8008060:	08007f8d 	.word	0x08007f8d

08008064 <__sfp>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	4607      	mov	r7, r0
 8008068:	f7ff ffac 	bl	8007fc4 <__sfp_lock_acquire>
 800806c:	4b1e      	ldr	r3, [pc, #120]	; (80080e8 <__sfp+0x84>)
 800806e:	681e      	ldr	r6, [r3, #0]
 8008070:	69b3      	ldr	r3, [r6, #24]
 8008072:	b913      	cbnz	r3, 800807a <__sfp+0x16>
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff ffbd 	bl	8007ff4 <__sinit>
 800807a:	3648      	adds	r6, #72	; 0x48
 800807c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008080:	3b01      	subs	r3, #1
 8008082:	d503      	bpl.n	800808c <__sfp+0x28>
 8008084:	6833      	ldr	r3, [r6, #0]
 8008086:	b30b      	cbz	r3, 80080cc <__sfp+0x68>
 8008088:	6836      	ldr	r6, [r6, #0]
 800808a:	e7f7      	b.n	800807c <__sfp+0x18>
 800808c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008090:	b9d5      	cbnz	r5, 80080c8 <__sfp+0x64>
 8008092:	4b16      	ldr	r3, [pc, #88]	; (80080ec <__sfp+0x88>)
 8008094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008098:	60e3      	str	r3, [r4, #12]
 800809a:	6665      	str	r5, [r4, #100]	; 0x64
 800809c:	f000 f847 	bl	800812e <__retarget_lock_init_recursive>
 80080a0:	f7ff ff96 	bl	8007fd0 <__sfp_lock_release>
 80080a4:	2208      	movs	r2, #8
 80080a6:	4629      	mov	r1, r5
 80080a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080b0:	6025      	str	r5, [r4, #0]
 80080b2:	61a5      	str	r5, [r4, #24]
 80080b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080b8:	f7fd faf6 	bl	80056a8 <memset>
 80080bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080c4:	4620      	mov	r0, r4
 80080c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c8:	3468      	adds	r4, #104	; 0x68
 80080ca:	e7d9      	b.n	8008080 <__sfp+0x1c>
 80080cc:	2104      	movs	r1, #4
 80080ce:	4638      	mov	r0, r7
 80080d0:	f7ff ff62 	bl	8007f98 <__sfmoreglue>
 80080d4:	4604      	mov	r4, r0
 80080d6:	6030      	str	r0, [r6, #0]
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1d5      	bne.n	8008088 <__sfp+0x24>
 80080dc:	f7ff ff78 	bl	8007fd0 <__sfp_lock_release>
 80080e0:	230c      	movs	r3, #12
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	e7ee      	b.n	80080c4 <__sfp+0x60>
 80080e6:	bf00      	nop
 80080e8:	08008480 	.word	0x08008480
 80080ec:	ffff0001 	.word	0xffff0001

080080f0 <_fwalk_reent>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	4606      	mov	r6, r0
 80080f6:	4688      	mov	r8, r1
 80080f8:	2700      	movs	r7, #0
 80080fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008102:	f1b9 0901 	subs.w	r9, r9, #1
 8008106:	d505      	bpl.n	8008114 <_fwalk_reent+0x24>
 8008108:	6824      	ldr	r4, [r4, #0]
 800810a:	2c00      	cmp	r4, #0
 800810c:	d1f7      	bne.n	80080fe <_fwalk_reent+0xe>
 800810e:	4638      	mov	r0, r7
 8008110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008114:	89ab      	ldrh	r3, [r5, #12]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d907      	bls.n	800812a <_fwalk_reent+0x3a>
 800811a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800811e:	3301      	adds	r3, #1
 8008120:	d003      	beq.n	800812a <_fwalk_reent+0x3a>
 8008122:	4629      	mov	r1, r5
 8008124:	4630      	mov	r0, r6
 8008126:	47c0      	blx	r8
 8008128:	4307      	orrs	r7, r0
 800812a:	3568      	adds	r5, #104	; 0x68
 800812c:	e7e9      	b.n	8008102 <_fwalk_reent+0x12>

0800812e <__retarget_lock_init_recursive>:
 800812e:	4770      	bx	lr

08008130 <__retarget_lock_acquire_recursive>:
 8008130:	4770      	bx	lr

08008132 <__retarget_lock_release_recursive>:
 8008132:	4770      	bx	lr

08008134 <__swhatbuf_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	460e      	mov	r6, r1
 8008138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813c:	4614      	mov	r4, r2
 800813e:	2900      	cmp	r1, #0
 8008140:	461d      	mov	r5, r3
 8008142:	b096      	sub	sp, #88	; 0x58
 8008144:	da07      	bge.n	8008156 <__swhatbuf_r+0x22>
 8008146:	2300      	movs	r3, #0
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	89b3      	ldrh	r3, [r6, #12]
 800814c:	061a      	lsls	r2, r3, #24
 800814e:	d410      	bmi.n	8008172 <__swhatbuf_r+0x3e>
 8008150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008154:	e00e      	b.n	8008174 <__swhatbuf_r+0x40>
 8008156:	466a      	mov	r2, sp
 8008158:	f000 f902 	bl	8008360 <_fstat_r>
 800815c:	2800      	cmp	r0, #0
 800815e:	dbf2      	blt.n	8008146 <__swhatbuf_r+0x12>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008166:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800816a:	425a      	negs	r2, r3
 800816c:	415a      	adcs	r2, r3
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	e7ee      	b.n	8008150 <__swhatbuf_r+0x1c>
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	2000      	movs	r0, #0
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	b016      	add	sp, #88	; 0x58
 800817a:	bd70      	pop	{r4, r5, r6, pc}

0800817c <__smakebuf_r>:
 800817c:	898b      	ldrh	r3, [r1, #12]
 800817e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008180:	079d      	lsls	r5, r3, #30
 8008182:	4606      	mov	r6, r0
 8008184:	460c      	mov	r4, r1
 8008186:	d507      	bpl.n	8008198 <__smakebuf_r+0x1c>
 8008188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	6123      	str	r3, [r4, #16]
 8008190:	2301      	movs	r3, #1
 8008192:	6163      	str	r3, [r4, #20]
 8008194:	b002      	add	sp, #8
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	466a      	mov	r2, sp
 800819a:	ab01      	add	r3, sp, #4
 800819c:	f7ff ffca 	bl	8008134 <__swhatbuf_r>
 80081a0:	9900      	ldr	r1, [sp, #0]
 80081a2:	4605      	mov	r5, r0
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7ff f989 	bl	80074bc <_malloc_r>
 80081aa:	b948      	cbnz	r0, 80081c0 <__smakebuf_r+0x44>
 80081ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b0:	059a      	lsls	r2, r3, #22
 80081b2:	d4ef      	bmi.n	8008194 <__smakebuf_r+0x18>
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	e7e3      	b.n	8008188 <__smakebuf_r+0xc>
 80081c0:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <__smakebuf_r+0x7c>)
 80081c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	6020      	str	r0, [r4, #0]
 80081c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	9b00      	ldr	r3, [sp, #0]
 80081d0:	6120      	str	r0, [r4, #16]
 80081d2:	6163      	str	r3, [r4, #20]
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	b15b      	cbz	r3, 80081f0 <__smakebuf_r+0x74>
 80081d8:	4630      	mov	r0, r6
 80081da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081de:	f000 f8d1 	bl	8008384 <_isatty_r>
 80081e2:	b128      	cbz	r0, 80081f0 <__smakebuf_r+0x74>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	89a0      	ldrh	r0, [r4, #12]
 80081f2:	4305      	orrs	r5, r0
 80081f4:	81a5      	strh	r5, [r4, #12]
 80081f6:	e7cd      	b.n	8008194 <__smakebuf_r+0x18>
 80081f8:	08007f8d 	.word	0x08007f8d

080081fc <_malloc_usable_size_r>:
 80081fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008200:	1f18      	subs	r0, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfbc      	itt	lt
 8008206:	580b      	ldrlt	r3, [r1, r0]
 8008208:	18c0      	addlt	r0, r0, r3
 800820a:	4770      	bx	lr

0800820c <_raise_r>:
 800820c:	291f      	cmp	r1, #31
 800820e:	b538      	push	{r3, r4, r5, lr}
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	d904      	bls.n	8008220 <_raise_r+0x14>
 8008216:	2316      	movs	r3, #22
 8008218:	6003      	str	r3, [r0, #0]
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008222:	b112      	cbz	r2, 800822a <_raise_r+0x1e>
 8008224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008228:	b94b      	cbnz	r3, 800823e <_raise_r+0x32>
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f830 	bl	8008290 <_getpid_r>
 8008230:	462a      	mov	r2, r5
 8008232:	4601      	mov	r1, r0
 8008234:	4620      	mov	r0, r4
 8008236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800823a:	f000 b817 	b.w	800826c <_kill_r>
 800823e:	2b01      	cmp	r3, #1
 8008240:	d00a      	beq.n	8008258 <_raise_r+0x4c>
 8008242:	1c59      	adds	r1, r3, #1
 8008244:	d103      	bne.n	800824e <_raise_r+0x42>
 8008246:	2316      	movs	r3, #22
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	2001      	movs	r0, #1
 800824c:	e7e7      	b.n	800821e <_raise_r+0x12>
 800824e:	2400      	movs	r4, #0
 8008250:	4628      	mov	r0, r5
 8008252:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008256:	4798      	blx	r3
 8008258:	2000      	movs	r0, #0
 800825a:	e7e0      	b.n	800821e <_raise_r+0x12>

0800825c <raise>:
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <raise+0xc>)
 800825e:	4601      	mov	r1, r0
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	f7ff bfd3 	b.w	800820c <_raise_r>
 8008266:	bf00      	nop
 8008268:	2000000c 	.word	0x2000000c

0800826c <_kill_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	2300      	movs	r3, #0
 8008270:	4d06      	ldr	r5, [pc, #24]	; (800828c <_kill_r+0x20>)
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	f7f9 fc42 	bl	8001b02 <_kill>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	d102      	bne.n	8008288 <_kill_r+0x1c>
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	b103      	cbz	r3, 8008288 <_kill_r+0x1c>
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	bd38      	pop	{r3, r4, r5, pc}
 800828a:	bf00      	nop
 800828c:	200003c0 	.word	0x200003c0

08008290 <_getpid_r>:
 8008290:	f7f9 bc30 	b.w	8001af4 <_getpid>

08008294 <__sread>:
 8008294:	b510      	push	{r4, lr}
 8008296:	460c      	mov	r4, r1
 8008298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829c:	f000 f894 	bl	80083c8 <_read_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	bfab      	itete	ge
 80082a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082a6:	89a3      	ldrhlt	r3, [r4, #12]
 80082a8:	181b      	addge	r3, r3, r0
 80082aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ae:	bfac      	ite	ge
 80082b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80082b2:	81a3      	strhlt	r3, [r4, #12]
 80082b4:	bd10      	pop	{r4, pc}

080082b6 <__swrite>:
 80082b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	461f      	mov	r7, r3
 80082bc:	898b      	ldrh	r3, [r1, #12]
 80082be:	4605      	mov	r5, r0
 80082c0:	05db      	lsls	r3, r3, #23
 80082c2:	460c      	mov	r4, r1
 80082c4:	4616      	mov	r6, r2
 80082c6:	d505      	bpl.n	80082d4 <__swrite+0x1e>
 80082c8:	2302      	movs	r3, #2
 80082ca:	2200      	movs	r2, #0
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	f000 f868 	bl	80083a4 <_lseek_r>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	4632      	mov	r2, r6
 80082d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082dc:	81a3      	strh	r3, [r4, #12]
 80082de:	4628      	mov	r0, r5
 80082e0:	463b      	mov	r3, r7
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	f000 b817 	b.w	800831c <_write_r>

080082ee <__sseek>:
 80082ee:	b510      	push	{r4, lr}
 80082f0:	460c      	mov	r4, r1
 80082f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f6:	f000 f855 	bl	80083a4 <_lseek_r>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	bf15      	itete	ne
 8008300:	6560      	strne	r0, [r4, #84]	; 0x54
 8008302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800830a:	81a3      	strheq	r3, [r4, #12]
 800830c:	bf18      	it	ne
 800830e:	81a3      	strhne	r3, [r4, #12]
 8008310:	bd10      	pop	{r4, pc}

08008312 <__sclose>:
 8008312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008316:	f000 b813 	b.w	8008340 <_close_r>
	...

0800831c <_write_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	2200      	movs	r2, #0
 8008326:	4d05      	ldr	r5, [pc, #20]	; (800833c <_write_r+0x20>)
 8008328:	602a      	str	r2, [r5, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7f9 fc20 	bl	8001b70 <_write>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_write_r+0x1e>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_write_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	200003c0 	.word	0x200003c0

08008340 <_close_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	2300      	movs	r3, #0
 8008344:	4d05      	ldr	r5, [pc, #20]	; (800835c <_close_r+0x1c>)
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f9 fc2c 	bl	8001ba8 <_close>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_close_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_close_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200003c0 	.word	0x200003c0

08008360 <_fstat_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	2300      	movs	r3, #0
 8008364:	4d06      	ldr	r5, [pc, #24]	; (8008380 <_fstat_r+0x20>)
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f7f9 fc26 	bl	8001bbe <_fstat>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d102      	bne.n	800837c <_fstat_r+0x1c>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	b103      	cbz	r3, 800837c <_fstat_r+0x1c>
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	200003c0 	.word	0x200003c0

08008384 <_isatty_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	2300      	movs	r3, #0
 8008388:	4d05      	ldr	r5, [pc, #20]	; (80083a0 <_isatty_r+0x1c>)
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7f9 fc24 	bl	8001bdc <_isatty>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_isatty_r+0x1a>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_isatty_r+0x1a>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	200003c0 	.word	0x200003c0

080083a4 <_lseek_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	4611      	mov	r1, r2
 80083ac:	2200      	movs	r2, #0
 80083ae:	4d05      	ldr	r5, [pc, #20]	; (80083c4 <_lseek_r+0x20>)
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f7f9 fc1c 	bl	8001bf0 <_lseek>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_lseek_r+0x1e>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_lseek_r+0x1e>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200003c0 	.word	0x200003c0

080083c8 <_read_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_read_r+0x20>)
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 fbad 	bl	8001b36 <_read>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_read_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_read_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200003c0 	.word	0x200003c0

080083ec <_init>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	bf00      	nop
 80083f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f2:	bc08      	pop	{r3}
 80083f4:	469e      	mov	lr, r3
 80083f6:	4770      	bx	lr

080083f8 <_fini>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr
