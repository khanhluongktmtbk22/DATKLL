
DAMH_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008040  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008150  08008150  00018150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080085ac  080085ac  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085ac  080085ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e4  08008798  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008798  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167a3  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e12  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000397c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6cb  00000000  00000000  0003b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fdc  00000000  00000000  00055eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eaf6  00000000  00000000  0006ae87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f997d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005744  00000000  00000000  000f99d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008138 	.word	0x08008138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008138 	.word	0x08008138

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <fsm_main>:
 *      Author: Acer
 */

#include "fsm_main.h"

void fsm_main(){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
    switch (current_state) {
 8001036:	4b58      	ldr	r3, [pc, #352]	; (8001198 <fsm_main+0x168>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	f200 80a3 	bhi.w	8001186 <fsm_main+0x156>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <fsm_main+0x18>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001059 	.word	0x08001059
 800104c:	08001065 	.word	0x08001065
 8001050:	08001087 	.word	0x08001087
 8001054:	08001165 	.word	0x08001165
    	case INIT:
    		lcd_init();
 8001058:	f000 f99c 	bl	8001394 <lcd_init>
    		current_state = READING;
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <fsm_main+0x168>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
    		break;
 8001062:	e094      	b.n	800118e <fsm_main+0x15e>

        case READING:
            if (DHT20_Read(&sensor_data) == HAL_OK) {
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <fsm_main+0x16c>)
 8001066:	f000 f8b5 	bl	80011d4 <DHT20_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <fsm_main+0x48>
                current_state = UPDATING_DISPLAY; // Chuyển sang trạng thái cập nhật hiển thị
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <fsm_main+0x168>)
 8001072:	2202      	movs	r2, #2
 8001074:	701a      	strb	r2, [r3, #0]
            } else {
                current_state = ERROR_DISPLAY; lcd_send_string("Read Err!");  // Chuyển sang trạng thái lỗi
            }
            break;
 8001076:	e08a      	b.n	800118e <fsm_main+0x15e>
                current_state = ERROR_DISPLAY; lcd_send_string("Read Err!");  // Chuyển sang trạng thái lỗi
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <fsm_main+0x168>)
 800107a:	2203      	movs	r2, #3
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	4848      	ldr	r0, [pc, #288]	; (80011a0 <fsm_main+0x170>)
 8001080:	f000 f9b6 	bl	80013f0 <lcd_send_string>
            break;
 8001084:	e083      	b.n	800118e <fsm_main+0x15e>

        case UPDATING_DISPLAY:
            sprintf(buffer1, "TEMP:%.1f", sensor_data.temperature);
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <fsm_main+0x16c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9cc 	bl	8000428 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4943      	ldr	r1, [pc, #268]	; (80011a4 <fsm_main+0x174>)
 8001096:	4844      	ldr	r0, [pc, #272]	; (80011a8 <fsm_main+0x178>)
 8001098:	f004 fed2 	bl	8005e40 <siprintf>
            sprintf(buffer2, "HUMI:%.1f", sensor_data.humidity);
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <fsm_main+0x16c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f9c1 	bl	8000428 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4940      	ldr	r1, [pc, #256]	; (80011ac <fsm_main+0x17c>)
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <fsm_main+0x180>)
 80010ae:	f004 fec7 	bl	8005e40 <siprintf>
            sprintf(sendBuffer, "%s;%s\n", buffer1, buffer2);
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <fsm_main+0x180>)
 80010b4:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <fsm_main+0x178>)
 80010b6:	493f      	ldr	r1, [pc, #252]	; (80011b4 <fsm_main+0x184>)
 80010b8:	483f      	ldr	r0, [pc, #252]	; (80011b8 <fsm_main+0x188>)
 80010ba:	f004 fec1 	bl	8005e40 <siprintf>
            UART_SendString(sendBuffer);
 80010be:	483e      	ldr	r0, [pc, #248]	; (80011b8 <fsm_main+0x188>)
 80010c0:	f000 fee8 	bl	8001e94 <UART_SendString>
            // Cập nhật nhiệt độ nếu thay đổi
            if (sensor_data.temperature != last_temperature) {
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <fsm_main+0x16c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <fsm_main+0x18c>)
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff7c 	bl	8000fcc <__aeabi_fcmpeq>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11b      	bne.n	8001112 <fsm_main+0xe2>
                lcd_goto_XY(1, 0); // Vị trí dòng 1
 80010da:	2100      	movs	r1, #0
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 f9a3 	bl	8001428 <lcd_goto_XY>
                lcd_send_string("TEMP:"); // Ghi nhãn
 80010e2:	4837      	ldr	r0, [pc, #220]	; (80011c0 <fsm_main+0x190>)
 80010e4:	f000 f984 	bl	80013f0 <lcd_send_string>
                char temp_display[8];
                sprintf(temp_display, "%.1f \xDF""C", sensor_data.temperature); // Định dạng nhiệt độ
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <fsm_main+0x16c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f99b 	bl	8000428 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	f107 0008 	add.w	r0, r7, #8
 80010fa:	4932      	ldr	r1, [pc, #200]	; (80011c4 <fsm_main+0x194>)
 80010fc:	f004 fea0 	bl	8005e40 <siprintf>
                lcd_send_string(temp_display); // Hiển thị nhiệt độ
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f973 	bl	80013f0 <lcd_send_string>
                last_temperature = sensor_data.temperature; // Cập nhật giá trị cũ
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <fsm_main+0x16c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <fsm_main+0x18c>)
 8001110:	6013      	str	r3, [r2, #0]
            }

            // Cập nhật độ ẩm nếu thay đổi
            if (sensor_data.humidity != last_humidity) {
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <fsm_main+0x16c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <fsm_main+0x198>)
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff55 	bl	8000fcc <__aeabi_fcmpeq>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d119      	bne.n	800115c <fsm_main+0x12c>
                lcd_goto_XY(0, 0); // Vị trí dòng 2
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f97c 	bl	8001428 <lcd_goto_XY>
                lcd_send_string("HUMI:"); // Ghi nhãn
 8001130:	4826      	ldr	r0, [pc, #152]	; (80011cc <fsm_main+0x19c>)
 8001132:	f000 f95d 	bl	80013f0 <lcd_send_string>
                char hum_display[8];
                sprintf(hum_display, "%.1f %%", sensor_data.humidity); // Định dạng độ ẩm
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <fsm_main+0x16c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f974 	bl	8000428 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4638      	mov	r0, r7
 8001146:	4922      	ldr	r1, [pc, #136]	; (80011d0 <fsm_main+0x1a0>)
 8001148:	f004 fe7a 	bl	8005e40 <siprintf>
                lcd_send_string(hum_display); // Hiển thị độ ẩm
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f94e 	bl	80013f0 <lcd_send_string>
                last_humidity = sensor_data.humidity; // Cập nhật giá trị cũ
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <fsm_main+0x16c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <fsm_main+0x198>)
 800115a:	6013      	str	r3, [r2, #0]
//            // Xử lý LED
//            HAL_Delay(1000);
//            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

            // Quay lại trạng thái đọc dữ liệu
            current_state = READING;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <fsm_main+0x168>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
            break;
 8001162:	e014      	b.n	800118e <fsm_main+0x15e>

        case ERROR_DISPLAY:
            // Hiển thị thông báo lỗi
            lcd_clear_display();
 8001164:	f000 f959 	bl	800141a <lcd_clear_display>
            lcd_goto_XY(0, 0);
 8001168:	2100      	movs	r1, #0
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f95c 	bl	8001428 <lcd_goto_XY>
            lcd_send_string("Read Err!");
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <fsm_main+0x170>)
 8001172:	f000 f93d 	bl	80013f0 <lcd_send_string>

            // Quay lại trạng thái đọc dữ liệu
            HAL_Delay(1000);
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f000 ff25 	bl	8001fc8 <HAL_Delay>
            current_state = READING;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <fsm_main+0x168>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
            break;
 8001184:	e003      	b.n	800118e <fsm_main+0x15e>

        default:
            // Xử lý trạng thái không hợp lệ (nếu cần)
            current_state = INIT;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <fsm_main+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
            break;
 800118c:	bf00      	nop
    }
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000200 	.word	0x20000200
 800119c:	20000210 	.word	0x20000210
 80011a0:	08008150 	.word	0x08008150
 80011a4:	0800815c 	.word	0x0800815c
 80011a8:	20000250 	.word	0x20000250
 80011ac:	08008168 	.word	0x08008168
 80011b0:	20000218 	.word	0x20000218
 80011b4:	08008174 	.word	0x08008174
 80011b8:	20000228 	.word	0x20000228
 80011bc:	20000000 	.word	0x20000000
 80011c0:	0800817c 	.word	0x0800817c
 80011c4:	08008184 	.word	0x08008184
 80011c8:	20000004 	.word	0x20000004
 80011cc:	0800818c 	.word	0x0800818c
 80011d0:	08008194 	.word	0x08008194

080011d4 <DHT20_Read>:
    ret = HAL_I2C_Master_Transmit(&hi2c1, DHT20_I2C_ADDRESS, init_data, 3, 2000);
    HAL_Delay(10); // Đợi cảm biến khởi động
    return ret;
}

HAL_StatusTypeDef DHT20_Read(DHT20_Data *data) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
    uint8_t read_command = 0xAC;
 80011dc:	23ac      	movs	r3, #172	; 0xac
 80011de:	77fb      	strb	r3, [r7, #31]
    uint8_t raw_data[7];
    HAL_StatusTypeDef ret;

    // Gửi yêu cầu đọc dữ liệu
    uint8_t request_data[3] = {read_command, 0x33, 0x00};
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	723b      	strb	r3, [r7, #8]
 80011e4:	2333      	movs	r3, #51	; 0x33
 80011e6:	727b      	strb	r3, [r7, #9]
 80011e8:	2300      	movs	r3, #0
 80011ea:	72bb      	strb	r3, [r7, #10]
    ret = HAL_I2C_Master_Transmit(&hi2c1, DHT20_I2C_ADDRESS, request_data, 3, 2000);
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2303      	movs	r3, #3
 80011f8:	2170      	movs	r1, #112	; 0x70
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <DHT20_Read+0xf0>)
 80011fc:	f001 fbc2 	bl	8002984 <HAL_I2C_Master_Transmit>
 8001200:	4603      	mov	r3, r0
 8001202:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) return ret;
 8001204:	7fbb      	ldrb	r3, [r7, #30]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <DHT20_Read+0x3a>
 800120a:	7fbb      	ldrb	r3, [r7, #30]
 800120c:	e056      	b.n	80012bc <DHT20_Read+0xe8>

    // Chờ một chút trước khi đọc
    HAL_Delay(80);
 800120e:	2050      	movs	r0, #80	; 0x50
 8001210:	f000 feda 	bl	8001fc8 <HAL_Delay>

    // Đọc dữ liệu trả về
    ret = HAL_I2C_Master_Receive(&hi2c1, DHT20_I2C_ADDRESS, raw_data, 7, 2000);
 8001214:	f107 020c 	add.w	r2, r7, #12
 8001218:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2307      	movs	r3, #7
 8001220:	2170      	movs	r1, #112	; 0x70
 8001222:	4828      	ldr	r0, [pc, #160]	; (80012c4 <DHT20_Read+0xf0>)
 8001224:	f001 fcac 	bl	8002b80 <HAL_I2C_Master_Receive>
 8001228:	4603      	mov	r3, r0
 800122a:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) return ret;
 800122c:	7fbb      	ldrb	r3, [r7, #30]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <DHT20_Read+0x62>
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	e042      	b.n	80012bc <DHT20_Read+0xe8>

    // Kiểm tra bit trạng thái
    if ((raw_data[0] & 0x80) != 0) return HAL_ERROR;
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	da01      	bge.n	8001242 <DHT20_Read+0x6e>
 800123e:	2301      	movs	r3, #1
 8001240:	e03c      	b.n	80012bc <DHT20_Read+0xe8>

    // Xử lý dữ liệu
    uint32_t humidity_raw = ((raw_data[1] << 16) | (raw_data[2] << 8) | raw_data[3]) >> 4;
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	4313      	orrs	r3, r2
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	111b      	asrs	r3, r3, #4
 8001252:	61bb      	str	r3, [r7, #24]
    uint32_t temperature_raw = ((raw_data[3] & 0x0F) << 16) | (raw_data[4] << 8) | raw_data[5];
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	4313      	orrs	r3, r2
 8001262:	7c7a      	ldrb	r2, [r7, #17]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

    data->humidity = ((float)humidity_raw / 1048576) * 100;
 8001268:	69b8      	ldr	r0, [r7, #24]
 800126a:	f7ff fcc3 	bl	8000bf4 <__aeabi_ui2f>
 800126e:	4603      	mov	r3, r0
 8001270:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fdc9 	bl	8000e0c <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	4912      	ldr	r1, [pc, #72]	; (80012c8 <DHT20_Read+0xf4>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd10 	bl	8000ca4 <__aeabi_fmul>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	605a      	str	r2, [r3, #4]
    data->temperature = ((float)temperature_raw / 1048576) * 200 - 50;
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff fcb1 	bl	8000bf4 <__aeabi_ui2f>
 8001292:	4603      	mov	r3, r0
 8001294:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fdb7 	bl	8000e0c <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	490a      	ldr	r1, [pc, #40]	; (80012cc <DHT20_Read+0xf8>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fcfe 	bl	8000ca4 <__aeabi_fmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4909      	ldr	r1, [pc, #36]	; (80012d0 <DHT20_Read+0xfc>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fbef 	bl	8000a90 <__aeabi_fsub>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000260 	.word	0x20000260
 80012c8:	42c80000 	.word	0x42c80000
 80012cc:	43480000 	.word	0x43480000
 80012d0:	42480000 	.word	0x42480000

080012d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f023 030f 	bic.w	r3, r3, #15
 80012e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	f043 030c 	orr.w	r3, r3, #12
 8001306:	b2db      	uxtb	r3, r3
 8001308:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	b2db      	uxtb	r3, r3
 8001312:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2304      	movs	r3, #4
 800131e:	2142      	movs	r1, #66	; 0x42
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <lcd_send_cmd+0x5c>)
 8001322:	f001 fb2f 	bl	8002984 <HAL_I2C_Master_Transmit>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000260 	.word	0x20000260

08001334 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f023 030f 	bic.w	r3, r3, #15
 8001344:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f043 030d 	orr.w	r3, r3, #13
 8001352:	b2db      	uxtb	r3, r3
 8001354:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	f043 0309 	orr.w	r3, r3, #9
 800135c:	b2db      	uxtb	r3, r3
 800135e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	f043 030d 	orr.w	r3, r3, #13
 8001366:	b2db      	uxtb	r3, r3
 8001368:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	f043 0309 	orr.w	r3, r3, #9
 8001370:	b2db      	uxtb	r3, r3
 8001372:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001374:	f107 0208 	add.w	r2, r7, #8
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2304      	movs	r3, #4
 800137e:	2142      	movs	r1, #66	; 0x42
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <lcd_send_data+0x5c>)
 8001382:	f001 faff 	bl	8002984 <HAL_I2C_Master_Transmit>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000260 	.word	0x20000260

08001394 <lcd_init>:

void lcd_init (void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001398:	2033      	movs	r0, #51	; 0x33
 800139a:	f7ff ff9b 	bl	80012d4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f7ff ff98 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013a4:	2032      	movs	r0, #50	; 0x32
 80013a6:	f000 fe0f 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80013aa:	2028      	movs	r0, #40	; 0x28
 80013ac:	f7ff ff92 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f000 fe09 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ff8c 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f000 fe03 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80013c2:	2006      	movs	r0, #6
 80013c4:	f7ff ff86 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	; 0x32
 80013ca:	f000 fdfd 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80013ce:	200c      	movs	r0, #12
 80013d0:	f7ff ff80 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f000 fdf7 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff ff7a 	bl	80012d4 <lcd_send_cmd>
	HAL_Delay(50);
 80013e0:	2032      	movs	r0, #50	; 0x32
 80013e2:	f000 fdf1 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x80);
 80013e6:	2080      	movs	r0, #128	; 0x80
 80013e8:	f7ff ff74 	bl	80012d4 <lcd_send_cmd>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80013f8:	e006      	b.n	8001408 <lcd_send_string+0x18>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff96 	bl	8001334 <lcd_send_data>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f4      	bne.n	80013fa <lcd_send_string+0xa>
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff ff58 	bl	80012d4 <lcd_send_cmd>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	337f      	adds	r3, #127	; 0x7f
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e008      	b.n	800145c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3340      	adds	r3, #64	; 0x40
 8001450:	b2db      	uxtb	r3, r3
 8001452:	b25b      	sxtb	r3, r3
 8001454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001458:	b25b      	sxtb	r3, r3
 800145a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff38 	bl	80012d4 <lcd_send_cmd>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fd48 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f83c 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f000 f91c 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800147c:	f000 f874 	bl	8001568 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001480:	f000 f8ee 	bl	8001660 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001484:	f000 f89e 	bl	80015c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001488:	f7ff ff84 	bl	8001394 <lcd_init>
  HAL_Delay(1000);
 800148c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001490:	f000 fd9a 	bl	8001fc8 <HAL_Delay>

//    if (DHT20_Init(&hi2c1) != HAL_OK) {
//        lcd_send_string("DHT20 Init Err");
//    }

  SCH_Init();
 8001494:	f000 f95c 	bl	8001750 <SCH_Init>
  SCH_Add_Task(AllTimer, 15, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	210f      	movs	r1, #15
 800149c:	480f      	ldr	r0, [pc, #60]	; (80014dc <main+0x70>)
 800149e:	f000 f989 	bl	80017b4 <SCH_Add_Task>
//  SCH_Add_Task(Toggle, 20, 1000);
  SCH_Add_Task(fsm_main, 20, 400);
 80014a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014a6:	2114      	movs	r1, #20
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <main+0x74>)
 80014aa:	f000 f983 	bl	80017b4 <SCH_Add_Task>

  HAL_TIM_Base_Start_IT(&htim3);
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <main+0x78>)
 80014b0:	f002 fdb6 	bl	8004020 <HAL_TIM_Base_Start_IT>

  setTimer(0, 100);
 80014b4:	2164      	movs	r1, #100	; 0x64
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fa9a 	bl	80019f0 <setTimer>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  fsm_main();
//	  HAL_Delay(4000);
	  if(timer_flag[0] == 1){
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <main+0x7c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d107      	bne.n	80014d4 <main+0x68>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80014c4:	2120      	movs	r1, #32
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <main+0x80>)
 80014c8:	f001 f8fe 	bl	80026c8 <HAL_GPIO_TogglePin>
		  setTimer(0, 100);
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 fa8e 	bl	80019f0 <setTimer>
	  }
	  SCH_Dispatch_Tasks();
 80014d4:	f000 fa06 	bl	80018e4 <SCH_Dispatch_Tasks>
	  if(timer_flag[0] == 1){
 80014d8:	e7f0      	b.n	80014bc <main+0x50>
 80014da:	bf00      	nop
 80014dc:	08001a71 	.word	0x08001a71
 80014e0:	08001031 	.word	0x08001031
 80014e4:	200002b4 	.word	0x200002b4
 80014e8:	20000360 	.word	0x20000360
 80014ec:	40010800 	.word	0x40010800

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	; 0x40
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 ff80 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151a:	2310      	movs	r3, #16
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f91c 	bl	8003764 <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001532:	f000 f907 	bl	8001744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fb88 	bl	8003c64 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800155a:	f000 f8f3 	bl	8001744 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3740      	adds	r7, #64	; 0x40
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 f8a9 	bl	80026fc <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f8c8 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000260 	.word	0x20000260
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM3_Init+0x94>)
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <MX_TIM3_Init+0x98>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM3_Init+0x94>)
 80015e8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f6:	2209      	movs	r2, #9
 80015f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_TIM3_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM3_Init+0x94>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_TIM3_Init+0x94>)
 8001608:	f002 fcba 	bl	8003f80 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 f897 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM3_Init+0x94>)
 8001624:	f002 fe3e 	bl	80042a4 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800162e:	f000 f889 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM3_Init+0x94>)
 8001640:	f003 f820 	bl	8004684 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800164a:	f000 f87b 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002b4 	.word	0x200002b4
 800165c:	40000400 	.word	0x40000400

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f003 f864 	bl	8004764 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f84f 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002fc 	.word	0x200002fc
 80016b0:	40013800 	.word	0x40013800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_GPIO_Init+0x74>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a16      	ldr	r2, [pc, #88]	; (8001728 <MX_GPIO_Init+0x74>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_GPIO_Init+0x74>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_GPIO_Init+0x74>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a10      	ldr	r2, [pc, #64]	; (8001728 <MX_GPIO_Init+0x74>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_GPIO_Init+0x74>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <MX_GPIO_Init+0x78>)
 80016fe:	f000 ffcb 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001702:	2320      	movs	r3, #32
 8001704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_GPIO_Init+0x78>)
 800171a:	f000 fe39 	bl	8002390 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800

08001730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001738:	f000 f81c 	bl	8001774 <SCH_Update>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <SCH_Init>:
#include "main.h"

//#include "global.h ở .h", tạo SCH_task_G ở global
SCH_ListTasks ListTasks;

void SCH_Init ( void ) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	while(ListTasks.head != NULL){
 8001754:	e002      	b.n	800175c <SCH_Init+0xc>
		SCH_Delete_Task(0);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f8ec 	bl	8001934 <SCH_Delete_Task>
	while(ListTasks.head != NULL){
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SCH_Init+0x20>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f8      	bne.n	8001756 <SCH_Init+0x6>
	// Reset the global error variable
	// − SCH_Delete_Task () w ill generate an error code ,
	// ( because the task array i s empty)
	//Error_code_G = 0;
	//Timer_int () ;
	ListTasks.numTasks = 0;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <SCH_Init+0x20>)
 8001766:	2200      	movs	r2, #0
 8001768:	721a      	strb	r2, [r3, #8]
	//Watchdog_init () ;
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000344 	.word	0x20000344

08001774 <SCH_Update>:

void SCH_Update( void ) {
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
//		}
//		else{
//			ListTasks.head->Delay --;
//		}
//	}
	if(ListTasks.head!=NULL){
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <SCH_Update+0x3c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <SCH_Update+0x32>
		if(ListTasks.head->Delay>0){
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <SCH_Update+0x3c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <SCH_Update+0x20>
			ListTasks.head->Delay --;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <SCH_Update+0x3c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	3a01      	subs	r2, #1
 8001792:	605a      	str	r2, [r3, #4]
		}
		if(ListTasks.head->Delay == 0){
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SCH_Update+0x3c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <SCH_Update+0x32>
			ListTasks.head->RunMe = 1;
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SCH_Update+0x3c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	731a      	strb	r2, [r3, #12]
//			if(ListTasks.head->Period){
//				ListTasks.head->Delay = ListTasks.head->Period;
//			}
		}
	}
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000344 	.word	0x20000344

080017b4 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    // Kiểm tra danh sách đầy
    if (ListTasks.numTasks >= SCH_MAX_TASKS) {
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <SCH_Add_Task+0x12c>)
 80017c2:	7a1b      	ldrb	r3, [r3, #8]
 80017c4:	2b27      	cmp	r3, #39	; 0x27
 80017c6:	d901      	bls.n	80017cc <SCH_Add_Task+0x18>
        // Task list is full
        return SCH_MAX_TASKS;
 80017c8:	2328      	movs	r3, #40	; 0x28
 80017ca:	e085      	b.n	80018d8 <SCH_Add_Task+0x124>
    }

    // Tạo task mới
    sTask* newTask = (sTask*)malloc(sizeof(sTask));
 80017cc:	201c      	movs	r0, #28
 80017ce:	f003 fe09 	bl	80053e4 <malloc>
 80017d2:	4603      	mov	r3, r0
 80017d4:	613b      	str	r3, [r7, #16]
    if (newTask == NULL) {
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <SCH_Add_Task+0x2c>
        // Trường hợp malloc thất bại
        return SCH_MAX_TASKS; // Hoặc mã lỗi khác
 80017dc:	2328      	movs	r3, #40	; 0x28
 80017de:	e07b      	b.n	80018d8 <SCH_Add_Task+0x124>
    }

    // Khởi tạo các thuộc tính của task
    newTask->pTask = pFunction;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]
    newTask->Period = PERIOD;
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
    newTask->RunMe = 0;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2200      	movs	r2, #0
 80017f0:	731a      	strb	r2, [r3, #12]
    newTask->Delay = DELAY;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	605a      	str	r2, [r3, #4]
    newTask->next = NULL;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
    newTask->pre = NULL;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]

    // Nếu danh sách rỗng, thêm task vào đầu
    if (ListTasks.numTasks == 0) {
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <SCH_Add_Task+0x12c>)
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <SCH_Add_Task+0x66>
        ListTasks.head = newTask;
 800180c:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <SCH_Add_Task+0x12c>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]
        ListTasks.tail = newTask;
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <SCH_Add_Task+0x12c>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6053      	str	r3, [r2, #4]
 8001818:	e056      	b.n	80018c8 <SCH_Add_Task+0x114>
    } else {
        sTask* tmp = ListTasks.head;
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <SCH_Add_Task+0x12c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	617b      	str	r3, [r7, #20]

        // Kiểm tra nếu task mới có Delay nhỏ hơn head
        if (newTask->Delay < tmp->Delay) {
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d210      	bcs.n	800184e <SCH_Add_Task+0x9a>
            tmp->Delay -= newTask->Delay; // Giảm delay của head
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	1ad2      	subs	r2, r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	605a      	str	r2, [r3, #4]
            newTask->next = tmp;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	615a      	str	r2, [r3, #20]
            tmp->pre = newTask;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	619a      	str	r2, [r3, #24]
            ListTasks.head = newTask; // Cập nhật head
 8001846:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <SCH_Add_Task+0x12c>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e03c      	b.n	80018c8 <SCH_Add_Task+0x114>
        } else {
            // Tìm vị trí phù hợp trong danh sách
            newTask->Delay -= tmp->Delay; // Delay tương đối
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	605a      	str	r2, [r3, #4]
            while (tmp->next != NULL && newTask->Delay >= tmp->next->Delay) {
 800185c:	e00a      	b.n	8001874 <SCH_Add_Task+0xc0>
                newTask->Delay -= tmp->next->Delay;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
                tmp = tmp->next;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	617b      	str	r3, [r7, #20]
            while (tmp->next != NULL && newTask->Delay >= tmp->next->Delay) {
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <SCH_Add_Task+0xd6>
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d2e9      	bcs.n	800185e <SCH_Add_Task+0xaa>
            }

            // Chèn task mới vào danh sách
            newTask->next = tmp->next;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	615a      	str	r2, [r3, #20]
            newTask->pre = tmp;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	619a      	str	r2, [r3, #24]

            if (tmp->next != NULL) {
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <SCH_Add_Task+0x108>
                tmp->next->pre = newTask;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	619a      	str	r2, [r3, #24]
                tmp->next->Delay -= newTask->Delay; // Điều chỉnh delay của task tiếp theo
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	1a8a      	subs	r2, r1, r2
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e002      	b.n	80018c2 <SCH_Add_Task+0x10e>
            } else {
                // Nếu chèn vào cuối danh sách
                ListTasks.tail = newTask;
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <SCH_Add_Task+0x12c>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]
            }

            tmp->next = newTask;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	615a      	str	r2, [r3, #20]
        }
    }

    // Cập nhật số lượng task
    ListTasks.numTasks++;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SCH_Add_Task+0x12c>)
 80018ca:	7a1b      	ldrb	r3, [r3, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <SCH_Add_Task+0x12c>)
 80018d2:	721a      	strb	r2, [r3, #8]

    return (unsigned char)ListTasks.numTasks;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <SCH_Add_Task+0x12c>)
 80018d6:	7a1b      	ldrb	r3, [r3, #8]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000344 	.word	0x20000344

080018e4 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks( void ){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

	// Dispatches ( runs ) the next task ( i f one i s ready )
	if(ListTasks.head->RunMe == 1) {
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	7b1b      	ldrb	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d11b      	bne.n	800192a <SCH_Dispatch_Tasks+0x46>
		(* ListTasks.head->pTask) () ; // Run the task
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4798      	blx	r3
		ListTasks.head->RunMe = 0; // Reset / reduce RunMe fl a g
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	731a      	strb	r2, [r3, #12]
		// Periodic tasks w ill automatically run again
		// − i f thi s i s a ’one shot ’ task , remove i t from the array
		if ( ListTasks.head->Period != 0){
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(ListTasks.head->pTask, ListTasks.head->Period, ListTasks.head->Period);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SCH_Dispatch_Tasks+0x4c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	461a      	mov	r2, r3
 8001920:	f7ff ff48 	bl	80017b4 <SCH_Add_Task>
		}
		SCH_Delete_Task(0) ;
 8001924:	2000      	movs	r0, #0
 8001926:	f000 f805 	bl	8001934 <SCH_Delete_Task>
	}
	// Report system status
	//SCH_Report_Status () ;
	// The scheduler enters idle mode at thi s point
	//SCH_Go_To_Sleep() ;
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000344 	.word	0x20000344

08001934 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task( const tByte TASK_INDEX) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
				//Return_code = RETURN_ERROR;
	} else {
		//Return_code = RETURN_NORMAL;
	}
	unsigned char i ;
	sTask* tmp = ListTasks.head;
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
	for ( i = 0; i < TASK_INDEX; i ++) {
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	e005      	b.n	800195a <SCH_Delete_Task+0x26>
		tmp = tmp->next;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	613b      	str	r3, [r7, #16]
	for ( i = 0; i < TASK_INDEX; i ++) {
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	3301      	adds	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
 800195a:	7dfa      	ldrb	r2, [r7, #23]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3f5      	bcc.n	800194e <SCH_Delete_Task+0x1a>
	}
	if(tmp == ListTasks.head && tmp == ListTasks.tail){
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d10b      	bne.n	8001984 <SCH_Delete_Task+0x50>
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <SCH_Delete_Task+0xb8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	429a      	cmp	r2, r3
 8001974:	d106      	bne.n	8001984 <SCH_Delete_Task+0x50>
		ListTasks.head = NULL;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
		ListTasks.tail = NULL;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <SCH_Delete_Task+0xb8>)
 800197e:	2200      	movs	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	e025      	b.n	80019d0 <SCH_Delete_Task+0x9c>
	}
	else if(tmp == ListTasks.head){
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d108      	bne.n	80019a0 <SCH_Delete_Task+0x6c>
		ListTasks.head = tmp->next;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001994:	6013      	str	r3, [r2, #0]
		ListTasks.head->pre = NULL;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <SCH_Delete_Task+0xb8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
 800199e:	e017      	b.n	80019d0 <SCH_Delete_Task+0x9c>
	}
	else if(tmp == ListTasks.tail){
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SCH_Delete_Task+0xb8>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d108      	bne.n	80019bc <SCH_Delete_Task+0x88>
		ListTasks.tail = tmp->pre;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <SCH_Delete_Task+0xb8>)
 80019b0:	6053      	str	r3, [r2, #4]
		ListTasks.tail->next = NULL;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <SCH_Delete_Task+0xb8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
 80019ba:	e009      	b.n	80019d0 <SCH_Delete_Task+0x9c>
	}
	else {
		(tmp->pre)->next = tmp->next;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	6952      	ldr	r2, [r2, #20]
 80019c4:	615a      	str	r2, [r3, #20]
		(tmp->next)->pre = tmp->pre;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	6992      	ldr	r2, [r2, #24]
 80019ce:	619a      	str	r2, [r3, #24]
	}
	free(tmp);
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f003 fd0f 	bl	80053f4 <free>
	ListTasks.numTasks --;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SCH_Delete_Task+0xb8>)
 80019d8:	7a1b      	ldrb	r3, [r3, #8]
 80019da:	3b01      	subs	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <SCH_Delete_Task+0xb8>)
 80019e0:	721a      	strb	r2, [r3, #8]
	return Return_code ; // return status
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000344 	.word	0x20000344

080019f0 <setTimer>:
#include "software_timer.h"

int timer_counter[no_timer];
int timer_flag[no_timer];

void setTimer(int index, int duration){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80019fa:	4907      	ldr	r1, [pc, #28]	; (8001a18 <setTimer+0x28>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <setTimer+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000350 	.word	0x20000350
 8001a1c:	20000360 	.word	0x20000360

08001a20 <runTimer>:

void runTimer(int index){
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <runTimer+0x48>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dd13      	ble.n	8001a5c <runTimer+0x3c>
		timer_counter[index]--;
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <runTimer+0x48>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	490a      	ldr	r1, [pc, #40]	; (8001a68 <runTimer+0x48>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <runTimer+0x48>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dc04      	bgt.n	8001a5c <runTimer+0x3c>
			timer_flag[index] = 1;
 8001a52:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <runTimer+0x4c>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2101      	movs	r1, #1
 8001a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000350 	.word	0x20000350
 8001a6c:	20000360 	.word	0x20000360

08001a70 <AllTimer>:

void AllTimer(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	for(int i = 0; i < no_timer; i++){
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	e005      	b.n	8001a88 <AllTimer+0x18>
		runTimer(i);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffcf 	bl	8001a20 <runTimer>
	for(int i = 0; i < no_timer; i++){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	ddf6      	ble.n	8001a7c <AllTimer+0xc>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x5c>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_MspInit+0x60>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_MspInit+0x60>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000

08001afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_I2C_MspInit+0x90>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d132      	bne.n	8001b82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4812      	ldr	r0, [pc, #72]	; (8001b94 <HAL_I2C_MspInit+0x98>)
 8001b4a:	f000 fc21 	bl	8002390 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_I2C_MspInit+0x9c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_I2C_MspInit+0x9c>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_I2C_MspInit+0x94>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40010000 	.word	0x40010000

08001b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_TIM_Base_MspInit+0x44>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d113      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_TIM_Base_MspInit+0x48>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_Base_MspInit+0x48>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_TIM_Base_MspInit+0x48>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	201d      	movs	r0, #29
 8001bcc:	f000 faf7 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bd0:	201d      	movs	r0, #29
 8001bd2:	f000 fb10 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d139      	bne.n	8001c7c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <HAL_UART_MspInit+0xa4>)
 8001c4e:	f000 fb9f 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <HAL_UART_MspInit+0xa4>)
 8001c68:	f000 fb92 	bl	8002390 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2025      	movs	r0, #37	; 0x25
 8001c72:	f000 faa4 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c76:	2025      	movs	r0, #37	; 0x25
 8001c78:	f000 fabd 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010800 	.word	0x40010800

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <NMI_Handler+0x4>

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f000 f95b 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <TIM3_IRQHandler+0x10>)
 8001ce6:	f002 f9ed 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002b4 	.word	0x200002b4

08001cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <USART1_IRQHandler+0x10>)
 8001cfa:	f002 fe0f 	bl	800491c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002fc 	.word	0x200002fc

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <_kill>:

int _kill(int pid, int sig)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d20:	f003 fb36 	bl	8005390 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2216      	movs	r2, #22
 8001d28:	601a      	str	r2, [r3, #0]
	return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_exit>:

void _exit (int status)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffe7 	bl	8001d16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d48:	e7fe      	b.n	8001d48 <_exit+0x12>

08001d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00a      	b.n	8001d72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d5c:	f3af 8000 	nop.w
 8001d60:	4601      	mov	r1, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf0      	blt.n	8001d5c <_read+0x12>
	}

return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e009      	b.n	8001daa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf1      	blt.n	8001d96 <_write+0x12>
	}
	return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_close>:

int _close(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_isatty>:

int _isatty(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f003 faa0 	bl	8005390 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20005000 	.word	0x20005000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	20000204 	.word	0x20000204
 8001e84:	20000388 	.word	0x20000388

08001e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <UART_SendString>:

#include "uart-esp32.h"

extern UART_HandleTypeDef huart1;

HAL_StatusTypeDef UART_SendString(const char *data) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    return HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8001e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <UART_SendString+0x20>)
 8001ea6:	f002 fcad 	bl	8004804 <HAL_UART_Transmit>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002fc 	.word	0x200002fc

08001eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff ffe6 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ebe:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed4:	4c09      	ldr	r4, [pc, #36]	; (8001efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 fa5b 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee6:	f7ff fac1 	bl	800146c <main>
  bx lr
 8001eea:	4770      	bx	lr
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ef4:	080085b4 	.word	0x080085b4
  ldr r2, =_sbss
 8001ef8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001efc:	20000384 	.word	0x20000384

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x28>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f947 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fdba 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f95f 	bl	8002212 <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f927 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	2000000c 	.word	0x2000000c

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_IncTick+0x1c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <HAL_IncTick+0x20>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	20000370 	.word	0x20000370

08001fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <HAL_GetTick+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000370 	.word	0x20000370

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffe0 	bl	8001fb4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000010 	.word	0x20000010

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4906      	ldr	r1, [pc, #24]	; (80020a8 <__NVIC_EnableIRQ+0x34>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff90 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff2d 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff42 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff35 	bl	8002074 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d008      	beq.n	8002254 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e020      	b.n	8002296 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 020e 	bic.w	r2, r2, #14
 8002262:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d005      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2204      	movs	r2, #4
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e051      	b.n	8002368 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 020e 	bic.w	r2, r2, #14
 80022d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_DMA_Abort_IT+0xd4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d029      	beq.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_DMA_Abort_IT+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_DMA_Abort_IT+0x9e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_DMA_Abort_IT+0xdc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01a      	beq.n	8002338 <HAL_DMA_Abort_IT+0x98>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_DMA_Abort_IT+0xe0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d012      	beq.n	8002332 <HAL_DMA_Abort_IT+0x92>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_DMA_Abort_IT+0xe4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00a      	beq.n	800232c <HAL_DMA_Abort_IT+0x8c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <HAL_DMA_Abort_IT+0xe8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d102      	bne.n	8002326 <HAL_DMA_Abort_IT+0x86>
 8002320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002324:	e00e      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232a:	e00b      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 800232c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002330:	e008      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	e005      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	e002      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 800233e:	2310      	movs	r3, #16
 8002340:	e000      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002342:	2301      	movs	r3, #1
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_DMA_Abort_IT+0xec>)
 8002346:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    } 
  }
  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020008 	.word	0x40020008
 8002378:	4002001c 	.word	0x4002001c
 800237c:	40020030 	.word	0x40020030
 8002380:	40020044 	.word	0x40020044
 8002384:	40020058 	.word	0x40020058
 8002388:	4002006c 	.word	0x4002006c
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b08b      	sub	sp, #44	; 0x2c
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a2:	e169      	b.n	8002678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023a4:	2201      	movs	r2, #1
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8158 	bne.w	8002672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a9a      	ldr	r2, [pc, #616]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d05e      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023cc:	4a98      	ldr	r2, [pc, #608]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d875      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023d2:	4a98      	ldr	r2, [pc, #608]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d058      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023d8:	4a96      	ldr	r2, [pc, #600]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d86f      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023de:	4a96      	ldr	r2, [pc, #600]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d052      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023e4:	4a94      	ldr	r2, [pc, #592]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d869      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023ea:	4a94      	ldr	r2, [pc, #592]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04c      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023f0:	4a92      	ldr	r2, [pc, #584]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d863      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023f6:	4a92      	ldr	r2, [pc, #584]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d046      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023fc:	4a90      	ldr	r2, [pc, #576]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d85d      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 8002402:	2b12      	cmp	r3, #18
 8002404:	d82a      	bhi.n	800245c <HAL_GPIO_Init+0xcc>
 8002406:	2b12      	cmp	r3, #18
 8002408:	d859      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_GPIO_Init+0x80>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	0800248b 	.word	0x0800248b
 8002414:	08002465 	.word	0x08002465
 8002418:	08002477 	.word	0x08002477
 800241c:	080024b9 	.word	0x080024b9
 8002420:	080024bf 	.word	0x080024bf
 8002424:	080024bf 	.word	0x080024bf
 8002428:	080024bf 	.word	0x080024bf
 800242c:	080024bf 	.word	0x080024bf
 8002430:	080024bf 	.word	0x080024bf
 8002434:	080024bf 	.word	0x080024bf
 8002438:	080024bf 	.word	0x080024bf
 800243c:	080024bf 	.word	0x080024bf
 8002440:	080024bf 	.word	0x080024bf
 8002444:	080024bf 	.word	0x080024bf
 8002448:	080024bf 	.word	0x080024bf
 800244c:	080024bf 	.word	0x080024bf
 8002450:	080024bf 	.word	0x080024bf
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002481 	.word	0x08002481
 800245c:	4a79      	ldr	r2, [pc, #484]	; (8002644 <HAL_GPIO_Init+0x2b4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002462:	e02c      	b.n	80024be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e029      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	3304      	adds	r3, #4
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e024      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	3308      	adds	r3, #8
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e01f      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	330c      	adds	r3, #12
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e01a      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002492:	2304      	movs	r3, #4
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e013      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a0:	2308      	movs	r3, #8
 80024a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	611a      	str	r2, [r3, #16]
          break;
 80024aa:	e009      	b.n	80024c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ac:	2308      	movs	r3, #8
 80024ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	615a      	str	r2, [r3, #20]
          break;
 80024b6:	e003      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          break;
 80024be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d801      	bhi.n	80024ca <HAL_GPIO_Init+0x13a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_Init+0x13e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d802      	bhi.n	80024dc <HAL_GPIO_Init+0x14c>
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x152>
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3b08      	subs	r3, #8
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	210f      	movs	r1, #15
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80b1 	beq.w	8002672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2bc>)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a40      	ldr	r2, [pc, #256]	; (8002650 <HAL_GPIO_Init+0x2c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_GPIO_Init+0x1ec>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <HAL_GPIO_Init+0x2c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00d      	beq.n	8002578 <HAL_GPIO_Init+0x1e8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <HAL_GPIO_Init+0x2c8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <HAL_GPIO_Init+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <HAL_GPIO_Init+0x2cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_GPIO_Init+0x1e0>
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002570:	2304      	movs	r3, #4
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002574:	2302      	movs	r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 800257c:	2300      	movs	r3, #0
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800258e:	492f      	ldr	r1, [pc, #188]	; (800264c <HAL_GPIO_Init+0x2bc>)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	492c      	ldr	r1, [pc, #176]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	4928      	ldr	r1, [pc, #160]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4922      	ldr	r1, [pc, #136]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	491e      	ldr	r1, [pc, #120]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	43db      	mvns	r3, r3
 800260e:	4914      	ldr	r1, [pc, #80]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002610:	4013      	ands	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d021      	beq.n	8002664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e021      	b.n	8002672 <HAL_GPIO_Init+0x2e2>
 800262e:	bf00      	nop
 8002630:	10320000 	.word	0x10320000
 8002634:	10310000 	.word	0x10310000
 8002638:	10220000 	.word	0x10220000
 800263c:	10210000 	.word	0x10210000
 8002640:	10120000 	.word	0x10120000
 8002644:	10110000 	.word	0x10110000
 8002648:	40021000 	.word	0x40021000
 800264c:	40010000 	.word	0x40010000
 8002650:	40010800 	.word	0x40010800
 8002654:	40010c00 	.word	0x40010c00
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	43db      	mvns	r3, r3
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <HAL_GPIO_Init+0x304>)
 800266e:	4013      	ands	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	3301      	adds	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f47f ae8e 	bne.w	80023a4 <HAL_GPIO_Init+0x14>
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	372c      	adds	r7, #44	; 0x2c
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43d9      	mvns	r1, r3
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	400b      	ands	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e12b      	b.n	8002966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff f9ea 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002760:	f001 fbc8 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a81      	ldr	r2, [pc, #516]	; (8002970 <HAL_I2C_Init+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d807      	bhi.n	8002780 <HAL_I2C_Init+0x84>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a80      	ldr	r2, [pc, #512]	; (8002974 <HAL_I2C_Init+0x278>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e006      	b.n	800278e <HAL_I2C_Init+0x92>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_I2C_Init+0x27c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0e7      	b.n	8002966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a78      	ldr	r2, [pc, #480]	; (800297c <HAL_I2C_Init+0x280>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_I2C_Init+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_I2C_Init+0xd4>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e009      	b.n	80027e4 <HAL_I2C_Init+0xe8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_I2C_Init+0x284>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	3301      	adds	r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	495c      	ldr	r1, [pc, #368]	; (8002970 <HAL_I2C_Init+0x274>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d819      	bhi.n	8002838 <HAL_I2C_Init+0x13c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002818:	400b      	ands	r3, r1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_I2C_Init+0x138>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fbb1 f3f3 	udiv	r3, r1, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	e051      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002834:	2304      	movs	r3, #4
 8002836:	e04f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_I2C_Init+0x168>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e012      	b.n	800288a <HAL_I2C_Init+0x18e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x196>
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10e      	bne.n	80028b8 <HAL_I2C_Init+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e58      	subs	r0, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6911      	ldr	r1, [r2, #16]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	460b      	mov	r3, r1
 8002992:	817b      	strh	r3, [r7, #10]
 8002994:	4613      	mov	r3, r2
 8002996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7ff fb0c 	bl	8001fb4 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	f040 80e0 	bne.w	8002b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	4970      	ldr	r1, [pc, #448]	; (8002b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fc9e 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0d3      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2C_Master_Transmit+0x50>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0cc      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d007      	beq.n	80029fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	; 0x21
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2210      	movs	r2, #16
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	893a      	ldrh	r2, [r7, #8]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fb08 	bl	8003058 <I2C_MasterRequestWrite>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e08d      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a68:	e066      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	6a39      	ldr	r1, [r7, #32]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fd5c 	bl	800352c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06b      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d11b      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x188>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd53 	bl	80035bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e01a      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d194      	bne.n	8002a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	00100002 	.word	0x00100002
 8002b7c:	ffff0000 	.word	0xffff0000

08002b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff fa0c 	bl	8001fb4 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 824b 	bne.w	8003042 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	497f      	ldr	r1, [pc, #508]	; (8002db4 <HAL_I2C_Master_Receive+0x234>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fb9e 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e23e      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Receive+0x54>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e237      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d007      	beq.n	8002bfa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2222      	movs	r2, #34	; 0x22
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2210      	movs	r2, #16
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	893a      	ldrh	r2, [r7, #8]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a5f      	ldr	r2, [pc, #380]	; (8002db8 <HAL_I2C_Master_Receive+0x238>)
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa8a 	bl	800315c <I2C_MasterRequestRead>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1f8      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d113      	bne.n	8002c82 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e1cc      	b.n	800301c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d11e      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9a:	b672      	cpsid	i
}
 8002c9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc4:	b662      	cpsie	i
}
 8002cc6:	e035      	b.n	8002d34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d11e      	bne.n	8002d0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0a:	b662      	cpsie	i
}
 8002d0c:	e012      	b.n	8002d34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d34:	e172      	b.n	800301c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	f200 811f 	bhi.w	8002f7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d123      	bne.n	8002d90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fc7d 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e173      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d8e:	e145      	b.n	800301c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d152      	bne.n	8002e3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <HAL_I2C_Master_Receive+0x23c>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 faa8 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e148      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
 8002db2:	bf00      	nop
 8002db4:	00100002 	.word	0x00100002
 8002db8:	ffff0000 	.word	0xffff0000
 8002dbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc0:	b672      	cpsid	i
}
 8002dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e06:	b662      	cpsie	i
}
 8002e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e3c:	e0ee      	b.n	800301c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2200      	movs	r2, #0
 8002e46:	4981      	ldr	r1, [pc, #516]	; (800304c <HAL_I2C_Master_Receive+0x4cc>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa55 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0f5      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e68:	b672      	cpsid	i
}
 8002e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_I2C_Master_Receive+0x4d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	4a6b      	ldr	r2, [pc, #428]	; (8003054 <HAL_I2C_Master_Receive+0x4d4>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a1a      	lsrs	r2, r3, #8
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00da      	lsls	r2, r3, #3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d118      	bne.n	8002ef6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee6:	b662      	cpsie	i
}
 8002ee8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0a6      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d1d9      	bne.n	8002eb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7c:	e04e      	b.n	800301c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb62 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e058      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d124      	bne.n	800301c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f ae88 	bne.w	8002d36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	00010004 	.word	0x00010004
 8003050:	20000008 	.word	0x20000008
 8003054:	14f8b589 	.word	0x14f8b589

08003058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d006      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d003      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00b      	b.n	80030ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b12      	cmp	r3, #18
 800309a:	d107      	bne.n	80030ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f91d 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d103      	bne.n	80030dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e035      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e8:	d108      	bne.n	80030fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e01b      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	11db      	asrs	r3, r3, #7
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0306 	and.w	r3, r3, #6
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f063 030f 	orn	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <I2C_MasterRequestWrite+0xfc>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f966 	bl	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e010      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <I2C_MasterRequestWrite+0x100>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f956 	bl	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00010008 	.word	0x00010008
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	460b      	mov	r3, r1
 800316a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003180:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d006      	beq.n	8003196 <I2C_MasterRequestRead+0x3a>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d003      	beq.n	8003196 <I2C_MasterRequestRead+0x3a>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003194:	d108      	bne.n	80031a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e00b      	b.n	80031c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2b11      	cmp	r3, #17
 80031ae:	d107      	bne.n	80031c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f893 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	d103      	bne.n	80031f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e079      	b.n	80032e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fc:	d108      	bne.n	8003210 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	611a      	str	r2, [r3, #16]
 800320e:	e05f      	b.n	80032d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003210:	897b      	ldrh	r3, [r7, #10]
 8003212:	11db      	asrs	r3, r3, #7
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f003 0306 	and.w	r3, r3, #6
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f063 030f 	orn	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4930      	ldr	r1, [pc, #192]	; (80032f0 <I2C_MasterRequestRead+0x194>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8dc 	bl	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e054      	b.n	80032e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4929      	ldr	r1, [pc, #164]	; (80032f4 <I2C_MasterRequestRead+0x198>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8cc 	bl	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e044      	b.n	80032e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003282:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f831 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	d103      	bne.n	80032b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e017      	b.n	80032e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	11db      	asrs	r3, r3, #7
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 0306 	and.w	r3, r3, #6
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f063 030e 	orn	r3, r3, #14
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4907      	ldr	r1, [pc, #28]	; (80032f4 <I2C_MasterRequestRead+0x198>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f888 	bl	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	00010008 	.word	0x00010008
 80032f4:	00010002 	.word	0x00010002

080032f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003308:	e048      	b.n	800339c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d044      	beq.n	800339c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fe fe4f 	bl	8001fb4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d139      	bne.n	800339c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10d      	bne.n	800334e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	e00c      	b.n	8003368 <I2C_WaitOnFlagUntilTimeout+0x70>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d116      	bne.n	800339c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e023      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10d      	bne.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	e00c      	b.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d093      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033fa:	e071      	b.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340a:	d123      	bne.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0204 	orr.w	r2, r3, #4
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e067      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d041      	beq.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345c:	f7fe fdaa 	bl	8001fb4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d302      	bcc.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d136      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10c      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e00b      	b.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e021      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	0c1b      	lsrs	r3, r3, #16
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10c      	bne.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e00b      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f af6d 	bne.w	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003538:	e034      	b.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f8e3 	bl	8003706 <I2C_IsAcknowledgeFailed>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e034      	b.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d028      	beq.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fd2f 	bl	8001fb4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d11d      	bne.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d016      	beq.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e007      	b.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d1c3      	bne.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c8:	e034      	b.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f89b 	bl	8003706 <I2C_IsAcknowledgeFailed>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d028      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fce7 	bl	8001fb4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11d      	bne.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d016      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d1c3      	bne.n	80035ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003658:	e049      	b.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d119      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e030      	b.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe fc8a 	bl	8001fb4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d016      	beq.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d1ae      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371c:	d11b      	bne.n	8003756 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003726:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e26c      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003784:	4b92      	ldr	r3, [pc, #584]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003790:	4b8f      	ldr	r3, [pc, #572]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
 800379c:	4b8c      	ldr	r3, [pc, #560]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b89      	ldr	r3, [pc, #548]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06c      	beq.n	8003890 <HAL_RCC_OscConfig+0x12c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d168      	bne.n	8003890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e246      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x76>
 80037cc:	4b80      	ldr	r3, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e02e      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b78      	ldr	r3, [pc, #480]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0xbc>
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a71      	ldr	r2, [pc, #452]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xd4>
 8003820:	4b6b      	ldr	r3, [pc, #428]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fbb8 	bl	8001fb4 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fbb4 	bl	8001fb4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1fa      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xe4>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fba4 	bl	8001fb4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe fba0 	bl	8001fb4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1e6      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x10c>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038aa:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
 80038b6:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1ba      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4939      	ldr	r1, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x270>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe fb59 	bl	8001fb4 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fb55 	bl	8001fb4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e19b      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4927      	ldr	r1, [pc, #156]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x270>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fb38 	bl	8001fb4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe fb34 	bl	8001fb4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e17a      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03a      	beq.n	80039e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fe fb18 	bl	8001fb4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe fb14 	bl	8001fb4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e15a      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <HAL_RCC_OscConfig+0x26c>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f000 facc 	bl	8003f44 <RCC_Delay>
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fe fafe 	bl	8001fb4 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe fafa 	bl	8001fb4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d908      	bls.n	80039dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e140      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	42420000 	.word	0x42420000
 80039d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b9e      	ldr	r3, [pc, #632]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e9      	bne.n	80039bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a6 	beq.w	8003b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b97      	ldr	r3, [pc, #604]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b94      	ldr	r3, [pc, #592]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4a93      	ldr	r2, [pc, #588]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	61d3      	str	r3, [r2, #28]
 8003a12:	4b91      	ldr	r3, [pc, #580]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b8e      	ldr	r3, [pc, #568]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b8b      	ldr	r3, [pc, #556]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a8a      	ldr	r2, [pc, #552]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fabb 	bl	8001fb4 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fab7 	bl	8001fb4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0fd      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b81      	ldr	r3, [pc, #516]	; (8003c5c <HAL_RCC_OscConfig+0x4f8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x312>
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	e02d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003a7e:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6213      	str	r3, [r2, #32]
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x356>
 8003aa0:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a6c      	ldr	r2, [pc, #432]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a69      	ldr	r2, [pc, #420]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x36e>
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a63      	ldr	r2, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fe fa6b 	bl	8001fb4 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fa67 	bl	8001fb4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0ab      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x37e>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fa55 	bl	8001fb4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fe fa51 	bl	8001fb4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e095      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4a47      	ldr	r2, [pc, #284]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8081 	beq.w	8003c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d061      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d146      	bne.n	8003bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fa25 	bl	8001fb4 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fa21 	bl	8001fb4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e067      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	492d      	ldr	r1, [pc, #180]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a19      	ldr	r1, [r3, #32]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	4927      	ldr	r1, [pc, #156]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f9f5 	bl	8001fb4 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe f9f1 	bl	8001fb4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e037      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x46a>
 8003bec:	e02f      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_RCC_OscConfig+0x4fc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f9de 	bl	8001fb4 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe f9da 	bl	8001fb4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e020      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x498>
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420060 	.word	0x42420060

08003c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0d0      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d910      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 0207 	bic.w	r2, r3, #7
 8003c8e:	4965      	ldr	r1, [pc, #404]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b8      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc0:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	494d      	ldr	r1, [pc, #308]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d040      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d115      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e073      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e06b      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4936      	ldr	r1, [pc, #216]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fe f92e 	bl	8001fb4 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fe f92a 	bl	8001fb4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e053      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d210      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 0207 	bic.w	r2, r3, #7
 8003d9a:	4922      	ldr	r1, [pc, #136]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e032      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4916      	ldr	r1, [pc, #88]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df2:	f000 f821 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490a      	ldr	r1, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1cc>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe f88c 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	0800819c 	.word	0x0800819c
 8003e30:	20000008 	.word	0x20000008
 8003e34:	2000000c 	.word	0x2000000c

08003e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d002      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x30>
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x36>
 8003e66:	e027      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e6a:	613b      	str	r3, [r7, #16]
      break;
 8003e6c:	e027      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0c9b      	lsrs	r3, r3, #18
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e78:	5cd3      	ldrb	r3, [r2, r3]
 8003e7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	0c5b      	lsrs	r3, r3, #17
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e9a:	fb02 f203 	mul.w	r2, r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	613b      	str	r3, [r7, #16]
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eba:	613b      	str	r3, [r7, #16]
      break;
 8003ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ebe:	693b      	ldr	r3, [r7, #16]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	007a1200 	.word	0x007a1200
 8003ed4:	080081b4 	.word	0x080081b4
 8003ed8:	080081c4 	.word	0x080081c4
 8003edc:	003d0900 	.word	0x003d0900

08003ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	20000008 	.word	0x20000008

08003ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef8:	f7ff fff2 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	080081ac 	.word	0x080081ac

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f20:	f7ff ffde 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	0adb      	lsrs	r3, r3, #11
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	080081ac 	.word	0x080081ac

08003f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <RCC_Delay+0x34>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <RCC_Delay+0x38>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0a5b      	lsrs	r3, r3, #9
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f60:	bf00      	nop
  }
  while (Delay --);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1e5a      	subs	r2, r3, #1
 8003f66:	60fa      	str	r2, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f9      	bne.n	8003f60 <RCC_Delay+0x1c>
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	20000008 	.word	0x20000008
 8003f7c:	10624dd3 	.word	0x10624dd3

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e041      	b.n	8004016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fdf8 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 fa5c 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03a      	b.n	80040ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_TIM_Base_Start_IT+0x98>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <HAL_TIM_Base_Start_IT+0x9c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d010      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	e007      	b.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0202 	mvn.w	r2, #2
 80040f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f998 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f98b 	bl	8004432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f99a 	bl	8004456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0204 	mvn.w	r2, #4
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f972 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f965 	bl	8004432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f974 	bl	8004456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d020      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0208 	mvn.w	r2, #8
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2204      	movs	r2, #4
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f94c 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f93f 	bl	8004432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f94e 	bl	8004456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0210 	mvn.w	r2, #16
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2208      	movs	r2, #8
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f926 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f919 	bl	8004432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f928 	bl	8004456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0201 	mvn.w	r2, #1
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd fa80 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa7f 	bl	8004752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8f8 	bl	8004468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0220 	mvn.w	r2, #32
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa52 	bl	8004740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_ConfigClockSource+0x1c>
 80042bc:	2302      	movs	r3, #2
 80042be:	e0b4      	b.n	800442a <HAL_TIM_ConfigClockSource+0x186>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d03e      	beq.n	8004378 <HAL_TIM_ConfigClockSource+0xd4>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fe:	f200 8087 	bhi.w	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	f000 8086 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x172>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d87f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d01a      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xa6>
 8004314:	2b70      	cmp	r3, #112	; 0x70
 8004316:	d87b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d050      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x11a>
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d877      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b50      	cmp	r3, #80	; 0x50
 8004322:	d03c      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xfa>
 8004324:	2b50      	cmp	r3, #80	; 0x50
 8004326:	d873      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d058      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x13a>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d86f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d064      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d86b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d060      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d867      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05c      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d05a      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	e062      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f000 f974 	bl	8004646 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800436c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
      break;
 8004376:	e04f      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f000 f95d 	bl	8004646 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e03c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 f8d4 	bl	8004558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2150      	movs	r1, #80	; 0x50
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f92b 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e02c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8f2 	bl	80045b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2160      	movs	r1, #96	; 0x60
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f91b 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e01c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f8b4 	bl	8004558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f90b 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e00c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 f902 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800440e:	e003      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e000      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a2f      	ldr	r2, [pc, #188]	; (800454c <TIM_Base_SetConfig+0xd0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <TIM_Base_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <TIM_Base_SetConfig+0xd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <TIM_Base_SetConfig+0xd0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <TIM_Base_SetConfig+0xd4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <TIM_Base_SetConfig+0xd8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <TIM_Base_SetConfig+0xd0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]
  }
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800

08004558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 030a 	bic.w	r3, r3, #10
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0210 	bic.w	r2, r3, #16
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	431a      	orrs	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	609a      	str	r2, [r3, #8]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004698:	2302      	movs	r3, #2
 800469a:	e046      	b.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d009      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a12      	ldr	r2, [pc, #72]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10c      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800

08004740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr

08004752 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e042      	b.n	80047fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fa2c 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fd63 	bl	8005274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b20      	cmp	r3, #32
 8004822:	d175      	bne.n	8004910 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_UART_Transmit+0x2c>
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e06e      	b.n	8004912 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004842:	f7fd fbb7 	bl	8001fb4 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d108      	bne.n	8004870 <HAL_UART_Transmit+0x6c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e003      	b.n	8004878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004878:	e02e      	b.n	80048d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fb01 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e03a      	b.n	8004912 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3302      	adds	r3, #2
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e007      	b.n	80048ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cb      	bne.n	800487a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 facd 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e006      	b.n	8004912 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b0ba      	sub	sp, #232	; 0xe8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800495a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_UART_IRQHandler+0x66>
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbbc 	bl	80050f8 <UART_Receive_IT>
      return;
 8004980:	e25b      	b.n	8004e3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80de 	beq.w	8004b48 <HAL_UART_IRQHandler+0x22c>
 800498c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80d1 	beq.w	8004b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_UART_IRQHandler+0xae>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xd2>
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0xf6>
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d011      	beq.n	8004a42 <HAL_UART_IRQHandler+0x126>
 8004a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	f043 0208 	orr.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 81f2 	beq.w	8004e30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_UART_IRQHandler+0x14e>
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb47 	bl	80050f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <HAL_UART_IRQHandler+0x17a>
 8004a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d04f      	beq.n	8004b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa51 	bl	8004f3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d041      	beq.n	8004b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1d9      	bne.n	8004aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d013      	beq.n	8004b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	4a7e      	ldr	r2, [pc, #504]	; (8004cfc <HAL_UART_IRQHandler+0x3e0>)
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd fbc8 	bl	80022a0 <HAL_DMA_Abort_IT>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	e00e      	b.n	8004b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f99c 	bl	8004e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e00a      	b.n	8004b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f998 	bl	8004e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e006      	b.n	8004b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f994 	bl	8004e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b42:	e175      	b.n	8004e30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	bf00      	nop
    return;
 8004b46:	e173      	b.n	8004e30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f040 814f 	bne.w	8004df0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8148 	beq.w	8004df0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8141 	beq.w	8004df0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80b6 	beq.w	8004d00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8145 	beq.w	8004e34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f080 813e 	bcs.w	8004e34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	f000 8088 	beq.w	8004cdc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bf8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1d9      	bne.n	8004bcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e1      	bne.n	8004c18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e3      	bne.n	8004c54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cc0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd faa7 	bl	800222a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8bf 	bl	8004e76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf8:	e09c      	b.n	8004e34 <HAL_UART_IRQHandler+0x518>
 8004cfa:	bf00      	nop
 8004cfc:	08005003 	.word	0x08005003
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 808e 	beq.w	8004e38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8089 	beq.w	8004e38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e3      	bne.n	8004d26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d82:	633a      	str	r2, [r7, #48]	; 0x30
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004dc8:	61fa      	str	r2, [r7, #28]
 8004dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f844 	bl	8004e76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dee:	e023      	b.n	8004e38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <HAL_UART_IRQHandler+0x4f4>
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f90e 	bl	800502a <UART_Transmit_IT>
    return;
 8004e0e:	e014      	b.n	8004e3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <HAL_UART_IRQHandler+0x51e>
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f94d 	bl	80050c8 <UART_EndTransmit_IT>
    return;
 8004e2e:	e004      	b.n	8004e3a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e38:	bf00      	nop
  }
}
 8004e3a:	37e8      	adds	r7, #232	; 0xe8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9c:	e03b      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d037      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fd f885 	bl	8001fb4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e03a      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d023      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d020      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d01d      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d116      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f81d 	bl	8004f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2208      	movs	r2, #8
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0b4      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b095      	sub	sp, #84	; 0x54
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f66:	643a      	str	r2, [r7, #64]	; 0x40
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3314      	adds	r3, #20
 8004f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d119      	bne.n	8004fea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd6:	61ba      	str	r2, [r7, #24]
 8004fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ff8:	bf00      	nop
 8004ffa:	3754      	adds	r7, #84	; 0x54
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff21 	bl	8004e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b21      	cmp	r3, #33	; 0x21
 800503c:	d13e      	bne.n	80050bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d114      	bne.n	8005072 <UART_Transmit_IT+0x48>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d110      	bne.n	8005072 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005064:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]
 8005070:	e008      	b.n	8005084 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6211      	str	r1, [r2, #32]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29b      	uxth	r3, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4619      	mov	r1, r3
 8005092:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fea9 	bl	8004e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b22      	cmp	r3, #34	; 0x22
 800510a:	f040 80ae 	bne.w	800526a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d117      	bne.n	8005148 <UART_Receive_IT+0x50>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d113      	bne.n	8005148 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	b29a      	uxth	r2, r3
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
 8005146:	e026      	b.n	8005196 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d007      	beq.n	800516c <UART_Receive_IT+0x74>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <UART_Receive_IT+0x82>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e008      	b.n	800518c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005186:	b2da      	uxtb	r2, r3
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4619      	mov	r1, r3
 80051a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d15d      	bne.n	8005266 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0220 	bic.w	r2, r2, #32
 80051b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d135      	bne.n	800525c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	623a      	str	r2, [r7, #32]
 8005218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	69f9      	ldr	r1, [r7, #28]
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	61bb      	str	r3, [r7, #24]
   return(result);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d10a      	bne.n	800524e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fe0e 	bl	8004e76 <HAL_UARTEx_RxEventCallback>
 800525a:	e002      	b.n	8005262 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fdf8 	bl	8004e52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e002      	b.n	800526c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052ae:	f023 030c 	bic.w	r3, r3, #12
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <UART_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d103      	bne.n	80052e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fe fe1e 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	e002      	b.n	80052ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fe06 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80052e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009a      	lsls	r2, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <UART_SetConfig+0x118>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	0119      	lsls	r1, r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009a      	lsls	r2, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <UART_SetConfig+0x118>)
 8005322:	fba3 0302 	umull	r0, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2064      	movs	r0, #100	; 0x64
 800532a:	fb00 f303 	mul.w	r3, r0, r3
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	3332      	adds	r3, #50	; 0x32
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <UART_SetConfig+0x118>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005340:	4419      	add	r1, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fbb2 f2f3 	udiv	r2, r2, r3
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <UART_SetConfig+0x118>)
 800535a:	fba3 0302 	umull	r0, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2064      	movs	r0, #100	; 0x64
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a07      	ldr	r2, [pc, #28]	; (800538c <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	440a      	add	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40013800 	.word	0x40013800
 800538c:	51eb851f 	.word	0x51eb851f

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000014 	.word	0x20000014

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	2600      	movs	r6, #0
 80053a0:	4d0c      	ldr	r5, [pc, #48]	; (80053d4 <__libc_init_array+0x38>)
 80053a2:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	f002 fec4 	bl	8008138 <_init>
 80053b0:	2600      	movs	r6, #0
 80053b2:	4d0a      	ldr	r5, [pc, #40]	; (80053dc <__libc_init_array+0x40>)
 80053b4:	4c0a      	ldr	r4, [pc, #40]	; (80053e0 <__libc_init_array+0x44>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	080085ac 	.word	0x080085ac
 80053d8:	080085ac 	.word	0x080085ac
 80053dc:	080085ac 	.word	0x080085ac
 80053e0:	080085b0 	.word	0x080085b0

080053e4 <malloc>:
 80053e4:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <malloc+0xc>)
 80053e6:	4601      	mov	r1, r0
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f000 b85f 	b.w	80054ac <_malloc_r>
 80053ee:	bf00      	nop
 80053f0:	20000014 	.word	0x20000014

080053f4 <free>:
 80053f4:	4b02      	ldr	r3, [pc, #8]	; (8005400 <free+0xc>)
 80053f6:	4601      	mov	r1, r0
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f000 b80b 	b.w	8005414 <_free_r>
 80053fe:	bf00      	nop
 8005400:	20000014 	.word	0x20000014

08005404 <memset>:
 8005404:	4603      	mov	r3, r0
 8005406:	4402      	add	r2, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <_free_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4605      	mov	r5, r0
 8005418:	2900      	cmp	r1, #0
 800541a:	d043      	beq.n	80054a4 <_free_r+0x90>
 800541c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005420:	1f0c      	subs	r4, r1, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfb8      	it	lt
 8005426:	18e4      	addlt	r4, r4, r3
 8005428:	f001 fbc8 	bl	8006bbc <__malloc_lock>
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <_free_r+0x94>)
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	4610      	mov	r0, r2
 8005432:	b933      	cbnz	r3, 8005442 <_free_r+0x2e>
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6014      	str	r4, [r2, #0]
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543e:	f001 bbc3 	b.w	8006bc8 <__malloc_unlock>
 8005442:	42a3      	cmp	r3, r4
 8005444:	d90a      	bls.n	800545c <_free_r+0x48>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	1862      	adds	r2, r4, r1
 800544a:	4293      	cmp	r3, r2
 800544c:	bf01      	itttt	eq
 800544e:	681a      	ldreq	r2, [r3, #0]
 8005450:	685b      	ldreq	r3, [r3, #4]
 8005452:	1852      	addeq	r2, r2, r1
 8005454:	6022      	streq	r2, [r4, #0]
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	6004      	str	r4, [r0, #0]
 800545a:	e7ed      	b.n	8005438 <_free_r+0x24>
 800545c:	461a      	mov	r2, r3
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b10b      	cbz	r3, 8005466 <_free_r+0x52>
 8005462:	42a3      	cmp	r3, r4
 8005464:	d9fa      	bls.n	800545c <_free_r+0x48>
 8005466:	6811      	ldr	r1, [r2, #0]
 8005468:	1850      	adds	r0, r2, r1
 800546a:	42a0      	cmp	r0, r4
 800546c:	d10b      	bne.n	8005486 <_free_r+0x72>
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	4401      	add	r1, r0
 8005472:	1850      	adds	r0, r2, r1
 8005474:	4283      	cmp	r3, r0
 8005476:	6011      	str	r1, [r2, #0]
 8005478:	d1de      	bne.n	8005438 <_free_r+0x24>
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4401      	add	r1, r0
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e7d8      	b.n	8005438 <_free_r+0x24>
 8005486:	d902      	bls.n	800548e <_free_r+0x7a>
 8005488:	230c      	movs	r3, #12
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	e7d4      	b.n	8005438 <_free_r+0x24>
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1821      	adds	r1, r4, r0
 8005492:	428b      	cmp	r3, r1
 8005494:	bf01      	itttt	eq
 8005496:	6819      	ldreq	r1, [r3, #0]
 8005498:	685b      	ldreq	r3, [r3, #4]
 800549a:	1809      	addeq	r1, r1, r0
 800549c:	6021      	streq	r1, [r4, #0]
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	6054      	str	r4, [r2, #4]
 80054a2:	e7c9      	b.n	8005438 <_free_r+0x24>
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	20000208 	.word	0x20000208

080054ac <_malloc_r>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	1ccd      	adds	r5, r1, #3
 80054b0:	f025 0503 	bic.w	r5, r5, #3
 80054b4:	3508      	adds	r5, #8
 80054b6:	2d0c      	cmp	r5, #12
 80054b8:	bf38      	it	cc
 80054ba:	250c      	movcc	r5, #12
 80054bc:	2d00      	cmp	r5, #0
 80054be:	4606      	mov	r6, r0
 80054c0:	db01      	blt.n	80054c6 <_malloc_r+0x1a>
 80054c2:	42a9      	cmp	r1, r5
 80054c4:	d903      	bls.n	80054ce <_malloc_r+0x22>
 80054c6:	230c      	movs	r3, #12
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	2000      	movs	r0, #0
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ce:	f001 fb75 	bl	8006bbc <__malloc_lock>
 80054d2:	4921      	ldr	r1, [pc, #132]	; (8005558 <_malloc_r+0xac>)
 80054d4:	680a      	ldr	r2, [r1, #0]
 80054d6:	4614      	mov	r4, r2
 80054d8:	b99c      	cbnz	r4, 8005502 <_malloc_r+0x56>
 80054da:	4f20      	ldr	r7, [pc, #128]	; (800555c <_malloc_r+0xb0>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	b923      	cbnz	r3, 80054ea <_malloc_r+0x3e>
 80054e0:	4621      	mov	r1, r4
 80054e2:	4630      	mov	r0, r6
 80054e4:	f000 fc9c 	bl	8005e20 <_sbrk_r>
 80054e8:	6038      	str	r0, [r7, #0]
 80054ea:	4629      	mov	r1, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 fc97 	bl	8005e20 <_sbrk_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d123      	bne.n	800553e <_malloc_r+0x92>
 80054f6:	230c      	movs	r3, #12
 80054f8:	4630      	mov	r0, r6
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	f001 fb64 	bl	8006bc8 <__malloc_unlock>
 8005500:	e7e3      	b.n	80054ca <_malloc_r+0x1e>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	1b5b      	subs	r3, r3, r5
 8005506:	d417      	bmi.n	8005538 <_malloc_r+0x8c>
 8005508:	2b0b      	cmp	r3, #11
 800550a:	d903      	bls.n	8005514 <_malloc_r+0x68>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	441c      	add	r4, r3
 8005510:	6025      	str	r5, [r4, #0]
 8005512:	e004      	b.n	800551e <_malloc_r+0x72>
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	42a2      	cmp	r2, r4
 8005518:	bf0c      	ite	eq
 800551a:	600b      	streq	r3, [r1, #0]
 800551c:	6053      	strne	r3, [r2, #4]
 800551e:	4630      	mov	r0, r6
 8005520:	f001 fb52 	bl	8006bc8 <__malloc_unlock>
 8005524:	f104 000b 	add.w	r0, r4, #11
 8005528:	1d23      	adds	r3, r4, #4
 800552a:	f020 0007 	bic.w	r0, r0, #7
 800552e:	1ac2      	subs	r2, r0, r3
 8005530:	d0cc      	beq.n	80054cc <_malloc_r+0x20>
 8005532:	1a1b      	subs	r3, r3, r0
 8005534:	50a3      	str	r3, [r4, r2]
 8005536:	e7c9      	b.n	80054cc <_malloc_r+0x20>
 8005538:	4622      	mov	r2, r4
 800553a:	6864      	ldr	r4, [r4, #4]
 800553c:	e7cc      	b.n	80054d8 <_malloc_r+0x2c>
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d0e3      	beq.n	8005510 <_malloc_r+0x64>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4630      	mov	r0, r6
 800554c:	f000 fc68 	bl	8005e20 <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d1dd      	bne.n	8005510 <_malloc_r+0x64>
 8005554:	e7cf      	b.n	80054f6 <_malloc_r+0x4a>
 8005556:	bf00      	nop
 8005558:	20000208 	.word	0x20000208
 800555c:	2000020c 	.word	0x2000020c

08005560 <__cvt>:
 8005560:	2b00      	cmp	r3, #0
 8005562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005566:	461f      	mov	r7, r3
 8005568:	bfbb      	ittet	lt
 800556a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800556e:	461f      	movlt	r7, r3
 8005570:	2300      	movge	r3, #0
 8005572:	232d      	movlt	r3, #45	; 0x2d
 8005574:	b088      	sub	sp, #32
 8005576:	4614      	mov	r4, r2
 8005578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800557a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800557c:	7013      	strb	r3, [r2, #0]
 800557e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005580:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005584:	f023 0820 	bic.w	r8, r3, #32
 8005588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800558c:	d005      	beq.n	800559a <__cvt+0x3a>
 800558e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005592:	d100      	bne.n	8005596 <__cvt+0x36>
 8005594:	3501      	adds	r5, #1
 8005596:	2302      	movs	r3, #2
 8005598:	e000      	b.n	800559c <__cvt+0x3c>
 800559a:	2303      	movs	r3, #3
 800559c:	aa07      	add	r2, sp, #28
 800559e:	9204      	str	r2, [sp, #16]
 80055a0:	aa06      	add	r2, sp, #24
 80055a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055a6:	e9cd 3500 	strd	r3, r5, [sp]
 80055aa:	4622      	mov	r2, r4
 80055ac:	463b      	mov	r3, r7
 80055ae:	f000 fcf7 	bl	8005fa0 <_dtoa_r>
 80055b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055b6:	4606      	mov	r6, r0
 80055b8:	d102      	bne.n	80055c0 <__cvt+0x60>
 80055ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055bc:	07db      	lsls	r3, r3, #31
 80055be:	d522      	bpl.n	8005606 <__cvt+0xa6>
 80055c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055c4:	eb06 0905 	add.w	r9, r6, r5
 80055c8:	d110      	bne.n	80055ec <__cvt+0x8c>
 80055ca:	7833      	ldrb	r3, [r6, #0]
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d10a      	bne.n	80055e6 <__cvt+0x86>
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	4620      	mov	r0, r4
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fb f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80055dc:	b918      	cbnz	r0, 80055e6 <__cvt+0x86>
 80055de:	f1c5 0501 	rsb	r5, r5, #1
 80055e2:	f8ca 5000 	str.w	r5, [sl]
 80055e6:	f8da 3000 	ldr.w	r3, [sl]
 80055ea:	4499      	add	r9, r3
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	4620      	mov	r0, r4
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7fb f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80055f8:	b108      	cbz	r0, 80055fe <__cvt+0x9e>
 80055fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80055fe:	2230      	movs	r2, #48	; 0x30
 8005600:	9b07      	ldr	r3, [sp, #28]
 8005602:	454b      	cmp	r3, r9
 8005604:	d307      	bcc.n	8005616 <__cvt+0xb6>
 8005606:	4630      	mov	r0, r6
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800560c:	1b9b      	subs	r3, r3, r6
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	b008      	add	sp, #32
 8005612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	9107      	str	r1, [sp, #28]
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e7f0      	b.n	8005600 <__cvt+0xa0>

0800561e <__exponent>:
 800561e:	4603      	mov	r3, r0
 8005620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005622:	2900      	cmp	r1, #0
 8005624:	f803 2b02 	strb.w	r2, [r3], #2
 8005628:	bfb6      	itet	lt
 800562a:	222d      	movlt	r2, #45	; 0x2d
 800562c:	222b      	movge	r2, #43	; 0x2b
 800562e:	4249      	neglt	r1, r1
 8005630:	2909      	cmp	r1, #9
 8005632:	7042      	strb	r2, [r0, #1]
 8005634:	dd2b      	ble.n	800568e <__exponent+0x70>
 8005636:	f10d 0407 	add.w	r4, sp, #7
 800563a:	46a4      	mov	ip, r4
 800563c:	270a      	movs	r7, #10
 800563e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005642:	460a      	mov	r2, r1
 8005644:	46a6      	mov	lr, r4
 8005646:	fb07 1516 	mls	r5, r7, r6, r1
 800564a:	2a63      	cmp	r2, #99	; 0x63
 800564c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005650:	4631      	mov	r1, r6
 8005652:	f104 34ff 	add.w	r4, r4, #4294967295
 8005656:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800565a:	dcf0      	bgt.n	800563e <__exponent+0x20>
 800565c:	3130      	adds	r1, #48	; 0x30
 800565e:	f1ae 0502 	sub.w	r5, lr, #2
 8005662:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005666:	4629      	mov	r1, r5
 8005668:	1c44      	adds	r4, r0, #1
 800566a:	4561      	cmp	r1, ip
 800566c:	d30a      	bcc.n	8005684 <__exponent+0x66>
 800566e:	f10d 0209 	add.w	r2, sp, #9
 8005672:	eba2 020e 	sub.w	r2, r2, lr
 8005676:	4565      	cmp	r5, ip
 8005678:	bf88      	it	hi
 800567a:	2200      	movhi	r2, #0
 800567c:	4413      	add	r3, r2
 800567e:	1a18      	subs	r0, r3, r0
 8005680:	b003      	add	sp, #12
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005688:	f804 2f01 	strb.w	r2, [r4, #1]!
 800568c:	e7ed      	b.n	800566a <__exponent+0x4c>
 800568e:	2330      	movs	r3, #48	; 0x30
 8005690:	3130      	adds	r1, #48	; 0x30
 8005692:	7083      	strb	r3, [r0, #2]
 8005694:	70c1      	strb	r1, [r0, #3]
 8005696:	1d03      	adds	r3, r0, #4
 8005698:	e7f1      	b.n	800567e <__exponent+0x60>
	...

0800569c <_printf_float>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	b091      	sub	sp, #68	; 0x44
 80056a2:	460c      	mov	r4, r1
 80056a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80056a8:	4616      	mov	r6, r2
 80056aa:	461f      	mov	r7, r3
 80056ac:	4605      	mov	r5, r0
 80056ae:	f001 fa65 	bl	8006b7c <_localeconv_r>
 80056b2:	6803      	ldr	r3, [r0, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	f7fa fd4a 	bl	8000150 <strlen>
 80056bc:	2300      	movs	r3, #0
 80056be:	930e      	str	r3, [sp, #56]	; 0x38
 80056c0:	f8d8 3000 	ldr.w	r3, [r8]
 80056c4:	900a      	str	r0, [sp, #40]	; 0x28
 80056c6:	3307      	adds	r3, #7
 80056c8:	f023 0307 	bic.w	r3, r3, #7
 80056cc:	f103 0208 	add.w	r2, r3, #8
 80056d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80056d4:	f8d4 b000 	ldr.w	fp, [r4]
 80056d8:	f8c8 2000 	str.w	r2, [r8]
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80056e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80056ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ee:	f04f 32ff 	mov.w	r2, #4294967295
 80056f2:	4640      	mov	r0, r8
 80056f4:	4b9c      	ldr	r3, [pc, #624]	; (8005968 <_printf_float+0x2cc>)
 80056f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056f8:	f7fb f988 	bl	8000a0c <__aeabi_dcmpun>
 80056fc:	bb70      	cbnz	r0, 800575c <_printf_float+0xc0>
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	4640      	mov	r0, r8
 8005704:	4b98      	ldr	r3, [pc, #608]	; (8005968 <_printf_float+0x2cc>)
 8005706:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005708:	f7fb f962 	bl	80009d0 <__aeabi_dcmple>
 800570c:	bb30      	cbnz	r0, 800575c <_printf_float+0xc0>
 800570e:	2200      	movs	r2, #0
 8005710:	2300      	movs	r3, #0
 8005712:	4640      	mov	r0, r8
 8005714:	4651      	mov	r1, sl
 8005716:	f7fb f951 	bl	80009bc <__aeabi_dcmplt>
 800571a:	b110      	cbz	r0, 8005722 <_printf_float+0x86>
 800571c:	232d      	movs	r3, #45	; 0x2d
 800571e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005722:	4b92      	ldr	r3, [pc, #584]	; (800596c <_printf_float+0x2d0>)
 8005724:	4892      	ldr	r0, [pc, #584]	; (8005970 <_printf_float+0x2d4>)
 8005726:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800572a:	bf94      	ite	ls
 800572c:	4698      	movls	r8, r3
 800572e:	4680      	movhi	r8, r0
 8005730:	2303      	movs	r3, #3
 8005732:	f04f 0a00 	mov.w	sl, #0
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	f02b 0304 	bic.w	r3, fp, #4
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	4633      	mov	r3, r6
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	9700      	str	r7, [sp, #0]
 8005746:	aa0f      	add	r2, sp, #60	; 0x3c
 8005748:	f000 f9d4 	bl	8005af4 <_printf_common>
 800574c:	3001      	adds	r0, #1
 800574e:	f040 8090 	bne.w	8005872 <_printf_float+0x1d6>
 8005752:	f04f 30ff 	mov.w	r0, #4294967295
 8005756:	b011      	add	sp, #68	; 0x44
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575c:	4642      	mov	r2, r8
 800575e:	4653      	mov	r3, sl
 8005760:	4640      	mov	r0, r8
 8005762:	4651      	mov	r1, sl
 8005764:	f7fb f952 	bl	8000a0c <__aeabi_dcmpun>
 8005768:	b148      	cbz	r0, 800577e <_printf_float+0xe2>
 800576a:	f1ba 0f00 	cmp.w	sl, #0
 800576e:	bfb8      	it	lt
 8005770:	232d      	movlt	r3, #45	; 0x2d
 8005772:	4880      	ldr	r0, [pc, #512]	; (8005974 <_printf_float+0x2d8>)
 8005774:	bfb8      	it	lt
 8005776:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800577a:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <_printf_float+0x2dc>)
 800577c:	e7d3      	b.n	8005726 <_printf_float+0x8a>
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	d142      	bne.n	800580e <_printf_float+0x172>
 8005788:	2306      	movs	r3, #6
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	9206      	str	r2, [sp, #24]
 8005790:	aa0e      	add	r2, sp, #56	; 0x38
 8005792:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005796:	aa0d      	add	r2, sp, #52	; 0x34
 8005798:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800579c:	9203      	str	r2, [sp, #12]
 800579e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80057a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	4642      	mov	r2, r8
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	4628      	mov	r0, r5
 80057b0:	4653      	mov	r3, sl
 80057b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80057b4:	f7ff fed4 	bl	8005560 <__cvt>
 80057b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ba:	4680      	mov	r8, r0
 80057bc:	2947      	cmp	r1, #71	; 0x47
 80057be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057c0:	d108      	bne.n	80057d4 <_printf_float+0x138>
 80057c2:	1cc8      	adds	r0, r1, #3
 80057c4:	db02      	blt.n	80057cc <_printf_float+0x130>
 80057c6:	6863      	ldr	r3, [r4, #4]
 80057c8:	4299      	cmp	r1, r3
 80057ca:	dd40      	ble.n	800584e <_printf_float+0x1b2>
 80057cc:	f1a9 0902 	sub.w	r9, r9, #2
 80057d0:	fa5f f989 	uxtb.w	r9, r9
 80057d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057d8:	d81f      	bhi.n	800581a <_printf_float+0x17e>
 80057da:	464a      	mov	r2, r9
 80057dc:	3901      	subs	r1, #1
 80057de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057e2:	910d      	str	r1, [sp, #52]	; 0x34
 80057e4:	f7ff ff1b 	bl	800561e <__exponent>
 80057e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057ea:	4682      	mov	sl, r0
 80057ec:	1813      	adds	r3, r2, r0
 80057ee:	2a01      	cmp	r2, #1
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	dc02      	bgt.n	80057fa <_printf_float+0x15e>
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	07d2      	lsls	r2, r2, #31
 80057f8:	d501      	bpl.n	80057fe <_printf_float+0x162>
 80057fa:	3301      	adds	r3, #1
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005802:	2b00      	cmp	r3, #0
 8005804:	d09b      	beq.n	800573e <_printf_float+0xa2>
 8005806:	232d      	movs	r3, #45	; 0x2d
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	e797      	b.n	800573e <_printf_float+0xa2>
 800580e:	2947      	cmp	r1, #71	; 0x47
 8005810:	d1bc      	bne.n	800578c <_printf_float+0xf0>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ba      	bne.n	800578c <_printf_float+0xf0>
 8005816:	2301      	movs	r3, #1
 8005818:	e7b7      	b.n	800578a <_printf_float+0xee>
 800581a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800581e:	d118      	bne.n	8005852 <_printf_float+0x1b6>
 8005820:	2900      	cmp	r1, #0
 8005822:	6863      	ldr	r3, [r4, #4]
 8005824:	dd0b      	ble.n	800583e <_printf_float+0x1a2>
 8005826:	6121      	str	r1, [r4, #16]
 8005828:	b913      	cbnz	r3, 8005830 <_printf_float+0x194>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	07d0      	lsls	r0, r2, #31
 800582e:	d502      	bpl.n	8005836 <_printf_float+0x19a>
 8005830:	3301      	adds	r3, #1
 8005832:	440b      	add	r3, r1
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	f04f 0a00 	mov.w	sl, #0
 800583a:	65a1      	str	r1, [r4, #88]	; 0x58
 800583c:	e7df      	b.n	80057fe <_printf_float+0x162>
 800583e:	b913      	cbnz	r3, 8005846 <_printf_float+0x1aa>
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	07d2      	lsls	r2, r2, #31
 8005844:	d501      	bpl.n	800584a <_printf_float+0x1ae>
 8005846:	3302      	adds	r3, #2
 8005848:	e7f4      	b.n	8005834 <_printf_float+0x198>
 800584a:	2301      	movs	r3, #1
 800584c:	e7f2      	b.n	8005834 <_printf_float+0x198>
 800584e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005854:	4299      	cmp	r1, r3
 8005856:	db05      	blt.n	8005864 <_printf_float+0x1c8>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	6121      	str	r1, [r4, #16]
 800585c:	07d8      	lsls	r0, r3, #31
 800585e:	d5ea      	bpl.n	8005836 <_printf_float+0x19a>
 8005860:	1c4b      	adds	r3, r1, #1
 8005862:	e7e7      	b.n	8005834 <_printf_float+0x198>
 8005864:	2900      	cmp	r1, #0
 8005866:	bfcc      	ite	gt
 8005868:	2201      	movgt	r2, #1
 800586a:	f1c1 0202 	rsble	r2, r1, #2
 800586e:	4413      	add	r3, r2
 8005870:	e7e0      	b.n	8005834 <_printf_float+0x198>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	055a      	lsls	r2, r3, #21
 8005876:	d407      	bmi.n	8005888 <_printf_float+0x1ec>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	4642      	mov	r2, r8
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	d12b      	bne.n	80058de <_printf_float+0x242>
 8005886:	e764      	b.n	8005752 <_printf_float+0xb6>
 8005888:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800588c:	f240 80dd 	bls.w	8005a4a <_printf_float+0x3ae>
 8005890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005894:	2200      	movs	r2, #0
 8005896:	2300      	movs	r3, #0
 8005898:	f7fb f886 	bl	80009a8 <__aeabi_dcmpeq>
 800589c:	2800      	cmp	r0, #0
 800589e:	d033      	beq.n	8005908 <_printf_float+0x26c>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	4a35      	ldr	r2, [pc, #212]	; (800597c <_printf_float+0x2e0>)
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	f43f af51 	beq.w	8005752 <_printf_float+0xb6>
 80058b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058b4:	429a      	cmp	r2, r3
 80058b6:	db02      	blt.n	80058be <_printf_float+0x222>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07d8      	lsls	r0, r3, #31
 80058bc:	d50f      	bpl.n	80058de <_printf_float+0x242>
 80058be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f af42 	beq.w	8005752 <_printf_float+0xb6>
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	f104 091a 	add.w	r9, r4, #26
 80058d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058d8:	3b01      	subs	r3, #1
 80058da:	4543      	cmp	r3, r8
 80058dc:	dc09      	bgt.n	80058f2 <_printf_float+0x256>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	079b      	lsls	r3, r3, #30
 80058e2:	f100 8102 	bmi.w	8005aea <_printf_float+0x44e>
 80058e6:	68e0      	ldr	r0, [r4, #12]
 80058e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058ea:	4298      	cmp	r0, r3
 80058ec:	bfb8      	it	lt
 80058ee:	4618      	movlt	r0, r3
 80058f0:	e731      	b.n	8005756 <_printf_float+0xba>
 80058f2:	2301      	movs	r3, #1
 80058f4:	464a      	mov	r2, r9
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f af28 	beq.w	8005752 <_printf_float+0xb6>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7e6      	b.n	80058d6 <_printf_float+0x23a>
 8005908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590a:	2b00      	cmp	r3, #0
 800590c:	dc38      	bgt.n	8005980 <_printf_float+0x2e4>
 800590e:	2301      	movs	r3, #1
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <_printf_float+0x2e0>)
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f af1a 	beq.w	8005752 <_printf_float+0xb6>
 800591e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005922:	4313      	orrs	r3, r2
 8005924:	d102      	bne.n	800592c <_printf_float+0x290>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	07d9      	lsls	r1, r3, #31
 800592a:	d5d8      	bpl.n	80058de <_printf_float+0x242>
 800592c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af0b 	beq.w	8005752 <_printf_float+0xb6>
 800593c:	f04f 0900 	mov.w	r9, #0
 8005940:	f104 0a1a 	add.w	sl, r4, #26
 8005944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005946:	425b      	negs	r3, r3
 8005948:	454b      	cmp	r3, r9
 800594a:	dc01      	bgt.n	8005950 <_printf_float+0x2b4>
 800594c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800594e:	e794      	b.n	800587a <_printf_float+0x1de>
 8005950:	2301      	movs	r3, #1
 8005952:	4652      	mov	r2, sl
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f aef9 	beq.w	8005752 <_printf_float+0xb6>
 8005960:	f109 0901 	add.w	r9, r9, #1
 8005964:	e7ee      	b.n	8005944 <_printf_float+0x2a8>
 8005966:	bf00      	nop
 8005968:	7fefffff 	.word	0x7fefffff
 800596c:	080081cc 	.word	0x080081cc
 8005970:	080081d0 	.word	0x080081d0
 8005974:	080081d8 	.word	0x080081d8
 8005978:	080081d4 	.word	0x080081d4
 800597c:	080081dc 	.word	0x080081dc
 8005980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005984:	429a      	cmp	r2, r3
 8005986:	bfa8      	it	ge
 8005988:	461a      	movge	r2, r3
 800598a:	2a00      	cmp	r2, #0
 800598c:	4691      	mov	r9, r2
 800598e:	dc37      	bgt.n	8005a00 <_printf_float+0x364>
 8005990:	f04f 0b00 	mov.w	fp, #0
 8005994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005998:	f104 021a 	add.w	r2, r4, #26
 800599c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059a0:	ebaa 0309 	sub.w	r3, sl, r9
 80059a4:	455b      	cmp	r3, fp
 80059a6:	dc33      	bgt.n	8005a10 <_printf_float+0x374>
 80059a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059ac:	429a      	cmp	r2, r3
 80059ae:	db3b      	blt.n	8005a28 <_printf_float+0x38c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07da      	lsls	r2, r3, #31
 80059b4:	d438      	bmi.n	8005a28 <_printf_float+0x38c>
 80059b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059ba:	eba2 030a 	sub.w	r3, r2, sl
 80059be:	eba2 0901 	sub.w	r9, r2, r1
 80059c2:	4599      	cmp	r9, r3
 80059c4:	bfa8      	it	ge
 80059c6:	4699      	movge	r9, r3
 80059c8:	f1b9 0f00 	cmp.w	r9, #0
 80059cc:	dc34      	bgt.n	8005a38 <_printf_float+0x39c>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059d6:	f104 0a1a 	add.w	sl, r4, #26
 80059da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	eba3 0309 	sub.w	r3, r3, r9
 80059e4:	4543      	cmp	r3, r8
 80059e6:	f77f af7a 	ble.w	80058de <_printf_float+0x242>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4652      	mov	r2, sl
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	f43f aeac 	beq.w	8005752 <_printf_float+0xb6>
 80059fa:	f108 0801 	add.w	r8, r8, #1
 80059fe:	e7ec      	b.n	80059da <_printf_float+0x33e>
 8005a00:	4613      	mov	r3, r2
 8005a02:	4631      	mov	r1, r6
 8005a04:	4642      	mov	r2, r8
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d1c0      	bne.n	8005990 <_printf_float+0x2f4>
 8005a0e:	e6a0      	b.n	8005752 <_printf_float+0xb6>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f ae99 	beq.w	8005752 <_printf_float+0xb6>
 8005a20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a22:	f10b 0b01 	add.w	fp, fp, #1
 8005a26:	e7b9      	b.n	800599c <_printf_float+0x300>
 8005a28:	4631      	mov	r1, r6
 8005a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	d1bf      	bne.n	80059b6 <_printf_float+0x31a>
 8005a36:	e68c      	b.n	8005752 <_printf_float+0xb6>
 8005a38:	464b      	mov	r3, r9
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	eb08 020a 	add.w	r2, r8, sl
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	d1c2      	bne.n	80059ce <_printf_float+0x332>
 8005a48:	e683      	b.n	8005752 <_printf_float+0xb6>
 8005a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	dc01      	bgt.n	8005a54 <_printf_float+0x3b8>
 8005a50:	07db      	lsls	r3, r3, #31
 8005a52:	d537      	bpl.n	8005ac4 <_printf_float+0x428>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4642      	mov	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae77 	beq.w	8005752 <_printf_float+0xb6>
 8005a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f ae6f 	beq.w	8005752 <_printf_float+0xb6>
 8005a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f7fa ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8005a80:	b9d8      	cbnz	r0, 8005aba <_printf_float+0x41e>
 8005a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a84:	f108 0201 	add.w	r2, r8, #1
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	d10e      	bne.n	8005ab2 <_printf_float+0x416>
 8005a94:	e65d      	b.n	8005752 <_printf_float+0xb6>
 8005a96:	2301      	movs	r3, #1
 8005a98:	464a      	mov	r2, r9
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f ae56 	beq.w	8005752 <_printf_float+0xb6>
 8005aa6:	f108 0801 	add.w	r8, r8, #1
 8005aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4543      	cmp	r3, r8
 8005ab0:	dcf1      	bgt.n	8005a96 <_printf_float+0x3fa>
 8005ab2:	4653      	mov	r3, sl
 8005ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ab8:	e6e0      	b.n	800587c <_printf_float+0x1e0>
 8005aba:	f04f 0800 	mov.w	r8, #0
 8005abe:	f104 091a 	add.w	r9, r4, #26
 8005ac2:	e7f2      	b.n	8005aaa <_printf_float+0x40e>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	e7df      	b.n	8005a8a <_printf_float+0x3ee>
 8005aca:	2301      	movs	r3, #1
 8005acc:	464a      	mov	r2, r9
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f ae3c 	beq.w	8005752 <_printf_float+0xb6>
 8005ada:	f108 0801 	add.w	r8, r8, #1
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	dcf0      	bgt.n	8005aca <_printf_float+0x42e>
 8005ae8:	e6fd      	b.n	80058e6 <_printf_float+0x24a>
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	f104 0919 	add.w	r9, r4, #25
 8005af2:	e7f4      	b.n	8005ade <_printf_float+0x442>

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	4607      	mov	r7, r0
 8005b02:	4293      	cmp	r3, r2
 8005b04:	bfb8      	it	lt
 8005b06:	4613      	movlt	r3, r2
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b0e:	460c      	mov	r4, r1
 8005b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc28      	bgt.n	8005b8e <_printf_common+0x9a>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42d      	bmi.n	8005ba8 <_printf_common+0xb4>
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d020      	beq.n	8005b9c <_printf_common+0xa8>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	68e5      	ldr	r5, [r4, #12]
 8005b5e:	f003 0306 	and.w	r3, r3, #6
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	bf18      	it	ne
 8005b66:	2500      	movne	r5, #0
 8005b68:	6832      	ldr	r2, [r6, #0]
 8005b6a:	f04f 0600 	mov.w	r6, #0
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	bf08      	it	eq
 8005b72:	1aad      	subeq	r5, r5, r2
 8005b74:	6922      	ldr	r2, [r4, #16]
 8005b76:	bf08      	it	eq
 8005b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bfc4      	itt	gt
 8005b80:	1a9b      	subgt	r3, r3, r2
 8005b82:	18ed      	addgt	r5, r5, r3
 8005b84:	341a      	adds	r4, #26
 8005b86:	42b5      	cmp	r5, r6
 8005b88:	d11a      	bne.n	8005bc0 <_printf_common+0xcc>
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e008      	b.n	8005ba0 <_printf_common+0xac>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4652      	mov	r2, sl
 8005b92:	4649      	mov	r1, r9
 8005b94:	4638      	mov	r0, r7
 8005b96:	47c0      	blx	r8
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d103      	bne.n	8005ba4 <_printf_common+0xb0>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	e7c4      	b.n	8005b32 <_printf_common+0x3e>
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	18e1      	adds	r1, r4, r3
 8005bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb6:	4422      	add	r2, r4
 8005bb8:	3302      	adds	r3, #2
 8005bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bbe:	e7c5      	b.n	8005b4c <_printf_common+0x58>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	47c0      	blx	r8
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d0e6      	beq.n	8005b9c <_printf_common+0xa8>
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7d9      	b.n	8005b86 <_printf_common+0x92>
	...

08005bd4 <_printf_i>:
 8005bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	460c      	mov	r4, r1
 8005bda:	7e27      	ldrb	r7, [r4, #24]
 8005bdc:	4691      	mov	r9, r2
 8005bde:	2f78      	cmp	r7, #120	; 0x78
 8005be0:	4680      	mov	r8, r0
 8005be2:	469a      	mov	sl, r3
 8005be4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bea:	d807      	bhi.n	8005bfc <_printf_i+0x28>
 8005bec:	2f62      	cmp	r7, #98	; 0x62
 8005bee:	d80a      	bhi.n	8005c06 <_printf_i+0x32>
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	f000 80d9 	beq.w	8005da8 <_printf_i+0x1d4>
 8005bf6:	2f58      	cmp	r7, #88	; 0x58
 8005bf8:	f000 80a4 	beq.w	8005d44 <_printf_i+0x170>
 8005bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c04:	e03a      	b.n	8005c7c <_printf_i+0xa8>
 8005c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c0a:	2b15      	cmp	r3, #21
 8005c0c:	d8f6      	bhi.n	8005bfc <_printf_i+0x28>
 8005c0e:	a001      	add	r0, pc, #4	; (adr r0, 8005c14 <_printf_i+0x40>)
 8005c10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c14:	08005c6d 	.word	0x08005c6d
 8005c18:	08005c81 	.word	0x08005c81
 8005c1c:	08005bfd 	.word	0x08005bfd
 8005c20:	08005bfd 	.word	0x08005bfd
 8005c24:	08005bfd 	.word	0x08005bfd
 8005c28:	08005bfd 	.word	0x08005bfd
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005bfd 	.word	0x08005bfd
 8005c34:	08005bfd 	.word	0x08005bfd
 8005c38:	08005bfd 	.word	0x08005bfd
 8005c3c:	08005bfd 	.word	0x08005bfd
 8005c40:	08005d8f 	.word	0x08005d8f
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005d71 	.word	0x08005d71
 8005c4c:	08005bfd 	.word	0x08005bfd
 8005c50:	08005bfd 	.word	0x08005bfd
 8005c54:	08005db1 	.word	0x08005db1
 8005c58:	08005bfd 	.word	0x08005bfd
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005bfd 	.word	0x08005bfd
 8005c64:	08005bfd 	.word	0x08005bfd
 8005c68:	08005d79 	.word	0x08005d79
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	600a      	str	r2, [r1, #0]
 8005c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0a4      	b.n	8005dca <_printf_i+0x1f6>
 8005c80:	6825      	ldr	r5, [r4, #0]
 8005c82:	6808      	ldr	r0, [r1, #0]
 8005c84:	062e      	lsls	r6, r5, #24
 8005c86:	f100 0304 	add.w	r3, r0, #4
 8005c8a:	d50a      	bpl.n	8005ca2 <_printf_i+0xce>
 8005c8c:	6805      	ldr	r5, [r0, #0]
 8005c8e:	600b      	str	r3, [r1, #0]
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	da03      	bge.n	8005c9c <_printf_i+0xc8>
 8005c94:	232d      	movs	r3, #45	; 0x2d
 8005c96:	426d      	negs	r5, r5
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	230a      	movs	r3, #10
 8005c9e:	485e      	ldr	r0, [pc, #376]	; (8005e18 <_printf_i+0x244>)
 8005ca0:	e019      	b.n	8005cd6 <_printf_i+0x102>
 8005ca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ca6:	6805      	ldr	r5, [r0, #0]
 8005ca8:	600b      	str	r3, [r1, #0]
 8005caa:	bf18      	it	ne
 8005cac:	b22d      	sxthne	r5, r5
 8005cae:	e7ef      	b.n	8005c90 <_printf_i+0xbc>
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	6825      	ldr	r5, [r4, #0]
 8005cb4:	1d18      	adds	r0, r3, #4
 8005cb6:	6008      	str	r0, [r1, #0]
 8005cb8:	0628      	lsls	r0, r5, #24
 8005cba:	d501      	bpl.n	8005cc0 <_printf_i+0xec>
 8005cbc:	681d      	ldr	r5, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <_printf_i+0xf2>
 8005cc0:	0669      	lsls	r1, r5, #25
 8005cc2:	d5fb      	bpl.n	8005cbc <_printf_i+0xe8>
 8005cc4:	881d      	ldrh	r5, [r3, #0]
 8005cc6:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc8:	bf0c      	ite	eq
 8005cca:	2308      	moveq	r3, #8
 8005ccc:	230a      	movne	r3, #10
 8005cce:	4852      	ldr	r0, [pc, #328]	; (8005e18 <_printf_i+0x244>)
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cd6:	6866      	ldr	r6, [r4, #4]
 8005cd8:	2e00      	cmp	r6, #0
 8005cda:	bfa8      	it	ge
 8005cdc:	6821      	ldrge	r1, [r4, #0]
 8005cde:	60a6      	str	r6, [r4, #8]
 8005ce0:	bfa4      	itt	ge
 8005ce2:	f021 0104 	bicge.w	r1, r1, #4
 8005ce6:	6021      	strge	r1, [r4, #0]
 8005ce8:	b90d      	cbnz	r5, 8005cee <_printf_i+0x11a>
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d04d      	beq.n	8005d8a <_printf_i+0x1b6>
 8005cee:	4616      	mov	r6, r2
 8005cf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cf4:	fb03 5711 	mls	r7, r3, r1, r5
 8005cf8:	5dc7      	ldrb	r7, [r0, r7]
 8005cfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cfe:	462f      	mov	r7, r5
 8005d00:	42bb      	cmp	r3, r7
 8005d02:	460d      	mov	r5, r1
 8005d04:	d9f4      	bls.n	8005cf0 <_printf_i+0x11c>
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d10b      	bne.n	8005d22 <_printf_i+0x14e>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	07df      	lsls	r7, r3, #31
 8005d0e:	d508      	bpl.n	8005d22 <_printf_i+0x14e>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	6861      	ldr	r1, [r4, #4]
 8005d14:	4299      	cmp	r1, r3
 8005d16:	bfde      	ittt	le
 8005d18:	2330      	movle	r3, #48	; 0x30
 8005d1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d22:	1b92      	subs	r2, r2, r6
 8005d24:	6122      	str	r2, [r4, #16]
 8005d26:	464b      	mov	r3, r9
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f8cd a000 	str.w	sl, [sp]
 8005d30:	aa03      	add	r2, sp, #12
 8005d32:	f7ff fedf 	bl	8005af4 <_printf_common>
 8005d36:	3001      	adds	r0, #1
 8005d38:	d14c      	bne.n	8005dd4 <_printf_i+0x200>
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3e:	b004      	add	sp, #16
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	4834      	ldr	r0, [pc, #208]	; (8005e18 <_printf_i+0x244>)
 8005d46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d4a:	680e      	ldr	r6, [r1, #0]
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d52:	061f      	lsls	r7, r3, #24
 8005d54:	600e      	str	r6, [r1, #0]
 8005d56:	d514      	bpl.n	8005d82 <_printf_i+0x1ae>
 8005d58:	07d9      	lsls	r1, r3, #31
 8005d5a:	bf44      	itt	mi
 8005d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d60:	6023      	strmi	r3, [r4, #0]
 8005d62:	b91d      	cbnz	r5, 8005d6c <_printf_i+0x198>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	f023 0320 	bic.w	r3, r3, #32
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	e7af      	b.n	8005cd0 <_printf_i+0xfc>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	f043 0320 	orr.w	r3, r3, #32
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	2378      	movs	r3, #120	; 0x78
 8005d7a:	4828      	ldr	r0, [pc, #160]	; (8005e1c <_printf_i+0x248>)
 8005d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d80:	e7e3      	b.n	8005d4a <_printf_i+0x176>
 8005d82:	065e      	lsls	r6, r3, #25
 8005d84:	bf48      	it	mi
 8005d86:	b2ad      	uxthmi	r5, r5
 8005d88:	e7e6      	b.n	8005d58 <_printf_i+0x184>
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	e7bb      	b.n	8005d06 <_printf_i+0x132>
 8005d8e:	680b      	ldr	r3, [r1, #0]
 8005d90:	6826      	ldr	r6, [r4, #0]
 8005d92:	1d1d      	adds	r5, r3, #4
 8005d94:	6960      	ldr	r0, [r4, #20]
 8005d96:	600d      	str	r5, [r1, #0]
 8005d98:	0635      	lsls	r5, r6, #24
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	d501      	bpl.n	8005da2 <_printf_i+0x1ce>
 8005d9e:	6018      	str	r0, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <_printf_i+0x1d4>
 8005da2:	0671      	lsls	r1, r6, #25
 8005da4:	d5fb      	bpl.n	8005d9e <_printf_i+0x1ca>
 8005da6:	8018      	strh	r0, [r3, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	4616      	mov	r6, r2
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	e7ba      	b.n	8005d26 <_printf_i+0x152>
 8005db0:	680b      	ldr	r3, [r1, #0]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	600a      	str	r2, [r1, #0]
 8005db6:	681e      	ldr	r6, [r3, #0]
 8005db8:	2100      	movs	r1, #0
 8005dba:	4630      	mov	r0, r6
 8005dbc:	6862      	ldr	r2, [r4, #4]
 8005dbe:	f000 fee1 	bl	8006b84 <memchr>
 8005dc2:	b108      	cbz	r0, 8005dc8 <_printf_i+0x1f4>
 8005dc4:	1b80      	subs	r0, r0, r6
 8005dc6:	6060      	str	r0, [r4, #4]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd2:	e7a8      	b.n	8005d26 <_printf_i+0x152>
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4640      	mov	r0, r8
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	47d0      	blx	sl
 8005dde:	3001      	adds	r0, #1
 8005de0:	d0ab      	beq.n	8005d3a <_printf_i+0x166>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	079b      	lsls	r3, r3, #30
 8005de6:	d413      	bmi.n	8005e10 <_printf_i+0x23c>
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	4298      	cmp	r0, r3
 8005dee:	bfb8      	it	lt
 8005df0:	4618      	movlt	r0, r3
 8005df2:	e7a4      	b.n	8005d3e <_printf_i+0x16a>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4632      	mov	r2, r6
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	47d0      	blx	sl
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d09b      	beq.n	8005d3a <_printf_i+0x166>
 8005e02:	3501      	adds	r5, #1
 8005e04:	68e3      	ldr	r3, [r4, #12]
 8005e06:	9903      	ldr	r1, [sp, #12]
 8005e08:	1a5b      	subs	r3, r3, r1
 8005e0a:	42ab      	cmp	r3, r5
 8005e0c:	dcf2      	bgt.n	8005df4 <_printf_i+0x220>
 8005e0e:	e7eb      	b.n	8005de8 <_printf_i+0x214>
 8005e10:	2500      	movs	r5, #0
 8005e12:	f104 0619 	add.w	r6, r4, #25
 8005e16:	e7f5      	b.n	8005e04 <_printf_i+0x230>
 8005e18:	080081de 	.word	0x080081de
 8005e1c:	080081ef 	.word	0x080081ef

08005e20 <_sbrk_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	2300      	movs	r3, #0
 8005e24:	4d05      	ldr	r5, [pc, #20]	; (8005e3c <_sbrk_r+0x1c>)
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	f7fb fff6 	bl	8001e1c <_sbrk>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_sbrk_r+0x1a>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_sbrk_r+0x1a>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000374 	.word	0x20000374

08005e40 <siprintf>:
 8005e40:	b40e      	push	{r1, r2, r3}
 8005e42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e46:	b500      	push	{lr}
 8005e48:	b09c      	sub	sp, #112	; 0x70
 8005e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e4c:	9002      	str	r0, [sp, #8]
 8005e4e:	9006      	str	r0, [sp, #24]
 8005e50:	9107      	str	r1, [sp, #28]
 8005e52:	9104      	str	r1, [sp, #16]
 8005e54:	4808      	ldr	r0, [pc, #32]	; (8005e78 <siprintf+0x38>)
 8005e56:	4909      	ldr	r1, [pc, #36]	; (8005e7c <siprintf+0x3c>)
 8005e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5c:	9105      	str	r1, [sp, #20]
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	a902      	add	r1, sp, #8
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	f001 faa2 	bl	80073ac <_svfiprintf_r>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	b01c      	add	sp, #112	; 0x70
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b003      	add	sp, #12
 8005e76:	4770      	bx	lr
 8005e78:	20000014 	.word	0x20000014
 8005e7c:	ffff0208 	.word	0xffff0208

08005e80 <quorem>:
 8005e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	6903      	ldr	r3, [r0, #16]
 8005e86:	690c      	ldr	r4, [r1, #16]
 8005e88:	4607      	mov	r7, r0
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	f2c0 8083 	blt.w	8005f96 <quorem+0x116>
 8005e90:	3c01      	subs	r4, #1
 8005e92:	f100 0514 	add.w	r5, r0, #20
 8005e96:	f101 0814 	add.w	r8, r1, #20
 8005e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb8:	d332      	bcc.n	8005f20 <quorem+0xa0>
 8005eba:	f04f 0e00 	mov.w	lr, #0
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	46ac      	mov	ip, r5
 8005ec2:	46f2      	mov	sl, lr
 8005ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ec8:	b293      	uxth	r3, r2
 8005eca:	fb06 e303 	mla	r3, r6, r3, lr
 8005ece:	0c12      	lsrs	r2, r2, #16
 8005ed0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ed4:	fb06 e202 	mla	r2, r6, r2, lr
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ebaa 0303 	sub.w	r3, sl, r3
 8005ede:	f8dc a000 	ldr.w	sl, [ip]
 8005ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ee6:	fa1f fa8a 	uxth.w	sl, sl
 8005eea:	4453      	add	r3, sl
 8005eec:	fa1f fa82 	uxth.w	sl, r2
 8005ef0:	f8dc 2000 	ldr.w	r2, [ip]
 8005ef4:	4581      	cmp	r9, r0
 8005ef6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f08:	f84c 3b04 	str.w	r3, [ip], #4
 8005f0c:	d2da      	bcs.n	8005ec4 <quorem+0x44>
 8005f0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f12:	b92b      	cbnz	r3, 8005f20 <quorem+0xa0>
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	3b04      	subs	r3, #4
 8005f18:	429d      	cmp	r5, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	d32f      	bcc.n	8005f7e <quorem+0xfe>
 8005f1e:	613c      	str	r4, [r7, #16]
 8005f20:	4638      	mov	r0, r7
 8005f22:	f001 f8d1 	bl	80070c8 <__mcmp>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	db25      	blt.n	8005f76 <quorem+0xf6>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f04f 0c00 	mov.w	ip, #0
 8005f30:	3601      	adds	r6, #1
 8005f32:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f36:	f8d0 e000 	ldr.w	lr, [r0]
 8005f3a:	b28b      	uxth	r3, r1
 8005f3c:	ebac 0303 	sub.w	r3, ip, r3
 8005f40:	fa1f f28e 	uxth.w	r2, lr
 8005f44:	4413      	add	r3, r2
 8005f46:	0c0a      	lsrs	r2, r1, #16
 8005f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f56:	45c1      	cmp	r9, r8
 8005f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f5c:	f840 3b04 	str.w	r3, [r0], #4
 8005f60:	d2e7      	bcs.n	8005f32 <quorem+0xb2>
 8005f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f6a:	b922      	cbnz	r2, 8005f76 <quorem+0xf6>
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	429d      	cmp	r5, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	d30a      	bcc.n	8005f8a <quorem+0x10a>
 8005f74:	613c      	str	r4, [r7, #16]
 8005f76:	4630      	mov	r0, r6
 8005f78:	b003      	add	sp, #12
 8005f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	d1cb      	bne.n	8005f1e <quorem+0x9e>
 8005f86:	3c01      	subs	r4, #1
 8005f88:	e7c6      	b.n	8005f18 <quorem+0x98>
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	d1f0      	bne.n	8005f74 <quorem+0xf4>
 8005f92:	3c01      	subs	r4, #1
 8005f94:	e7eb      	b.n	8005f6e <quorem+0xee>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e7ee      	b.n	8005f78 <quorem+0xf8>
 8005f9a:	0000      	movs	r0, r0
 8005f9c:	0000      	movs	r0, r0
	...

08005fa0 <_dtoa_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005faa:	b099      	sub	sp, #100	; 0x64
 8005fac:	4605      	mov	r5, r0
 8005fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fb6:	b974      	cbnz	r4, 8005fd6 <_dtoa_r+0x36>
 8005fb8:	2010      	movs	r0, #16
 8005fba:	f7ff fa13 	bl	80053e4 <malloc>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6268      	str	r0, [r5, #36]	; 0x24
 8005fc2:	b920      	cbnz	r0, 8005fce <_dtoa_r+0x2e>
 8005fc4:	21ea      	movs	r1, #234	; 0xea
 8005fc6:	4bae      	ldr	r3, [pc, #696]	; (8006280 <_dtoa_r+0x2e0>)
 8005fc8:	48ae      	ldr	r0, [pc, #696]	; (8006284 <_dtoa_r+0x2e4>)
 8005fca:	f001 faef 	bl	80075ac <__assert_func>
 8005fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd2:	6004      	str	r4, [r0, #0]
 8005fd4:	60c4      	str	r4, [r0, #12]
 8005fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	b151      	cbz	r1, 8005ff2 <_dtoa_r+0x52>
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4093      	lsls	r3, r2
 8005fe2:	604a      	str	r2, [r1, #4]
 8005fe4:	608b      	str	r3, [r1, #8]
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f000 fe34 	bl	8006c54 <_Bfree>
 8005fec:	2200      	movs	r2, #0
 8005fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	1e3b      	subs	r3, r7, #0
 8005ff4:	bfaf      	iteee	ge
 8005ff6:	2300      	movge	r3, #0
 8005ff8:	2201      	movlt	r2, #1
 8005ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ffe:	9305      	strlt	r3, [sp, #20]
 8006000:	bfa8      	it	ge
 8006002:	f8c8 3000 	strge.w	r3, [r8]
 8006006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800600a:	4b9f      	ldr	r3, [pc, #636]	; (8006288 <_dtoa_r+0x2e8>)
 800600c:	bfb8      	it	lt
 800600e:	f8c8 2000 	strlt.w	r2, [r8]
 8006012:	ea33 0309 	bics.w	r3, r3, r9
 8006016:	d119      	bne.n	800604c <_dtoa_r+0xac>
 8006018:	f242 730f 	movw	r3, #9999	; 0x270f
 800601c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006024:	4333      	orrs	r3, r6
 8006026:	f000 8580 	beq.w	8006b2a <_dtoa_r+0xb8a>
 800602a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800602c:	b953      	cbnz	r3, 8006044 <_dtoa_r+0xa4>
 800602e:	4b97      	ldr	r3, [pc, #604]	; (800628c <_dtoa_r+0x2ec>)
 8006030:	e022      	b.n	8006078 <_dtoa_r+0xd8>
 8006032:	4b97      	ldr	r3, [pc, #604]	; (8006290 <_dtoa_r+0x2f0>)
 8006034:	9308      	str	r3, [sp, #32]
 8006036:	3308      	adds	r3, #8
 8006038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	9808      	ldr	r0, [sp, #32]
 800603e:	b019      	add	sp, #100	; 0x64
 8006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006044:	4b91      	ldr	r3, [pc, #580]	; (800628c <_dtoa_r+0x2ec>)
 8006046:	9308      	str	r3, [sp, #32]
 8006048:	3303      	adds	r3, #3
 800604a:	e7f5      	b.n	8006038 <_dtoa_r+0x98>
 800604c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006050:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006058:	2200      	movs	r2, #0
 800605a:	2300      	movs	r3, #0
 800605c:	f7fa fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8006060:	4680      	mov	r8, r0
 8006062:	b158      	cbz	r0, 800607c <_dtoa_r+0xdc>
 8006064:	2301      	movs	r3, #1
 8006066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8559 	beq.w	8006b24 <_dtoa_r+0xb84>
 8006072:	4888      	ldr	r0, [pc, #544]	; (8006294 <_dtoa_r+0x2f4>)
 8006074:	6018      	str	r0, [r3, #0]
 8006076:	1e43      	subs	r3, r0, #1
 8006078:	9308      	str	r3, [sp, #32]
 800607a:	e7df      	b.n	800603c <_dtoa_r+0x9c>
 800607c:	ab16      	add	r3, sp, #88	; 0x58
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	ab17      	add	r3, sp, #92	; 0x5c
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4628      	mov	r0, r5
 8006086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800608a:	f001 f8c9 	bl	8007220 <__d2b>
 800608e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006092:	4682      	mov	sl, r0
 8006094:	2c00      	cmp	r4, #0
 8006096:	d07e      	beq.n	8006196 <_dtoa_r+0x1f6>
 8006098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800609c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060b2:	2200      	movs	r2, #0
 80060b4:	4b78      	ldr	r3, [pc, #480]	; (8006298 <_dtoa_r+0x2f8>)
 80060b6:	f7fa f857 	bl	8000168 <__aeabi_dsub>
 80060ba:	a36b      	add	r3, pc, #428	; (adr r3, 8006268 <_dtoa_r+0x2c8>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa fa0a 	bl	80004d8 <__aeabi_dmul>
 80060c4:	a36a      	add	r3, pc, #424	; (adr r3, 8006270 <_dtoa_r+0x2d0>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f84f 	bl	800016c <__adddf3>
 80060ce:	4606      	mov	r6, r0
 80060d0:	4620      	mov	r0, r4
 80060d2:	460f      	mov	r7, r1
 80060d4:	f7fa f996 	bl	8000404 <__aeabi_i2d>
 80060d8:	a367      	add	r3, pc, #412	; (adr r3, 8006278 <_dtoa_r+0x2d8>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa f9fb 	bl	80004d8 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4630      	mov	r0, r6
 80060e8:	4639      	mov	r1, r7
 80060ea:	f7fa f83f 	bl	800016c <__adddf3>
 80060ee:	4606      	mov	r6, r0
 80060f0:	460f      	mov	r7, r1
 80060f2:	f7fa fca1 	bl	8000a38 <__aeabi_d2iz>
 80060f6:	2200      	movs	r2, #0
 80060f8:	4681      	mov	r9, r0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f7fa fc5c 	bl	80009bc <__aeabi_dcmplt>
 8006104:	b148      	cbz	r0, 800611a <_dtoa_r+0x17a>
 8006106:	4648      	mov	r0, r9
 8006108:	f7fa f97c 	bl	8000404 <__aeabi_i2d>
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	f7fa fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006114:	b908      	cbnz	r0, 800611a <_dtoa_r+0x17a>
 8006116:	f109 39ff 	add.w	r9, r9, #4294967295
 800611a:	f1b9 0f16 	cmp.w	r9, #22
 800611e:	d857      	bhi.n	80061d0 <_dtoa_r+0x230>
 8006120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006124:	4b5d      	ldr	r3, [pc, #372]	; (800629c <_dtoa_r+0x2fc>)
 8006126:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fc45 	bl	80009bc <__aeabi_dcmplt>
 8006132:	2800      	cmp	r0, #0
 8006134:	d04e      	beq.n	80061d4 <_dtoa_r+0x234>
 8006136:	2300      	movs	r3, #0
 8006138:	f109 39ff 	add.w	r9, r9, #4294967295
 800613c:	930f      	str	r3, [sp, #60]	; 0x3c
 800613e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006140:	1b1c      	subs	r4, r3, r4
 8006142:	1e63      	subs	r3, r4, #1
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	bf49      	itett	mi
 8006148:	f1c4 0301 	rsbmi	r3, r4, #1
 800614c:	2300      	movpl	r3, #0
 800614e:	9306      	strmi	r3, [sp, #24]
 8006150:	2300      	movmi	r3, #0
 8006152:	bf54      	ite	pl
 8006154:	9306      	strpl	r3, [sp, #24]
 8006156:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	db3c      	blt.n	80061d8 <_dtoa_r+0x238>
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006164:	444b      	add	r3, r9
 8006166:	9309      	str	r3, [sp, #36]	; 0x24
 8006168:	2300      	movs	r3, #0
 800616a:	930a      	str	r3, [sp, #40]	; 0x28
 800616c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800616e:	2b09      	cmp	r3, #9
 8006170:	d86c      	bhi.n	800624c <_dtoa_r+0x2ac>
 8006172:	2b05      	cmp	r3, #5
 8006174:	bfc4      	itt	gt
 8006176:	3b04      	subgt	r3, #4
 8006178:	9322      	strgt	r3, [sp, #136]	; 0x88
 800617a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617c:	bfc8      	it	gt
 800617e:	2400      	movgt	r4, #0
 8006180:	f1a3 0302 	sub.w	r3, r3, #2
 8006184:	bfd8      	it	le
 8006186:	2401      	movle	r4, #1
 8006188:	2b03      	cmp	r3, #3
 800618a:	f200 808b 	bhi.w	80062a4 <_dtoa_r+0x304>
 800618e:	e8df f003 	tbb	[pc, r3]
 8006192:	4f2d      	.short	0x4f2d
 8006194:	5b4d      	.short	0x5b4d
 8006196:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800619a:	441c      	add	r4, r3
 800619c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	bfc3      	ittte	gt
 80061a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80061ac:	fa09 f303 	lslgt.w	r3, r9, r3
 80061b0:	f1c3 0320 	rsble	r3, r3, #32
 80061b4:	bfc6      	itte	gt
 80061b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061ba:	4318      	orrgt	r0, r3
 80061bc:	fa06 f003 	lslle.w	r0, r6, r3
 80061c0:	f7fa f910 	bl	80003e4 <__aeabi_ui2d>
 80061c4:	2301      	movs	r3, #1
 80061c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061ca:	3c01      	subs	r4, #1
 80061cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80061ce:	e770      	b.n	80060b2 <_dtoa_r+0x112>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e7b3      	b.n	800613c <_dtoa_r+0x19c>
 80061d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80061d6:	e7b2      	b.n	800613e <_dtoa_r+0x19e>
 80061d8:	9b06      	ldr	r3, [sp, #24]
 80061da:	eba3 0309 	sub.w	r3, r3, r9
 80061de:	9306      	str	r3, [sp, #24]
 80061e0:	f1c9 0300 	rsb	r3, r9, #0
 80061e4:	930a      	str	r3, [sp, #40]	; 0x28
 80061e6:	2300      	movs	r3, #0
 80061e8:	930e      	str	r3, [sp, #56]	; 0x38
 80061ea:	e7bf      	b.n	800616c <_dtoa_r+0x1cc>
 80061ec:	2300      	movs	r3, #0
 80061ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80061f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dc59      	bgt.n	80062aa <_dtoa_r+0x30a>
 80061f6:	f04f 0b01 	mov.w	fp, #1
 80061fa:	465b      	mov	r3, fp
 80061fc:	f8cd b008 	str.w	fp, [sp, #8]
 8006200:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006204:	2200      	movs	r2, #0
 8006206:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006208:	6042      	str	r2, [r0, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	f102 0614 	add.w	r6, r2, #20
 8006210:	429e      	cmp	r6, r3
 8006212:	6841      	ldr	r1, [r0, #4]
 8006214:	d94f      	bls.n	80062b6 <_dtoa_r+0x316>
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fcdc 	bl	8006bd4 <_Balloc>
 800621c:	9008      	str	r0, [sp, #32]
 800621e:	2800      	cmp	r0, #0
 8006220:	d14d      	bne.n	80062be <_dtoa_r+0x31e>
 8006222:	4602      	mov	r2, r0
 8006224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006228:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <_dtoa_r+0x300>)
 800622a:	e6cd      	b.n	8005fc8 <_dtoa_r+0x28>
 800622c:	2301      	movs	r3, #1
 800622e:	e7de      	b.n	80061ee <_dtoa_r+0x24e>
 8006230:	2300      	movs	r3, #0
 8006232:	930b      	str	r3, [sp, #44]	; 0x2c
 8006234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006236:	eb09 0b03 	add.w	fp, r9, r3
 800623a:	f10b 0301 	add.w	r3, fp, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	9302      	str	r3, [sp, #8]
 8006242:	bfb8      	it	lt
 8006244:	2301      	movlt	r3, #1
 8006246:	e7dd      	b.n	8006204 <_dtoa_r+0x264>
 8006248:	2301      	movs	r3, #1
 800624a:	e7f2      	b.n	8006232 <_dtoa_r+0x292>
 800624c:	2401      	movs	r4, #1
 800624e:	2300      	movs	r3, #0
 8006250:	940b      	str	r4, [sp, #44]	; 0x2c
 8006252:	9322      	str	r3, [sp, #136]	; 0x88
 8006254:	f04f 3bff 	mov.w	fp, #4294967295
 8006258:	2200      	movs	r2, #0
 800625a:	2312      	movs	r3, #18
 800625c:	f8cd b008 	str.w	fp, [sp, #8]
 8006260:	9223      	str	r2, [sp, #140]	; 0x8c
 8006262:	e7cf      	b.n	8006204 <_dtoa_r+0x264>
 8006264:	f3af 8000 	nop.w
 8006268:	636f4361 	.word	0x636f4361
 800626c:	3fd287a7 	.word	0x3fd287a7
 8006270:	8b60c8b3 	.word	0x8b60c8b3
 8006274:	3fc68a28 	.word	0x3fc68a28
 8006278:	509f79fb 	.word	0x509f79fb
 800627c:	3fd34413 	.word	0x3fd34413
 8006280:	0800820d 	.word	0x0800820d
 8006284:	08008224 	.word	0x08008224
 8006288:	7ff00000 	.word	0x7ff00000
 800628c:	08008209 	.word	0x08008209
 8006290:	08008200 	.word	0x08008200
 8006294:	080081dd 	.word	0x080081dd
 8006298:	3ff80000 	.word	0x3ff80000
 800629c:	08008320 	.word	0x08008320
 80062a0:	08008283 	.word	0x08008283
 80062a4:	2301      	movs	r3, #1
 80062a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a8:	e7d4      	b.n	8006254 <_dtoa_r+0x2b4>
 80062aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80062ae:	465b      	mov	r3, fp
 80062b0:	f8cd b008 	str.w	fp, [sp, #8]
 80062b4:	e7a6      	b.n	8006204 <_dtoa_r+0x264>
 80062b6:	3101      	adds	r1, #1
 80062b8:	6041      	str	r1, [r0, #4]
 80062ba:	0052      	lsls	r2, r2, #1
 80062bc:	e7a6      	b.n	800620c <_dtoa_r+0x26c>
 80062be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062c0:	9a08      	ldr	r2, [sp, #32]
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	9b02      	ldr	r3, [sp, #8]
 80062c6:	2b0e      	cmp	r3, #14
 80062c8:	f200 80a8 	bhi.w	800641c <_dtoa_r+0x47c>
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	f000 80a5 	beq.w	800641c <_dtoa_r+0x47c>
 80062d2:	f1b9 0f00 	cmp.w	r9, #0
 80062d6:	dd34      	ble.n	8006342 <_dtoa_r+0x3a2>
 80062d8:	4a9a      	ldr	r2, [pc, #616]	; (8006544 <_dtoa_r+0x5a4>)
 80062da:	f009 030f 	and.w	r3, r9, #15
 80062de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 80062f2:	d016      	beq.n	8006322 <_dtoa_r+0x382>
 80062f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062f8:	4b93      	ldr	r3, [pc, #588]	; (8006548 <_dtoa_r+0x5a8>)
 80062fa:	2703      	movs	r7, #3
 80062fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006300:	f7fa fa14 	bl	800072c <__aeabi_ddiv>
 8006304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006308:	f004 040f 	and.w	r4, r4, #15
 800630c:	4e8e      	ldr	r6, [pc, #568]	; (8006548 <_dtoa_r+0x5a8>)
 800630e:	b954      	cbnz	r4, 8006326 <_dtoa_r+0x386>
 8006310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006318:	f7fa fa08 	bl	800072c <__aeabi_ddiv>
 800631c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006320:	e029      	b.n	8006376 <_dtoa_r+0x3d6>
 8006322:	2702      	movs	r7, #2
 8006324:	e7f2      	b.n	800630c <_dtoa_r+0x36c>
 8006326:	07e1      	lsls	r1, r4, #31
 8006328:	d508      	bpl.n	800633c <_dtoa_r+0x39c>
 800632a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800632e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800633a:	3701      	adds	r7, #1
 800633c:	1064      	asrs	r4, r4, #1
 800633e:	3608      	adds	r6, #8
 8006340:	e7e5      	b.n	800630e <_dtoa_r+0x36e>
 8006342:	f000 80a5 	beq.w	8006490 <_dtoa_r+0x4f0>
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800634a:	f1c9 0400 	rsb	r4, r9, #0
 800634e:	4b7d      	ldr	r3, [pc, #500]	; (8006544 <_dtoa_r+0x5a4>)
 8006350:	f004 020f 	and.w	r2, r4, #15
 8006354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	2702      	movs	r7, #2
 8006362:	2300      	movs	r3, #0
 8006364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006368:	4e77      	ldr	r6, [pc, #476]	; (8006548 <_dtoa_r+0x5a8>)
 800636a:	1124      	asrs	r4, r4, #4
 800636c:	2c00      	cmp	r4, #0
 800636e:	f040 8084 	bne.w	800647a <_dtoa_r+0x4da>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d2      	bne.n	800631c <_dtoa_r+0x37c>
 8006376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 808b 	beq.w	8006494 <_dtoa_r+0x4f4>
 800637e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006382:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800638a:	2200      	movs	r2, #0
 800638c:	4b6f      	ldr	r3, [pc, #444]	; (800654c <_dtoa_r+0x5ac>)
 800638e:	f7fa fb15 	bl	80009bc <__aeabi_dcmplt>
 8006392:	2800      	cmp	r0, #0
 8006394:	d07e      	beq.n	8006494 <_dtoa_r+0x4f4>
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d07b      	beq.n	8006494 <_dtoa_r+0x4f4>
 800639c:	f1bb 0f00 	cmp.w	fp, #0
 80063a0:	dd38      	ble.n	8006414 <_dtoa_r+0x474>
 80063a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063a6:	2200      	movs	r2, #0
 80063a8:	4b69      	ldr	r3, [pc, #420]	; (8006550 <_dtoa_r+0x5b0>)
 80063aa:	f7fa f895 	bl	80004d8 <__aeabi_dmul>
 80063ae:	465c      	mov	r4, fp
 80063b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b4:	f109 38ff 	add.w	r8, r9, #4294967295
 80063b8:	3701      	adds	r7, #1
 80063ba:	4638      	mov	r0, r7
 80063bc:	f7fa f822 	bl	8000404 <__aeabi_i2d>
 80063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	2200      	movs	r2, #0
 80063ca:	4b62      	ldr	r3, [pc, #392]	; (8006554 <_dtoa_r+0x5b4>)
 80063cc:	f7f9 fece 	bl	800016c <__adddf3>
 80063d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063d8:	9611      	str	r6, [sp, #68]	; 0x44
 80063da:	2c00      	cmp	r4, #0
 80063dc:	d15d      	bne.n	800649a <_dtoa_r+0x4fa>
 80063de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e2:	2200      	movs	r2, #0
 80063e4:	4b5c      	ldr	r3, [pc, #368]	; (8006558 <_dtoa_r+0x5b8>)
 80063e6:	f7f9 febf 	bl	8000168 <__aeabi_dsub>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063f2:	4633      	mov	r3, r6
 80063f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063f6:	f7fa faff 	bl	80009f8 <__aeabi_dcmpgt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f040 829e 	bne.w	800693c <_dtoa_r+0x99c>
 8006400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006406:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800640a:	f7fa fad7 	bl	80009bc <__aeabi_dcmplt>
 800640e:	2800      	cmp	r0, #0
 8006410:	f040 8292 	bne.w	8006938 <_dtoa_r+0x998>
 8006414:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006418:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800641c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800641e:	2b00      	cmp	r3, #0
 8006420:	f2c0 8153 	blt.w	80066ca <_dtoa_r+0x72a>
 8006424:	f1b9 0f0e 	cmp.w	r9, #14
 8006428:	f300 814f 	bgt.w	80066ca <_dtoa_r+0x72a>
 800642c:	4b45      	ldr	r3, [pc, #276]	; (8006544 <_dtoa_r+0x5a4>)
 800642e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006436:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800643a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800643c:	2b00      	cmp	r3, #0
 800643e:	f280 80db 	bge.w	80065f8 <_dtoa_r+0x658>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f300 80d7 	bgt.w	80065f8 <_dtoa_r+0x658>
 800644a:	f040 8274 	bne.w	8006936 <_dtoa_r+0x996>
 800644e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006452:	2200      	movs	r2, #0
 8006454:	4b40      	ldr	r3, [pc, #256]	; (8006558 <_dtoa_r+0x5b8>)
 8006456:	f7fa f83f 	bl	80004d8 <__aeabi_dmul>
 800645a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645e:	f7fa fac1 	bl	80009e4 <__aeabi_dcmpge>
 8006462:	9c02      	ldr	r4, [sp, #8]
 8006464:	4626      	mov	r6, r4
 8006466:	2800      	cmp	r0, #0
 8006468:	f040 824a 	bne.w	8006900 <_dtoa_r+0x960>
 800646c:	2331      	movs	r3, #49	; 0x31
 800646e:	9f08      	ldr	r7, [sp, #32]
 8006470:	f109 0901 	add.w	r9, r9, #1
 8006474:	f807 3b01 	strb.w	r3, [r7], #1
 8006478:	e246      	b.n	8006908 <_dtoa_r+0x968>
 800647a:	07e2      	lsls	r2, r4, #31
 800647c:	d505      	bpl.n	800648a <_dtoa_r+0x4ea>
 800647e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006482:	f7fa f829 	bl	80004d8 <__aeabi_dmul>
 8006486:	2301      	movs	r3, #1
 8006488:	3701      	adds	r7, #1
 800648a:	1064      	asrs	r4, r4, #1
 800648c:	3608      	adds	r6, #8
 800648e:	e76d      	b.n	800636c <_dtoa_r+0x3cc>
 8006490:	2702      	movs	r7, #2
 8006492:	e770      	b.n	8006376 <_dtoa_r+0x3d6>
 8006494:	46c8      	mov	r8, r9
 8006496:	9c02      	ldr	r4, [sp, #8]
 8006498:	e78f      	b.n	80063ba <_dtoa_r+0x41a>
 800649a:	9908      	ldr	r1, [sp, #32]
 800649c:	4b29      	ldr	r3, [pc, #164]	; (8006544 <_dtoa_r+0x5a4>)
 800649e:	4421      	add	r1, r4
 80064a0:	9112      	str	r1, [sp, #72]	; 0x48
 80064a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d055      	beq.n	8006560 <_dtoa_r+0x5c0>
 80064b4:	2000      	movs	r0, #0
 80064b6:	4929      	ldr	r1, [pc, #164]	; (800655c <_dtoa_r+0x5bc>)
 80064b8:	f7fa f938 	bl	800072c <__aeabi_ddiv>
 80064bc:	463b      	mov	r3, r7
 80064be:	4632      	mov	r2, r6
 80064c0:	f7f9 fe52 	bl	8000168 <__aeabi_dsub>
 80064c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064c8:	9f08      	ldr	r7, [sp, #32]
 80064ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ce:	f7fa fab3 	bl	8000a38 <__aeabi_d2iz>
 80064d2:	4604      	mov	r4, r0
 80064d4:	f7f9 ff96 	bl	8000404 <__aeabi_i2d>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064e0:	f7f9 fe42 	bl	8000168 <__aeabi_dsub>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	3430      	adds	r4, #48	; 0x30
 80064ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064f2:	f807 4b01 	strb.w	r4, [r7], #1
 80064f6:	f7fa fa61 	bl	80009bc <__aeabi_dcmplt>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d174      	bne.n	80065e8 <_dtoa_r+0x648>
 80064fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006502:	2000      	movs	r0, #0
 8006504:	4911      	ldr	r1, [pc, #68]	; (800654c <_dtoa_r+0x5ac>)
 8006506:	f7f9 fe2f 	bl	8000168 <__aeabi_dsub>
 800650a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800650e:	f7fa fa55 	bl	80009bc <__aeabi_dcmplt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 80b6 	bne.w	8006684 <_dtoa_r+0x6e4>
 8006518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800651a:	429f      	cmp	r7, r3
 800651c:	f43f af7a 	beq.w	8006414 <_dtoa_r+0x474>
 8006520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006524:	2200      	movs	r2, #0
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <_dtoa_r+0x5b0>)
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	2200      	movs	r2, #0
 800652e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <_dtoa_r+0x5b0>)
 8006538:	f7f9 ffce 	bl	80004d8 <__aeabi_dmul>
 800653c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006540:	e7c3      	b.n	80064ca <_dtoa_r+0x52a>
 8006542:	bf00      	nop
 8006544:	08008320 	.word	0x08008320
 8006548:	080082f8 	.word	0x080082f8
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	40240000 	.word	0x40240000
 8006554:	401c0000 	.word	0x401c0000
 8006558:	40140000 	.word	0x40140000
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 ffb8 	bl	80004d8 <__aeabi_dmul>
 8006568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800656e:	9c08      	ldr	r4, [sp, #32]
 8006570:	9314      	str	r3, [sp, #80]	; 0x50
 8006572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006576:	f7fa fa5f 	bl	8000a38 <__aeabi_d2iz>
 800657a:	9015      	str	r0, [sp, #84]	; 0x54
 800657c:	f7f9 ff42 	bl	8000404 <__aeabi_i2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006588:	f7f9 fdee 	bl	8000168 <__aeabi_dsub>
 800658c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800658e:	4606      	mov	r6, r0
 8006590:	3330      	adds	r3, #48	; 0x30
 8006592:	f804 3b01 	strb.w	r3, [r4], #1
 8006596:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006598:	460f      	mov	r7, r1
 800659a:	429c      	cmp	r4, r3
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	d124      	bne.n	80065ec <_dtoa_r+0x64c>
 80065a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065a6:	4bb3      	ldr	r3, [pc, #716]	; (8006874 <_dtoa_r+0x8d4>)
 80065a8:	f7f9 fde0 	bl	800016c <__adddf3>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7fa fa20 	bl	80009f8 <__aeabi_dcmpgt>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d162      	bne.n	8006682 <_dtoa_r+0x6e2>
 80065bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065c0:	2000      	movs	r0, #0
 80065c2:	49ac      	ldr	r1, [pc, #688]	; (8006874 <_dtoa_r+0x8d4>)
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa f9f4 	bl	80009bc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f43f af1d 	beq.w	8006414 <_dtoa_r+0x474>
 80065da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065dc:	1e7b      	subs	r3, r7, #1
 80065de:	9314      	str	r3, [sp, #80]	; 0x50
 80065e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d0f8      	beq.n	80065da <_dtoa_r+0x63a>
 80065e8:	46c1      	mov	r9, r8
 80065ea:	e03a      	b.n	8006662 <_dtoa_r+0x6c2>
 80065ec:	4ba2      	ldr	r3, [pc, #648]	; (8006878 <_dtoa_r+0x8d8>)
 80065ee:	f7f9 ff73 	bl	80004d8 <__aeabi_dmul>
 80065f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065f6:	e7bc      	b.n	8006572 <_dtoa_r+0x5d2>
 80065f8:	9f08      	ldr	r7, [sp, #32]
 80065fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006602:	f7fa f893 	bl	800072c <__aeabi_ddiv>
 8006606:	f7fa fa17 	bl	8000a38 <__aeabi_d2iz>
 800660a:	4604      	mov	r4, r0
 800660c:	f7f9 fefa 	bl	8000404 <__aeabi_i2d>
 8006610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006614:	f7f9 ff60 	bl	80004d8 <__aeabi_dmul>
 8006618:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800661c:	460b      	mov	r3, r1
 800661e:	4602      	mov	r2, r0
 8006620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	f807 6b01 	strb.w	r6, [r7], #1
 800662c:	9e08      	ldr	r6, [sp, #32]
 800662e:	9b02      	ldr	r3, [sp, #8]
 8006630:	1bbe      	subs	r6, r7, r6
 8006632:	42b3      	cmp	r3, r6
 8006634:	d13a      	bne.n	80066ac <_dtoa_r+0x70c>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	f7f9 fd97 	bl	800016c <__adddf3>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664a:	f7fa f9d5 	bl	80009f8 <__aeabi_dcmpgt>
 800664e:	bb58      	cbnz	r0, 80066a8 <_dtoa_r+0x708>
 8006650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006658:	f7fa f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800665c:	b108      	cbz	r0, 8006662 <_dtoa_r+0x6c2>
 800665e:	07e1      	lsls	r1, r4, #31
 8006660:	d422      	bmi.n	80066a8 <_dtoa_r+0x708>
 8006662:	4628      	mov	r0, r5
 8006664:	4651      	mov	r1, sl
 8006666:	f000 faf5 	bl	8006c54 <_Bfree>
 800666a:	2300      	movs	r3, #0
 800666c:	703b      	strb	r3, [r7, #0]
 800666e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006670:	f109 0001 	add.w	r0, r9, #1
 8006674:	6018      	str	r0, [r3, #0]
 8006676:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006678:	2b00      	cmp	r3, #0
 800667a:	f43f acdf 	beq.w	800603c <_dtoa_r+0x9c>
 800667e:	601f      	str	r7, [r3, #0]
 8006680:	e4dc      	b.n	800603c <_dtoa_r+0x9c>
 8006682:	4627      	mov	r7, r4
 8006684:	463b      	mov	r3, r7
 8006686:	461f      	mov	r7, r3
 8006688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800668c:	2a39      	cmp	r2, #57	; 0x39
 800668e:	d107      	bne.n	80066a0 <_dtoa_r+0x700>
 8006690:	9a08      	ldr	r2, [sp, #32]
 8006692:	429a      	cmp	r2, r3
 8006694:	d1f7      	bne.n	8006686 <_dtoa_r+0x6e6>
 8006696:	2230      	movs	r2, #48	; 0x30
 8006698:	9908      	ldr	r1, [sp, #32]
 800669a:	f108 0801 	add.w	r8, r8, #1
 800669e:	700a      	strb	r2, [r1, #0]
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	3201      	adds	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e79f      	b.n	80065e8 <_dtoa_r+0x648>
 80066a8:	46c8      	mov	r8, r9
 80066aa:	e7eb      	b.n	8006684 <_dtoa_r+0x6e4>
 80066ac:	2200      	movs	r2, #0
 80066ae:	4b72      	ldr	r3, [pc, #456]	; (8006878 <_dtoa_r+0x8d8>)
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	f7fa f972 	bl	80009a8 <__aeabi_dcmpeq>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d098      	beq.n	80065fa <_dtoa_r+0x65a>
 80066c8:	e7cb      	b.n	8006662 <_dtoa_r+0x6c2>
 80066ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	f000 80cd 	beq.w	800686c <_dtoa_r+0x8cc>
 80066d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	f300 80af 	bgt.w	8006838 <_dtoa_r+0x898>
 80066da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066dc:	2a00      	cmp	r2, #0
 80066de:	f000 80a7 	beq.w	8006830 <_dtoa_r+0x890>
 80066e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066e8:	9f06      	ldr	r7, [sp, #24]
 80066ea:	9a06      	ldr	r2, [sp, #24]
 80066ec:	2101      	movs	r1, #1
 80066ee:	441a      	add	r2, r3
 80066f0:	9206      	str	r2, [sp, #24]
 80066f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f4:	4628      	mov	r0, r5
 80066f6:	441a      	add	r2, r3
 80066f8:	9209      	str	r2, [sp, #36]	; 0x24
 80066fa:	f000 fb65 	bl	8006dc8 <__i2b>
 80066fe:	4606      	mov	r6, r0
 8006700:	2f00      	cmp	r7, #0
 8006702:	dd0c      	ble.n	800671e <_dtoa_r+0x77e>
 8006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	dd09      	ble.n	800671e <_dtoa_r+0x77e>
 800670a:	42bb      	cmp	r3, r7
 800670c:	bfa8      	it	ge
 800670e:	463b      	movge	r3, r7
 8006710:	9a06      	ldr	r2, [sp, #24]
 8006712:	1aff      	subs	r7, r7, r3
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	9206      	str	r2, [sp, #24]
 8006718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
 800671e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006720:	b1f3      	cbz	r3, 8006760 <_dtoa_r+0x7c0>
 8006722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80a9 	beq.w	800687c <_dtoa_r+0x8dc>
 800672a:	2c00      	cmp	r4, #0
 800672c:	dd10      	ble.n	8006750 <_dtoa_r+0x7b0>
 800672e:	4631      	mov	r1, r6
 8006730:	4622      	mov	r2, r4
 8006732:	4628      	mov	r0, r5
 8006734:	f000 fc02 	bl	8006f3c <__pow5mult>
 8006738:	4652      	mov	r2, sl
 800673a:	4601      	mov	r1, r0
 800673c:	4606      	mov	r6, r0
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fb58 	bl	8006df4 <__multiply>
 8006744:	4680      	mov	r8, r0
 8006746:	4651      	mov	r1, sl
 8006748:	4628      	mov	r0, r5
 800674a:	f000 fa83 	bl	8006c54 <_Bfree>
 800674e:	46c2      	mov	sl, r8
 8006750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006752:	1b1a      	subs	r2, r3, r4
 8006754:	d004      	beq.n	8006760 <_dtoa_r+0x7c0>
 8006756:	4651      	mov	r1, sl
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fbef 	bl	8006f3c <__pow5mult>
 800675e:	4682      	mov	sl, r0
 8006760:	2101      	movs	r1, #1
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fb30 	bl	8006dc8 <__i2b>
 8006768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676a:	4604      	mov	r4, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	f340 8087 	ble.w	8006880 <_dtoa_r+0x8e0>
 8006772:	461a      	mov	r2, r3
 8006774:	4601      	mov	r1, r0
 8006776:	4628      	mov	r0, r5
 8006778:	f000 fbe0 	bl	8006f3c <__pow5mult>
 800677c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800677e:	4604      	mov	r4, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	f340 8080 	ble.w	8006886 <_dtoa_r+0x8e6>
 8006786:	f04f 0800 	mov.w	r8, #0
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006790:	6918      	ldr	r0, [r3, #16]
 8006792:	f000 facb 	bl	8006d2c <__hi0bits>
 8006796:	f1c0 0020 	rsb	r0, r0, #32
 800679a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679c:	4418      	add	r0, r3
 800679e:	f010 001f 	ands.w	r0, r0, #31
 80067a2:	f000 8092 	beq.w	80068ca <_dtoa_r+0x92a>
 80067a6:	f1c0 0320 	rsb	r3, r0, #32
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	f340 808a 	ble.w	80068c4 <_dtoa_r+0x924>
 80067b0:	f1c0 001c 	rsb	r0, r0, #28
 80067b4:	9b06      	ldr	r3, [sp, #24]
 80067b6:	4407      	add	r7, r0
 80067b8:	4403      	add	r3, r0
 80067ba:	9306      	str	r3, [sp, #24]
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	4403      	add	r3, r0
 80067c0:	9309      	str	r3, [sp, #36]	; 0x24
 80067c2:	9b06      	ldr	r3, [sp, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dd05      	ble.n	80067d4 <_dtoa_r+0x834>
 80067c8:	4651      	mov	r1, sl
 80067ca:	461a      	mov	r2, r3
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 fc0f 	bl	8006ff0 <__lshift>
 80067d2:	4682      	mov	sl, r0
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd05      	ble.n	80067e6 <_dtoa_r+0x846>
 80067da:	4621      	mov	r1, r4
 80067dc:	461a      	mov	r2, r3
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 fc06 	bl	8006ff0 <__lshift>
 80067e4:	4604      	mov	r4, r0
 80067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d070      	beq.n	80068ce <_dtoa_r+0x92e>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4650      	mov	r0, sl
 80067f0:	f000 fc6a 	bl	80070c8 <__mcmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	da6a      	bge.n	80068ce <_dtoa_r+0x92e>
 80067f8:	2300      	movs	r3, #0
 80067fa:	4651      	mov	r1, sl
 80067fc:	220a      	movs	r2, #10
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fa4a 	bl	8006c98 <__multadd>
 8006804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006806:	4682      	mov	sl, r0
 8006808:	f109 39ff 	add.w	r9, r9, #4294967295
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8193 	beq.w	8006b38 <_dtoa_r+0xb98>
 8006812:	4631      	mov	r1, r6
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4628      	mov	r0, r5
 800681a:	f000 fa3d 	bl	8006c98 <__multadd>
 800681e:	f1bb 0f00 	cmp.w	fp, #0
 8006822:	4606      	mov	r6, r0
 8006824:	f300 8093 	bgt.w	800694e <_dtoa_r+0x9ae>
 8006828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800682a:	2b02      	cmp	r3, #2
 800682c:	dc57      	bgt.n	80068de <_dtoa_r+0x93e>
 800682e:	e08e      	b.n	800694e <_dtoa_r+0x9ae>
 8006830:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006832:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006836:	e756      	b.n	80066e6 <_dtoa_r+0x746>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	1e5c      	subs	r4, r3, #1
 800683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683e:	42a3      	cmp	r3, r4
 8006840:	bfb7      	itett	lt
 8006842:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006844:	1b1c      	subge	r4, r3, r4
 8006846:	1ae2      	sublt	r2, r4, r3
 8006848:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800684a:	bfbe      	ittt	lt
 800684c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800684e:	189b      	addlt	r3, r3, r2
 8006850:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006852:	9b02      	ldr	r3, [sp, #8]
 8006854:	bfb8      	it	lt
 8006856:	2400      	movlt	r4, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfbb      	ittet	lt
 800685c:	9b06      	ldrlt	r3, [sp, #24]
 800685e:	9a02      	ldrlt	r2, [sp, #8]
 8006860:	9f06      	ldrge	r7, [sp, #24]
 8006862:	1a9f      	sublt	r7, r3, r2
 8006864:	bfac      	ite	ge
 8006866:	9b02      	ldrge	r3, [sp, #8]
 8006868:	2300      	movlt	r3, #0
 800686a:	e73e      	b.n	80066ea <_dtoa_r+0x74a>
 800686c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800686e:	9f06      	ldr	r7, [sp, #24]
 8006870:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006872:	e745      	b.n	8006700 <_dtoa_r+0x760>
 8006874:	3fe00000 	.word	0x3fe00000
 8006878:	40240000 	.word	0x40240000
 800687c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800687e:	e76a      	b.n	8006756 <_dtoa_r+0x7b6>
 8006880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006882:	2b01      	cmp	r3, #1
 8006884:	dc19      	bgt.n	80068ba <_dtoa_r+0x91a>
 8006886:	9b04      	ldr	r3, [sp, #16]
 8006888:	b9bb      	cbnz	r3, 80068ba <_dtoa_r+0x91a>
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006890:	b99b      	cbnz	r3, 80068ba <_dtoa_r+0x91a>
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006898:	0d1b      	lsrs	r3, r3, #20
 800689a:	051b      	lsls	r3, r3, #20
 800689c:	b183      	cbz	r3, 80068c0 <_dtoa_r+0x920>
 800689e:	f04f 0801 	mov.w	r8, #1
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	3301      	adds	r3, #1
 80068a6:	9306      	str	r3, [sp, #24]
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	3301      	adds	r3, #1
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f af6a 	bne.w	800678a <_dtoa_r+0x7ea>
 80068b6:	2001      	movs	r0, #1
 80068b8:	e76f      	b.n	800679a <_dtoa_r+0x7fa>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	e7f6      	b.n	80068ae <_dtoa_r+0x90e>
 80068c0:	4698      	mov	r8, r3
 80068c2:	e7f4      	b.n	80068ae <_dtoa_r+0x90e>
 80068c4:	f43f af7d 	beq.w	80067c2 <_dtoa_r+0x822>
 80068c8:	4618      	mov	r0, r3
 80068ca:	301c      	adds	r0, #28
 80068cc:	e772      	b.n	80067b4 <_dtoa_r+0x814>
 80068ce:	9b02      	ldr	r3, [sp, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc36      	bgt.n	8006942 <_dtoa_r+0x9a2>
 80068d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	dd33      	ble.n	8006942 <_dtoa_r+0x9a2>
 80068da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80068de:	f1bb 0f00 	cmp.w	fp, #0
 80068e2:	d10d      	bne.n	8006900 <_dtoa_r+0x960>
 80068e4:	4621      	mov	r1, r4
 80068e6:	465b      	mov	r3, fp
 80068e8:	2205      	movs	r2, #5
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f9d4 	bl	8006c98 <__multadd>
 80068f0:	4601      	mov	r1, r0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4650      	mov	r0, sl
 80068f6:	f000 fbe7 	bl	80070c8 <__mcmp>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f73f adb6 	bgt.w	800646c <_dtoa_r+0x4cc>
 8006900:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006902:	9f08      	ldr	r7, [sp, #32]
 8006904:	ea6f 0903 	mvn.w	r9, r3
 8006908:	f04f 0800 	mov.w	r8, #0
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f9a0 	bl	8006c54 <_Bfree>
 8006914:	2e00      	cmp	r6, #0
 8006916:	f43f aea4 	beq.w	8006662 <_dtoa_r+0x6c2>
 800691a:	f1b8 0f00 	cmp.w	r8, #0
 800691e:	d005      	beq.n	800692c <_dtoa_r+0x98c>
 8006920:	45b0      	cmp	r8, r6
 8006922:	d003      	beq.n	800692c <_dtoa_r+0x98c>
 8006924:	4641      	mov	r1, r8
 8006926:	4628      	mov	r0, r5
 8006928:	f000 f994 	bl	8006c54 <_Bfree>
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	f000 f990 	bl	8006c54 <_Bfree>
 8006934:	e695      	b.n	8006662 <_dtoa_r+0x6c2>
 8006936:	2400      	movs	r4, #0
 8006938:	4626      	mov	r6, r4
 800693a:	e7e1      	b.n	8006900 <_dtoa_r+0x960>
 800693c:	46c1      	mov	r9, r8
 800693e:	4626      	mov	r6, r4
 8006940:	e594      	b.n	800646c <_dtoa_r+0x4cc>
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80fc 	beq.w	8006b46 <_dtoa_r+0xba6>
 800694e:	2f00      	cmp	r7, #0
 8006950:	dd05      	ble.n	800695e <_dtoa_r+0x9be>
 8006952:	4631      	mov	r1, r6
 8006954:	463a      	mov	r2, r7
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fb4a 	bl	8006ff0 <__lshift>
 800695c:	4606      	mov	r6, r0
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	d05c      	beq.n	8006a1e <_dtoa_r+0xa7e>
 8006964:	4628      	mov	r0, r5
 8006966:	6871      	ldr	r1, [r6, #4]
 8006968:	f000 f934 	bl	8006bd4 <_Balloc>
 800696c:	4607      	mov	r7, r0
 800696e:	b928      	cbnz	r0, 800697c <_dtoa_r+0x9dc>
 8006970:	4602      	mov	r2, r0
 8006972:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006976:	4b7e      	ldr	r3, [pc, #504]	; (8006b70 <_dtoa_r+0xbd0>)
 8006978:	f7ff bb26 	b.w	8005fc8 <_dtoa_r+0x28>
 800697c:	6932      	ldr	r2, [r6, #16]
 800697e:	f106 010c 	add.w	r1, r6, #12
 8006982:	3202      	adds	r2, #2
 8006984:	0092      	lsls	r2, r2, #2
 8006986:	300c      	adds	r0, #12
 8006988:	f000 f90a 	bl	8006ba0 <memcpy>
 800698c:	2201      	movs	r2, #1
 800698e:	4639      	mov	r1, r7
 8006990:	4628      	mov	r0, r5
 8006992:	f000 fb2d 	bl	8006ff0 <__lshift>
 8006996:	46b0      	mov	r8, r6
 8006998:	4606      	mov	r6, r0
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	3301      	adds	r3, #1
 800699e:	9302      	str	r3, [sp, #8]
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	445b      	add	r3, fp
 80069a4:	930a      	str	r3, [sp, #40]	; 0x28
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	9309      	str	r3, [sp, #36]	; 0x24
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	4621      	mov	r1, r4
 80069b2:	4650      	mov	r0, sl
 80069b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80069b8:	f7ff fa62 	bl	8005e80 <quorem>
 80069bc:	4603      	mov	r3, r0
 80069be:	4641      	mov	r1, r8
 80069c0:	3330      	adds	r3, #48	; 0x30
 80069c2:	9004      	str	r0, [sp, #16]
 80069c4:	4650      	mov	r0, sl
 80069c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c8:	f000 fb7e 	bl	80070c8 <__mcmp>
 80069cc:	4632      	mov	r2, r6
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 fb94 	bl	8007100 <__mdiff>
 80069d8:	68c2      	ldr	r2, [r0, #12]
 80069da:	4607      	mov	r7, r0
 80069dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069de:	bb02      	cbnz	r2, 8006a22 <_dtoa_r+0xa82>
 80069e0:	4601      	mov	r1, r0
 80069e2:	4650      	mov	r0, sl
 80069e4:	f000 fb70 	bl	80070c8 <__mcmp>
 80069e8:	4602      	mov	r2, r0
 80069ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ec:	4639      	mov	r1, r7
 80069ee:	4628      	mov	r0, r5
 80069f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80069f4:	f000 f92e 	bl	8006c54 <_Bfree>
 80069f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069fc:	9f02      	ldr	r7, [sp, #8]
 80069fe:	ea43 0102 	orr.w	r1, r3, r2
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	430b      	orrs	r3, r1
 8006a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a08:	d10d      	bne.n	8006a26 <_dtoa_r+0xa86>
 8006a0a:	2b39      	cmp	r3, #57	; 0x39
 8006a0c:	d027      	beq.n	8006a5e <_dtoa_r+0xabe>
 8006a0e:	9a06      	ldr	r2, [sp, #24]
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	dd01      	ble.n	8006a18 <_dtoa_r+0xa78>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	3331      	adds	r3, #49	; 0x31
 8006a18:	f88b 3000 	strb.w	r3, [fp]
 8006a1c:	e776      	b.n	800690c <_dtoa_r+0x96c>
 8006a1e:	4630      	mov	r0, r6
 8006a20:	e7b9      	b.n	8006996 <_dtoa_r+0x9f6>
 8006a22:	2201      	movs	r2, #1
 8006a24:	e7e2      	b.n	80069ec <_dtoa_r+0xa4c>
 8006a26:	9906      	ldr	r1, [sp, #24]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	db04      	blt.n	8006a36 <_dtoa_r+0xa96>
 8006a2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006a2e:	4301      	orrs	r1, r0
 8006a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a32:	4301      	orrs	r1, r0
 8006a34:	d120      	bne.n	8006a78 <_dtoa_r+0xad8>
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	ddee      	ble.n	8006a18 <_dtoa_r+0xa78>
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4628      	mov	r0, r5
 8006a40:	9302      	str	r3, [sp, #8]
 8006a42:	f000 fad5 	bl	8006ff0 <__lshift>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4682      	mov	sl, r0
 8006a4a:	f000 fb3d 	bl	80070c8 <__mcmp>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	dc02      	bgt.n	8006a5a <_dtoa_r+0xaba>
 8006a54:	d1e0      	bne.n	8006a18 <_dtoa_r+0xa78>
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d5de      	bpl.n	8006a18 <_dtoa_r+0xa78>
 8006a5a:	2b39      	cmp	r3, #57	; 0x39
 8006a5c:	d1da      	bne.n	8006a14 <_dtoa_r+0xa74>
 8006a5e:	2339      	movs	r3, #57	; 0x39
 8006a60:	f88b 3000 	strb.w	r3, [fp]
 8006a64:	463b      	mov	r3, r7
 8006a66:	461f      	mov	r7, r3
 8006a68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	2a39      	cmp	r2, #57	; 0x39
 8006a70:	d050      	beq.n	8006b14 <_dtoa_r+0xb74>
 8006a72:	3201      	adds	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	e749      	b.n	800690c <_dtoa_r+0x96c>
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	dd03      	ble.n	8006a84 <_dtoa_r+0xae4>
 8006a7c:	2b39      	cmp	r3, #57	; 0x39
 8006a7e:	d0ee      	beq.n	8006a5e <_dtoa_r+0xabe>
 8006a80:	3301      	adds	r3, #1
 8006a82:	e7c9      	b.n	8006a18 <_dtoa_r+0xa78>
 8006a84:	9a02      	ldr	r2, [sp, #8]
 8006a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a8c:	428a      	cmp	r2, r1
 8006a8e:	d02a      	beq.n	8006ae6 <_dtoa_r+0xb46>
 8006a90:	4651      	mov	r1, sl
 8006a92:	2300      	movs	r3, #0
 8006a94:	220a      	movs	r2, #10
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 f8fe 	bl	8006c98 <__multadd>
 8006a9c:	45b0      	cmp	r8, r6
 8006a9e:	4682      	mov	sl, r0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	f04f 020a 	mov.w	r2, #10
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	4628      	mov	r0, r5
 8006aac:	d107      	bne.n	8006abe <_dtoa_r+0xb1e>
 8006aae:	f000 f8f3 	bl	8006c98 <__multadd>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	e777      	b.n	80069ae <_dtoa_r+0xa0e>
 8006abe:	f000 f8eb 	bl	8006c98 <__multadd>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 f8e4 	bl	8006c98 <__multadd>
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	e7f0      	b.n	8006ab6 <_dtoa_r+0xb16>
 8006ad4:	f1bb 0f00 	cmp.w	fp, #0
 8006ad8:	bfcc      	ite	gt
 8006ada:	465f      	movgt	r7, fp
 8006adc:	2701      	movle	r7, #1
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	9a08      	ldr	r2, [sp, #32]
 8006ae4:	4417      	add	r7, r2
 8006ae6:	4651      	mov	r1, sl
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4628      	mov	r0, r5
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	f000 fa7f 	bl	8006ff0 <__lshift>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4682      	mov	sl, r0
 8006af6:	f000 fae7 	bl	80070c8 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	dcb2      	bgt.n	8006a64 <_dtoa_r+0xac4>
 8006afe:	d102      	bne.n	8006b06 <_dtoa_r+0xb66>
 8006b00:	9b02      	ldr	r3, [sp, #8]
 8006b02:	07db      	lsls	r3, r3, #31
 8006b04:	d4ae      	bmi.n	8006a64 <_dtoa_r+0xac4>
 8006b06:	463b      	mov	r3, r7
 8006b08:	461f      	mov	r7, r3
 8006b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b0e:	2a30      	cmp	r2, #48	; 0x30
 8006b10:	d0fa      	beq.n	8006b08 <_dtoa_r+0xb68>
 8006b12:	e6fb      	b.n	800690c <_dtoa_r+0x96c>
 8006b14:	9a08      	ldr	r2, [sp, #32]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d1a5      	bne.n	8006a66 <_dtoa_r+0xac6>
 8006b1a:	2331      	movs	r3, #49	; 0x31
 8006b1c:	f109 0901 	add.w	r9, r9, #1
 8006b20:	7013      	strb	r3, [r2, #0]
 8006b22:	e6f3      	b.n	800690c <_dtoa_r+0x96c>
 8006b24:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <_dtoa_r+0xbd4>)
 8006b26:	f7ff baa7 	b.w	8006078 <_dtoa_r+0xd8>
 8006b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f aa80 	bne.w	8006032 <_dtoa_r+0x92>
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <_dtoa_r+0xbd8>)
 8006b34:	f7ff baa0 	b.w	8006078 <_dtoa_r+0xd8>
 8006b38:	f1bb 0f00 	cmp.w	fp, #0
 8006b3c:	dc03      	bgt.n	8006b46 <_dtoa_r+0xba6>
 8006b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	f73f aecc 	bgt.w	80068de <_dtoa_r+0x93e>
 8006b46:	9f08      	ldr	r7, [sp, #32]
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f7ff f998 	bl	8005e80 <quorem>
 8006b50:	9a08      	ldr	r2, [sp, #32]
 8006b52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b56:	f807 3b01 	strb.w	r3, [r7], #1
 8006b5a:	1aba      	subs	r2, r7, r2
 8006b5c:	4593      	cmp	fp, r2
 8006b5e:	ddb9      	ble.n	8006ad4 <_dtoa_r+0xb34>
 8006b60:	4651      	mov	r1, sl
 8006b62:	2300      	movs	r3, #0
 8006b64:	220a      	movs	r2, #10
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f896 	bl	8006c98 <__multadd>
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	e7eb      	b.n	8006b48 <_dtoa_r+0xba8>
 8006b70:	08008283 	.word	0x08008283
 8006b74:	080081dc 	.word	0x080081dc
 8006b78:	08008200 	.word	0x08008200

08006b7c <_localeconv_r>:
 8006b7c:	4800      	ldr	r0, [pc, #0]	; (8006b80 <_localeconv_r+0x4>)
 8006b7e:	4770      	bx	lr
 8006b80:	20000168 	.word	0x20000168

08006b84 <memchr>:
 8006b84:	4603      	mov	r3, r0
 8006b86:	b510      	push	{r4, lr}
 8006b88:	b2c9      	uxtb	r1, r1
 8006b8a:	4402      	add	r2, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	d101      	bne.n	8006b96 <memchr+0x12>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e003      	b.n	8006b9e <memchr+0x1a>
 8006b96:	7804      	ldrb	r4, [r0, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	428c      	cmp	r4, r1
 8006b9c:	d1f6      	bne.n	8006b8c <memchr+0x8>
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <memcpy>:
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ba8:	d100      	bne.n	8006bac <memcpy+0xc>
 8006baa:	4770      	bx	lr
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb8:	d1f9      	bne.n	8006bae <memcpy+0xe>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <__malloc_lock>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__malloc_lock+0x8>)
 8006bbe:	f000 bd26 	b.w	800760e <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	2000037c 	.word	0x2000037c

08006bc8 <__malloc_unlock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__malloc_unlock+0x8>)
 8006bca:	f000 bd21 	b.w	8007610 <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2000037c 	.word	0x2000037c

08006bd4 <_Balloc>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Balloc+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7fe fc00 	bl	80053e4 <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6260      	str	r0, [r4, #36]	; 0x24
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Balloc+0x20>
 8006bea:	2166      	movs	r1, #102	; 0x66
 8006bec:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <_Balloc+0x78>)
 8006bee:	4818      	ldr	r0, [pc, #96]	; (8006c50 <_Balloc+0x7c>)
 8006bf0:	f000 fcdc 	bl	80075ac <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bfe:	68f3      	ldr	r3, [r6, #12]
 8006c00:	b183      	cbz	r3, 8006c24 <_Balloc+0x50>
 8006c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c0a:	b9b8      	cbnz	r0, 8006c3c <_Balloc+0x68>
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c12:	1d72      	adds	r2, r6, #5
 8006c14:	4620      	mov	r0, r4
 8006c16:	0092      	lsls	r2, r2, #2
 8006c18:	f000 fb5e 	bl	80072d8 <_calloc_r>
 8006c1c:	b160      	cbz	r0, 8006c38 <_Balloc+0x64>
 8006c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c22:	e00e      	b.n	8006c42 <_Balloc+0x6e>
 8006c24:	2221      	movs	r2, #33	; 0x21
 8006c26:	2104      	movs	r1, #4
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fb55 	bl	80072d8 <_calloc_r>
 8006c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c30:	60f0      	str	r0, [r6, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e4      	bne.n	8006c02 <_Balloc+0x2e>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	6802      	ldr	r2, [r0, #0]
 8006c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c42:	2300      	movs	r3, #0
 8006c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c48:	e7f7      	b.n	8006c3a <_Balloc+0x66>
 8006c4a:	bf00      	nop
 8006c4c:	0800820d 	.word	0x0800820d
 8006c50:	08008294 	.word	0x08008294

08006c54 <_Bfree>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c58:	4605      	mov	r5, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b976      	cbnz	r6, 8006c7c <_Bfree+0x28>
 8006c5e:	2010      	movs	r0, #16
 8006c60:	f7fe fbc0 	bl	80053e4 <malloc>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6268      	str	r0, [r5, #36]	; 0x24
 8006c68:	b920      	cbnz	r0, 8006c74 <_Bfree+0x20>
 8006c6a:	218a      	movs	r1, #138	; 0x8a
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <_Bfree+0x3c>)
 8006c6e:	4809      	ldr	r0, [pc, #36]	; (8006c94 <_Bfree+0x40>)
 8006c70:	f000 fc9c 	bl	80075ac <__assert_func>
 8006c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c78:	6006      	str	r6, [r0, #0]
 8006c7a:	60c6      	str	r6, [r0, #12]
 8006c7c:	b13c      	cbz	r4, 8006c8e <_Bfree+0x3a>
 8006c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c88:	6021      	str	r1, [r4, #0]
 8006c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	0800820d 	.word	0x0800820d
 8006c94:	08008294 	.word	0x08008294

08006c98 <__multadd>:
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	4698      	mov	r8, r3
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	690e      	ldr	r6, [r1, #16]
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	f101 0014 	add.w	r0, r1, #20
 8006caa:	6805      	ldr	r5, [r0, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	b2a9      	uxth	r1, r5
 8006cb0:	fb02 8101 	mla	r1, r2, r1, r8
 8006cb4:	0c2d      	lsrs	r5, r5, #16
 8006cb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006cba:	fb02 c505 	mla	r5, r2, r5, ip
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006cc4:	429e      	cmp	r6, r3
 8006cc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006cca:	f840 1b04 	str.w	r1, [r0], #4
 8006cce:	dcec      	bgt.n	8006caa <__multadd+0x12>
 8006cd0:	f1b8 0f00 	cmp.w	r8, #0
 8006cd4:	d022      	beq.n	8006d1c <__multadd+0x84>
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	42b3      	cmp	r3, r6
 8006cda:	dc19      	bgt.n	8006d10 <__multadd+0x78>
 8006cdc:	6861      	ldr	r1, [r4, #4]
 8006cde:	4638      	mov	r0, r7
 8006ce0:	3101      	adds	r1, #1
 8006ce2:	f7ff ff77 	bl	8006bd4 <_Balloc>
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	b928      	cbnz	r0, 8006cf6 <__multadd+0x5e>
 8006cea:	4602      	mov	r2, r0
 8006cec:	21b5      	movs	r1, #181	; 0xb5
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <__multadd+0x8c>)
 8006cf0:	480d      	ldr	r0, [pc, #52]	; (8006d28 <__multadd+0x90>)
 8006cf2:	f000 fc5b 	bl	80075ac <__assert_func>
 8006cf6:	6922      	ldr	r2, [r4, #16]
 8006cf8:	f104 010c 	add.w	r1, r4, #12
 8006cfc:	3202      	adds	r2, #2
 8006cfe:	0092      	lsls	r2, r2, #2
 8006d00:	300c      	adds	r0, #12
 8006d02:	f7ff ff4d 	bl	8006ba0 <memcpy>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7ff ffa3 	bl	8006c54 <_Bfree>
 8006d0e:	462c      	mov	r4, r5
 8006d10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006d14:	3601      	adds	r6, #1
 8006d16:	f8c3 8014 	str.w	r8, [r3, #20]
 8006d1a:	6126      	str	r6, [r4, #16]
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d22:	bf00      	nop
 8006d24:	08008283 	.word	0x08008283
 8006d28:	08008294 	.word	0x08008294

08006d2c <__hi0bits>:
 8006d2c:	0c02      	lsrs	r2, r0, #16
 8006d2e:	0412      	lsls	r2, r2, #16
 8006d30:	4603      	mov	r3, r0
 8006d32:	b9ca      	cbnz	r2, 8006d68 <__hi0bits+0x3c>
 8006d34:	0403      	lsls	r3, r0, #16
 8006d36:	2010      	movs	r0, #16
 8006d38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d3c:	bf04      	itt	eq
 8006d3e:	021b      	lsleq	r3, r3, #8
 8006d40:	3008      	addeq	r0, #8
 8006d42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d46:	bf04      	itt	eq
 8006d48:	011b      	lsleq	r3, r3, #4
 8006d4a:	3004      	addeq	r0, #4
 8006d4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d50:	bf04      	itt	eq
 8006d52:	009b      	lsleq	r3, r3, #2
 8006d54:	3002      	addeq	r0, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db05      	blt.n	8006d66 <__hi0bits+0x3a>
 8006d5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d5e:	f100 0001 	add.w	r0, r0, #1
 8006d62:	bf08      	it	eq
 8006d64:	2020      	moveq	r0, #32
 8006d66:	4770      	bx	lr
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e7e5      	b.n	8006d38 <__hi0bits+0xc>

08006d6c <__lo0bits>:
 8006d6c:	6803      	ldr	r3, [r0, #0]
 8006d6e:	4602      	mov	r2, r0
 8006d70:	f013 0007 	ands.w	r0, r3, #7
 8006d74:	d00b      	beq.n	8006d8e <__lo0bits+0x22>
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d422      	bmi.n	8006dc0 <__lo0bits+0x54>
 8006d7a:	0798      	lsls	r0, r3, #30
 8006d7c:	bf49      	itett	mi
 8006d7e:	085b      	lsrmi	r3, r3, #1
 8006d80:	089b      	lsrpl	r3, r3, #2
 8006d82:	2001      	movmi	r0, #1
 8006d84:	6013      	strmi	r3, [r2, #0]
 8006d86:	bf5c      	itt	pl
 8006d88:	2002      	movpl	r0, #2
 8006d8a:	6013      	strpl	r3, [r2, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	b299      	uxth	r1, r3
 8006d90:	b909      	cbnz	r1, 8006d96 <__lo0bits+0x2a>
 8006d92:	2010      	movs	r0, #16
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d9a:	bf04      	itt	eq
 8006d9c:	0a1b      	lsreq	r3, r3, #8
 8006d9e:	3008      	addeq	r0, #8
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	bf04      	itt	eq
 8006da4:	091b      	lsreq	r3, r3, #4
 8006da6:	3004      	addeq	r0, #4
 8006da8:	0799      	lsls	r1, r3, #30
 8006daa:	bf04      	itt	eq
 8006dac:	089b      	lsreq	r3, r3, #2
 8006dae:	3002      	addeq	r0, #2
 8006db0:	07d9      	lsls	r1, r3, #31
 8006db2:	d403      	bmi.n	8006dbc <__lo0bits+0x50>
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	f100 0001 	add.w	r0, r0, #1
 8006dba:	d003      	beq.n	8006dc4 <__lo0bits+0x58>
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	4770      	bx	lr
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	4770      	bx	lr
 8006dc4:	2020      	movs	r0, #32
 8006dc6:	4770      	bx	lr

08006dc8 <__i2b>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2101      	movs	r1, #1
 8006dce:	f7ff ff01 	bl	8006bd4 <_Balloc>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	b928      	cbnz	r0, 8006de2 <__i2b+0x1a>
 8006dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <__i2b+0x24>)
 8006ddc:	4804      	ldr	r0, [pc, #16]	; (8006df0 <__i2b+0x28>)
 8006dde:	f000 fbe5 	bl	80075ac <__assert_func>
 8006de2:	2301      	movs	r3, #1
 8006de4:	6144      	str	r4, [r0, #20]
 8006de6:	6103      	str	r3, [r0, #16]
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	bf00      	nop
 8006dec:	08008283 	.word	0x08008283
 8006df0:	08008294 	.word	0x08008294

08006df4 <__multiply>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	4614      	mov	r4, r2
 8006dfa:	690a      	ldr	r2, [r1, #16]
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	460d      	mov	r5, r1
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bfbe      	ittt	lt
 8006e04:	460b      	movlt	r3, r1
 8006e06:	4625      	movlt	r5, r4
 8006e08:	461c      	movlt	r4, r3
 8006e0a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e12:	68ab      	ldr	r3, [r5, #8]
 8006e14:	6869      	ldr	r1, [r5, #4]
 8006e16:	eb0a 0709 	add.w	r7, sl, r9
 8006e1a:	42bb      	cmp	r3, r7
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	bfb8      	it	lt
 8006e20:	3101      	addlt	r1, #1
 8006e22:	f7ff fed7 	bl	8006bd4 <_Balloc>
 8006e26:	b930      	cbnz	r0, 8006e36 <__multiply+0x42>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	f240 115d 	movw	r1, #349	; 0x15d
 8006e2e:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <__multiply+0x140>)
 8006e30:	4841      	ldr	r0, [pc, #260]	; (8006f38 <__multiply+0x144>)
 8006e32:	f000 fbbb 	bl	80075ac <__assert_func>
 8006e36:	f100 0614 	add.w	r6, r0, #20
 8006e3a:	4633      	mov	r3, r6
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e42:	4543      	cmp	r3, r8
 8006e44:	d31e      	bcc.n	8006e84 <__multiply+0x90>
 8006e46:	f105 0c14 	add.w	ip, r5, #20
 8006e4a:	f104 0314 	add.w	r3, r4, #20
 8006e4e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006e52:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	ebac 0205 	sub.w	r2, ip, r5
 8006e5c:	3a15      	subs	r2, #21
 8006e5e:	f022 0203 	bic.w	r2, r2, #3
 8006e62:	3204      	adds	r2, #4
 8006e64:	f105 0115 	add.w	r1, r5, #21
 8006e68:	458c      	cmp	ip, r1
 8006e6a:	bf38      	it	cc
 8006e6c:	2204      	movcc	r2, #4
 8006e6e:	9201      	str	r2, [sp, #4]
 8006e70:	9a02      	ldr	r2, [sp, #8]
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d808      	bhi.n	8006e8a <__multiply+0x96>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	dc55      	bgt.n	8006f28 <__multiply+0x134>
 8006e7c:	6107      	str	r7, [r0, #16]
 8006e7e:	b005      	add	sp, #20
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	f843 2b04 	str.w	r2, [r3], #4
 8006e88:	e7db      	b.n	8006e42 <__multiply+0x4e>
 8006e8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e8e:	f1ba 0f00 	cmp.w	sl, #0
 8006e92:	d020      	beq.n	8006ed6 <__multiply+0xe2>
 8006e94:	46b1      	mov	r9, r6
 8006e96:	2200      	movs	r2, #0
 8006e98:	f105 0e14 	add.w	lr, r5, #20
 8006e9c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ea0:	f8d9 b000 	ldr.w	fp, [r9]
 8006ea4:	b2a1      	uxth	r1, r4
 8006ea6:	fa1f fb8b 	uxth.w	fp, fp
 8006eaa:	fb0a b101 	mla	r1, sl, r1, fp
 8006eae:	4411      	add	r1, r2
 8006eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb4:	0c24      	lsrs	r4, r4, #16
 8006eb6:	0c12      	lsrs	r2, r2, #16
 8006eb8:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ebc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ec0:	b289      	uxth	r1, r1
 8006ec2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ec6:	45f4      	cmp	ip, lr
 8006ec8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ecc:	f849 1b04 	str.w	r1, [r9], #4
 8006ed0:	d8e4      	bhi.n	8006e9c <__multiply+0xa8>
 8006ed2:	9901      	ldr	r1, [sp, #4]
 8006ed4:	5072      	str	r2, [r6, r1]
 8006ed6:	9a03      	ldr	r2, [sp, #12]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ede:	f1b9 0f00 	cmp.w	r9, #0
 8006ee2:	d01f      	beq.n	8006f24 <__multiply+0x130>
 8006ee4:	46b6      	mov	lr, r6
 8006ee6:	f04f 0a00 	mov.w	sl, #0
 8006eea:	6834      	ldr	r4, [r6, #0]
 8006eec:	f105 0114 	add.w	r1, r5, #20
 8006ef0:	880a      	ldrh	r2, [r1, #0]
 8006ef2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006ef6:	b2a4      	uxth	r4, r4
 8006ef8:	fb09 b202 	mla	r2, r9, r2, fp
 8006efc:	4492      	add	sl, r2
 8006efe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f02:	f84e 4b04 	str.w	r4, [lr], #4
 8006f06:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f0a:	f8be 2000 	ldrh.w	r2, [lr]
 8006f0e:	0c24      	lsrs	r4, r4, #16
 8006f10:	fb09 2404 	mla	r4, r9, r4, r2
 8006f14:	458c      	cmp	ip, r1
 8006f16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006f1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f1e:	d8e7      	bhi.n	8006ef0 <__multiply+0xfc>
 8006f20:	9a01      	ldr	r2, [sp, #4]
 8006f22:	50b4      	str	r4, [r6, r2]
 8006f24:	3604      	adds	r6, #4
 8006f26:	e7a3      	b.n	8006e70 <__multiply+0x7c>
 8006f28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1a5      	bne.n	8006e7c <__multiply+0x88>
 8006f30:	3f01      	subs	r7, #1
 8006f32:	e7a1      	b.n	8006e78 <__multiply+0x84>
 8006f34:	08008283 	.word	0x08008283
 8006f38:	08008294 	.word	0x08008294

08006f3c <__pow5mult>:
 8006f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4615      	mov	r5, r2
 8006f42:	f012 0203 	ands.w	r2, r2, #3
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	d007      	beq.n	8006f5c <__pow5mult+0x20>
 8006f4c:	4c25      	ldr	r4, [pc, #148]	; (8006fe4 <__pow5mult+0xa8>)
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	2300      	movs	r3, #0
 8006f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f56:	f7ff fe9f 	bl	8006c98 <__multadd>
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	10ad      	asrs	r5, r5, #2
 8006f5e:	d03d      	beq.n	8006fdc <__pow5mult+0xa0>
 8006f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f62:	b97c      	cbnz	r4, 8006f84 <__pow5mult+0x48>
 8006f64:	2010      	movs	r0, #16
 8006f66:	f7fe fa3d 	bl	80053e4 <malloc>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8006f6e:	b928      	cbnz	r0, 8006f7c <__pow5mult+0x40>
 8006f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f74:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <__pow5mult+0xac>)
 8006f76:	481d      	ldr	r0, [pc, #116]	; (8006fec <__pow5mult+0xb0>)
 8006f78:	f000 fb18 	bl	80075ac <__assert_func>
 8006f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f80:	6004      	str	r4, [r0, #0]
 8006f82:	60c4      	str	r4, [r0, #12]
 8006f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f8c:	b94c      	cbnz	r4, 8006fa2 <__pow5mult+0x66>
 8006f8e:	f240 2171 	movw	r1, #625	; 0x271
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff ff18 	bl	8006dc8 <__i2b>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	f04f 0900 	mov.w	r9, #0
 8006fa6:	07eb      	lsls	r3, r5, #31
 8006fa8:	d50a      	bpl.n	8006fc0 <__pow5mult+0x84>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4622      	mov	r2, r4
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ff20 	bl	8006df4 <__multiply>
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff fe4b 	bl	8006c54 <_Bfree>
 8006fbe:	4647      	mov	r7, r8
 8006fc0:	106d      	asrs	r5, r5, #1
 8006fc2:	d00b      	beq.n	8006fdc <__pow5mult+0xa0>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	b938      	cbnz	r0, 8006fd8 <__pow5mult+0x9c>
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff ff11 	bl	8006df4 <__multiply>
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	f8c0 9000 	str.w	r9, [r0]
 8006fd8:	4604      	mov	r4, r0
 8006fda:	e7e4      	b.n	8006fa6 <__pow5mult+0x6a>
 8006fdc:	4638      	mov	r0, r7
 8006fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe2:	bf00      	nop
 8006fe4:	080083e8 	.word	0x080083e8
 8006fe8:	0800820d 	.word	0x0800820d
 8006fec:	08008294 	.word	0x08008294

08006ff0 <__lshift>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4691      	mov	r9, r2
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6849      	ldr	r1, [r1, #4]
 8006ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007002:	68a3      	ldr	r3, [r4, #8]
 8007004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007008:	f108 0601 	add.w	r6, r8, #1
 800700c:	42b3      	cmp	r3, r6
 800700e:	db0b      	blt.n	8007028 <__lshift+0x38>
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff fddf 	bl	8006bd4 <_Balloc>
 8007016:	4605      	mov	r5, r0
 8007018:	b948      	cbnz	r0, 800702e <__lshift+0x3e>
 800701a:	4602      	mov	r2, r0
 800701c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007020:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <__lshift+0xd0>)
 8007022:	4828      	ldr	r0, [pc, #160]	; (80070c4 <__lshift+0xd4>)
 8007024:	f000 fac2 	bl	80075ac <__assert_func>
 8007028:	3101      	adds	r1, #1
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	e7ee      	b.n	800700c <__lshift+0x1c>
 800702e:	2300      	movs	r3, #0
 8007030:	f100 0114 	add.w	r1, r0, #20
 8007034:	f100 0210 	add.w	r2, r0, #16
 8007038:	4618      	mov	r0, r3
 800703a:	4553      	cmp	r3, sl
 800703c:	db33      	blt.n	80070a6 <__lshift+0xb6>
 800703e:	6920      	ldr	r0, [r4, #16]
 8007040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007044:	f104 0314 	add.w	r3, r4, #20
 8007048:	f019 091f 	ands.w	r9, r9, #31
 800704c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007054:	d02b      	beq.n	80070ae <__lshift+0xbe>
 8007056:	468a      	mov	sl, r1
 8007058:	2200      	movs	r2, #0
 800705a:	f1c9 0e20 	rsb	lr, r9, #32
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	fa00 f009 	lsl.w	r0, r0, r9
 8007064:	4302      	orrs	r2, r0
 8007066:	f84a 2b04 	str.w	r2, [sl], #4
 800706a:	f853 2b04 	ldr.w	r2, [r3], #4
 800706e:	459c      	cmp	ip, r3
 8007070:	fa22 f20e 	lsr.w	r2, r2, lr
 8007074:	d8f3      	bhi.n	800705e <__lshift+0x6e>
 8007076:	ebac 0304 	sub.w	r3, ip, r4
 800707a:	3b15      	subs	r3, #21
 800707c:	f023 0303 	bic.w	r3, r3, #3
 8007080:	3304      	adds	r3, #4
 8007082:	f104 0015 	add.w	r0, r4, #21
 8007086:	4584      	cmp	ip, r0
 8007088:	bf38      	it	cc
 800708a:	2304      	movcc	r3, #4
 800708c:	50ca      	str	r2, [r1, r3]
 800708e:	b10a      	cbz	r2, 8007094 <__lshift+0xa4>
 8007090:	f108 0602 	add.w	r6, r8, #2
 8007094:	3e01      	subs	r6, #1
 8007096:	4638      	mov	r0, r7
 8007098:	4621      	mov	r1, r4
 800709a:	612e      	str	r6, [r5, #16]
 800709c:	f7ff fdda 	bl	8006c54 <_Bfree>
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80070aa:	3301      	adds	r3, #1
 80070ac:	e7c5      	b.n	800703a <__lshift+0x4a>
 80070ae:	3904      	subs	r1, #4
 80070b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b4:	459c      	cmp	ip, r3
 80070b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80070ba:	d8f9      	bhi.n	80070b0 <__lshift+0xc0>
 80070bc:	e7ea      	b.n	8007094 <__lshift+0xa4>
 80070be:	bf00      	nop
 80070c0:	08008283 	.word	0x08008283
 80070c4:	08008294 	.word	0x08008294

080070c8 <__mcmp>:
 80070c8:	4603      	mov	r3, r0
 80070ca:	690a      	ldr	r2, [r1, #16]
 80070cc:	6900      	ldr	r0, [r0, #16]
 80070ce:	b530      	push	{r4, r5, lr}
 80070d0:	1a80      	subs	r0, r0, r2
 80070d2:	d10d      	bne.n	80070f0 <__mcmp+0x28>
 80070d4:	3314      	adds	r3, #20
 80070d6:	3114      	adds	r1, #20
 80070d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070e8:	4295      	cmp	r5, r2
 80070ea:	d002      	beq.n	80070f2 <__mcmp+0x2a>
 80070ec:	d304      	bcc.n	80070f8 <__mcmp+0x30>
 80070ee:	2001      	movs	r0, #1
 80070f0:	bd30      	pop	{r4, r5, pc}
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	d3f4      	bcc.n	80070e0 <__mcmp+0x18>
 80070f6:	e7fb      	b.n	80070f0 <__mcmp+0x28>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e7f8      	b.n	80070f0 <__mcmp+0x28>
	...

08007100 <__mdiff>:
 8007100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	4606      	mov	r6, r0
 8007108:	4611      	mov	r1, r2
 800710a:	4620      	mov	r0, r4
 800710c:	4692      	mov	sl, r2
 800710e:	f7ff ffdb 	bl	80070c8 <__mcmp>
 8007112:	1e05      	subs	r5, r0, #0
 8007114:	d111      	bne.n	800713a <__mdiff+0x3a>
 8007116:	4629      	mov	r1, r5
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff fd5b 	bl	8006bd4 <_Balloc>
 800711e:	4602      	mov	r2, r0
 8007120:	b928      	cbnz	r0, 800712e <__mdiff+0x2e>
 8007122:	f240 2132 	movw	r1, #562	; 0x232
 8007126:	4b3c      	ldr	r3, [pc, #240]	; (8007218 <__mdiff+0x118>)
 8007128:	483c      	ldr	r0, [pc, #240]	; (800721c <__mdiff+0x11c>)
 800712a:	f000 fa3f 	bl	80075ac <__assert_func>
 800712e:	2301      	movs	r3, #1
 8007130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007134:	4610      	mov	r0, r2
 8007136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713a:	bfa4      	itt	ge
 800713c:	4653      	movge	r3, sl
 800713e:	46a2      	movge	sl, r4
 8007140:	4630      	mov	r0, r6
 8007142:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007146:	bfa6      	itte	ge
 8007148:	461c      	movge	r4, r3
 800714a:	2500      	movge	r5, #0
 800714c:	2501      	movlt	r5, #1
 800714e:	f7ff fd41 	bl	8006bd4 <_Balloc>
 8007152:	4602      	mov	r2, r0
 8007154:	b918      	cbnz	r0, 800715e <__mdiff+0x5e>
 8007156:	f44f 7110 	mov.w	r1, #576	; 0x240
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <__mdiff+0x118>)
 800715c:	e7e4      	b.n	8007128 <__mdiff+0x28>
 800715e:	f100 0814 	add.w	r8, r0, #20
 8007162:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007166:	60c5      	str	r5, [r0, #12]
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	f10a 0514 	add.w	r5, sl, #20
 8007170:	f10a 0010 	add.w	r0, sl, #16
 8007174:	46c2      	mov	sl, r8
 8007176:	6926      	ldr	r6, [r4, #16]
 8007178:	f104 0914 	add.w	r9, r4, #20
 800717c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007180:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007184:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007188:	f859 3b04 	ldr.w	r3, [r9], #4
 800718c:	fa1f f18b 	uxth.w	r1, fp
 8007190:	4461      	add	r1, ip
 8007192:	fa1f fc83 	uxth.w	ip, r3
 8007196:	0c1b      	lsrs	r3, r3, #16
 8007198:	eba1 010c 	sub.w	r1, r1, ip
 800719c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071a4:	b289      	uxth	r1, r1
 80071a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80071aa:	454e      	cmp	r6, r9
 80071ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071b0:	f84a 3b04 	str.w	r3, [sl], #4
 80071b4:	d8e6      	bhi.n	8007184 <__mdiff+0x84>
 80071b6:	1b33      	subs	r3, r6, r4
 80071b8:	3b15      	subs	r3, #21
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	3415      	adds	r4, #21
 80071c0:	3304      	adds	r3, #4
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	bf38      	it	cc
 80071c6:	2304      	movcc	r3, #4
 80071c8:	441d      	add	r5, r3
 80071ca:	4443      	add	r3, r8
 80071cc:	461e      	mov	r6, r3
 80071ce:	462c      	mov	r4, r5
 80071d0:	4574      	cmp	r4, lr
 80071d2:	d30e      	bcc.n	80071f2 <__mdiff+0xf2>
 80071d4:	f10e 0103 	add.w	r1, lr, #3
 80071d8:	1b49      	subs	r1, r1, r5
 80071da:	f021 0103 	bic.w	r1, r1, #3
 80071de:	3d03      	subs	r5, #3
 80071e0:	45ae      	cmp	lr, r5
 80071e2:	bf38      	it	cc
 80071e4:	2100      	movcc	r1, #0
 80071e6:	4419      	add	r1, r3
 80071e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071ec:	b18b      	cbz	r3, 8007212 <__mdiff+0x112>
 80071ee:	6117      	str	r7, [r2, #16]
 80071f0:	e7a0      	b.n	8007134 <__mdiff+0x34>
 80071f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80071f6:	fa1f f188 	uxth.w	r1, r8
 80071fa:	4461      	add	r1, ip
 80071fc:	1408      	asrs	r0, r1, #16
 80071fe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007202:	b289      	uxth	r1, r1
 8007204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800720c:	f846 1b04 	str.w	r1, [r6], #4
 8007210:	e7de      	b.n	80071d0 <__mdiff+0xd0>
 8007212:	3f01      	subs	r7, #1
 8007214:	e7e8      	b.n	80071e8 <__mdiff+0xe8>
 8007216:	bf00      	nop
 8007218:	08008283 	.word	0x08008283
 800721c:	08008294 	.word	0x08008294

08007220 <__d2b>:
 8007220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007224:	2101      	movs	r1, #1
 8007226:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800722a:	4690      	mov	r8, r2
 800722c:	461d      	mov	r5, r3
 800722e:	f7ff fcd1 	bl	8006bd4 <_Balloc>
 8007232:	4604      	mov	r4, r0
 8007234:	b930      	cbnz	r0, 8007244 <__d2b+0x24>
 8007236:	4602      	mov	r2, r0
 8007238:	f240 310a 	movw	r1, #778	; 0x30a
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <__d2b+0xb0>)
 800723e:	4825      	ldr	r0, [pc, #148]	; (80072d4 <__d2b+0xb4>)
 8007240:	f000 f9b4 	bl	80075ac <__assert_func>
 8007244:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007248:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800724c:	bb2d      	cbnz	r5, 800729a <__d2b+0x7a>
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	f1b8 0300 	subs.w	r3, r8, #0
 8007254:	d026      	beq.n	80072a4 <__d2b+0x84>
 8007256:	4668      	mov	r0, sp
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	f7ff fd87 	bl	8006d6c <__lo0bits>
 800725e:	9900      	ldr	r1, [sp, #0]
 8007260:	b1f0      	cbz	r0, 80072a0 <__d2b+0x80>
 8007262:	9a01      	ldr	r2, [sp, #4]
 8007264:	f1c0 0320 	rsb	r3, r0, #32
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	430b      	orrs	r3, r1
 800726e:	40c2      	lsrs	r2, r0
 8007270:	6163      	str	r3, [r4, #20]
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf14      	ite	ne
 800727a:	2102      	movne	r1, #2
 800727c:	2101      	moveq	r1, #1
 800727e:	61a3      	str	r3, [r4, #24]
 8007280:	6121      	str	r1, [r4, #16]
 8007282:	b1c5      	cbz	r5, 80072b6 <__d2b+0x96>
 8007284:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007288:	4405      	add	r5, r0
 800728a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800728e:	603d      	str	r5, [r7, #0]
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	4620      	mov	r0, r4
 8007294:	b002      	add	sp, #8
 8007296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800729e:	e7d6      	b.n	800724e <__d2b+0x2e>
 80072a0:	6161      	str	r1, [r4, #20]
 80072a2:	e7e7      	b.n	8007274 <__d2b+0x54>
 80072a4:	a801      	add	r0, sp, #4
 80072a6:	f7ff fd61 	bl	8006d6c <__lo0bits>
 80072aa:	2101      	movs	r1, #1
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	6121      	str	r1, [r4, #16]
 80072b0:	6163      	str	r3, [r4, #20]
 80072b2:	3020      	adds	r0, #32
 80072b4:	e7e5      	b.n	8007282 <__d2b+0x62>
 80072b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80072ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072be:	6038      	str	r0, [r7, #0]
 80072c0:	6918      	ldr	r0, [r3, #16]
 80072c2:	f7ff fd33 	bl	8006d2c <__hi0bits>
 80072c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80072ca:	6031      	str	r1, [r6, #0]
 80072cc:	e7e1      	b.n	8007292 <__d2b+0x72>
 80072ce:	bf00      	nop
 80072d0:	08008283 	.word	0x08008283
 80072d4:	08008294 	.word	0x08008294

080072d8 <_calloc_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	fb02 f501 	mul.w	r5, r2, r1
 80072de:	4629      	mov	r1, r5
 80072e0:	f7fe f8e4 	bl	80054ac <_malloc_r>
 80072e4:	4604      	mov	r4, r0
 80072e6:	b118      	cbz	r0, 80072f0 <_calloc_r+0x18>
 80072e8:	462a      	mov	r2, r5
 80072ea:	2100      	movs	r1, #0
 80072ec:	f7fe f88a 	bl	8005404 <memset>
 80072f0:	4620      	mov	r0, r4
 80072f2:	bd38      	pop	{r3, r4, r5, pc}

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	4682      	mov	sl, r0
 80072fc:	429e      	cmp	r6, r3
 80072fe:	460c      	mov	r4, r1
 8007300:	4690      	mov	r8, r2
 8007302:	461f      	mov	r7, r3
 8007304:	d838      	bhi.n	8007378 <__ssputs_r+0x84>
 8007306:	898a      	ldrh	r2, [r1, #12]
 8007308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800730c:	d032      	beq.n	8007374 <__ssputs_r+0x80>
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	6909      	ldr	r1, [r1, #16]
 8007312:	3301      	adds	r3, #1
 8007314:	eba5 0901 	sub.w	r9, r5, r1
 8007318:	6965      	ldr	r5, [r4, #20]
 800731a:	444b      	add	r3, r9
 800731c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007324:	106d      	asrs	r5, r5, #1
 8007326:	429d      	cmp	r5, r3
 8007328:	bf38      	it	cc
 800732a:	461d      	movcc	r5, r3
 800732c:	0553      	lsls	r3, r2, #21
 800732e:	d531      	bpl.n	8007394 <__ssputs_r+0xa0>
 8007330:	4629      	mov	r1, r5
 8007332:	f7fe f8bb 	bl	80054ac <_malloc_r>
 8007336:	4606      	mov	r6, r0
 8007338:	b950      	cbnz	r0, 8007350 <__ssputs_r+0x5c>
 800733a:	230c      	movs	r3, #12
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	f8ca 3000 	str.w	r3, [sl]
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	464a      	mov	r2, r9
 8007352:	6921      	ldr	r1, [r4, #16]
 8007354:	f7ff fc24 	bl	8006ba0 <memcpy>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	6126      	str	r6, [r4, #16]
 8007366:	444e      	add	r6, r9
 8007368:	6026      	str	r6, [r4, #0]
 800736a:	463e      	mov	r6, r7
 800736c:	6165      	str	r5, [r4, #20]
 800736e:	eba5 0509 	sub.w	r5, r5, r9
 8007372:	60a5      	str	r5, [r4, #8]
 8007374:	42be      	cmp	r6, r7
 8007376:	d900      	bls.n	800737a <__ssputs_r+0x86>
 8007378:	463e      	mov	r6, r7
 800737a:	4632      	mov	r2, r6
 800737c:	4641      	mov	r1, r8
 800737e:	6820      	ldr	r0, [r4, #0]
 8007380:	f000 f959 	bl	8007636 <memmove>
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	4432      	add	r2, r6
 800738c:	2000      	movs	r0, #0
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6022      	str	r2, [r4, #0]
 8007392:	e7db      	b.n	800734c <__ssputs_r+0x58>
 8007394:	462a      	mov	r2, r5
 8007396:	f000 f968 	bl	800766a <_realloc_r>
 800739a:	4606      	mov	r6, r0
 800739c:	2800      	cmp	r0, #0
 800739e:	d1e1      	bne.n	8007364 <__ssputs_r+0x70>
 80073a0:	4650      	mov	r0, sl
 80073a2:	6921      	ldr	r1, [r4, #16]
 80073a4:	f7fe f836 	bl	8005414 <_free_r>
 80073a8:	e7c7      	b.n	800733a <__ssputs_r+0x46>
	...

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4698      	mov	r8, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	4607      	mov	r7, r0
 80073b6:	061b      	lsls	r3, r3, #24
 80073b8:	460d      	mov	r5, r1
 80073ba:	4614      	mov	r4, r2
 80073bc:	b09d      	sub	sp, #116	; 0x74
 80073be:	d50e      	bpl.n	80073de <_svfiprintf_r+0x32>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b963      	cbnz	r3, 80073de <_svfiprintf_r+0x32>
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	f7fe f871 	bl	80054ac <_malloc_r>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6128      	str	r0, [r5, #16]
 80073ce:	b920      	cbnz	r0, 80073da <_svfiprintf_r+0x2e>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	e0d1      	b.n	800757e <_svfiprintf_r+0x1d2>
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	616b      	str	r3, [r5, #20]
 80073de:	2300      	movs	r3, #0
 80073e0:	9309      	str	r3, [sp, #36]	; 0x24
 80073e2:	2320      	movs	r3, #32
 80073e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	f04f 0901 	mov.w	r9, #1
 80073ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007598 <_svfiprintf_r+0x1ec>
 80073f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073fa:	4623      	mov	r3, r4
 80073fc:	469a      	mov	sl, r3
 80073fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007402:	b10a      	cbz	r2, 8007408 <_svfiprintf_r+0x5c>
 8007404:	2a25      	cmp	r2, #37	; 0x25
 8007406:	d1f9      	bne.n	80073fc <_svfiprintf_r+0x50>
 8007408:	ebba 0b04 	subs.w	fp, sl, r4
 800740c:	d00b      	beq.n	8007426 <_svfiprintf_r+0x7a>
 800740e:	465b      	mov	r3, fp
 8007410:	4622      	mov	r2, r4
 8007412:	4629      	mov	r1, r5
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff ff6d 	bl	80072f4 <__ssputs_r>
 800741a:	3001      	adds	r0, #1
 800741c:	f000 80aa 	beq.w	8007574 <_svfiprintf_r+0x1c8>
 8007420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007422:	445a      	add	r2, fp
 8007424:	9209      	str	r2, [sp, #36]	; 0x24
 8007426:	f89a 3000 	ldrb.w	r3, [sl]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80a2 	beq.w	8007574 <_svfiprintf_r+0x1c8>
 8007430:	2300      	movs	r3, #0
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743a:	f10a 0a01 	add.w	sl, sl, #1
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	9307      	str	r3, [sp, #28]
 8007442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007446:	931a      	str	r3, [sp, #104]	; 0x68
 8007448:	4654      	mov	r4, sl
 800744a:	2205      	movs	r2, #5
 800744c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007450:	4851      	ldr	r0, [pc, #324]	; (8007598 <_svfiprintf_r+0x1ec>)
 8007452:	f7ff fb97 	bl	8006b84 <memchr>
 8007456:	9a04      	ldr	r2, [sp, #16]
 8007458:	b9d8      	cbnz	r0, 8007492 <_svfiprintf_r+0xe6>
 800745a:	06d0      	lsls	r0, r2, #27
 800745c:	bf44      	itt	mi
 800745e:	2320      	movmi	r3, #32
 8007460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007464:	0711      	lsls	r1, r2, #28
 8007466:	bf44      	itt	mi
 8007468:	232b      	movmi	r3, #43	; 0x2b
 800746a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800746e:	f89a 3000 	ldrb.w	r3, [sl]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d015      	beq.n	80074a2 <_svfiprintf_r+0xf6>
 8007476:	4654      	mov	r4, sl
 8007478:	2000      	movs	r0, #0
 800747a:	f04f 0c0a 	mov.w	ip, #10
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	4621      	mov	r1, r4
 8007482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007486:	3b30      	subs	r3, #48	; 0x30
 8007488:	2b09      	cmp	r3, #9
 800748a:	d94e      	bls.n	800752a <_svfiprintf_r+0x17e>
 800748c:	b1b0      	cbz	r0, 80074bc <_svfiprintf_r+0x110>
 800748e:	9207      	str	r2, [sp, #28]
 8007490:	e014      	b.n	80074bc <_svfiprintf_r+0x110>
 8007492:	eba0 0308 	sub.w	r3, r0, r8
 8007496:	fa09 f303 	lsl.w	r3, r9, r3
 800749a:	4313      	orrs	r3, r2
 800749c:	46a2      	mov	sl, r4
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	e7d2      	b.n	8007448 <_svfiprintf_r+0x9c>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	1d19      	adds	r1, r3, #4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	9103      	str	r1, [sp, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfbb      	ittet	lt
 80074ae:	425b      	neglt	r3, r3
 80074b0:	f042 0202 	orrlt.w	r2, r2, #2
 80074b4:	9307      	strge	r3, [sp, #28]
 80074b6:	9307      	strlt	r3, [sp, #28]
 80074b8:	bfb8      	it	lt
 80074ba:	9204      	strlt	r2, [sp, #16]
 80074bc:	7823      	ldrb	r3, [r4, #0]
 80074be:	2b2e      	cmp	r3, #46	; 0x2e
 80074c0:	d10c      	bne.n	80074dc <_svfiprintf_r+0x130>
 80074c2:	7863      	ldrb	r3, [r4, #1]
 80074c4:	2b2a      	cmp	r3, #42	; 0x2a
 80074c6:	d135      	bne.n	8007534 <_svfiprintf_r+0x188>
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	3402      	adds	r4, #2
 80074cc:	1d1a      	adds	r2, r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	9203      	str	r2, [sp, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfb8      	it	lt
 80074d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075a8 <_svfiprintf_r+0x1fc>
 80074e0:	2203      	movs	r2, #3
 80074e2:	4650      	mov	r0, sl
 80074e4:	7821      	ldrb	r1, [r4, #0]
 80074e6:	f7ff fb4d 	bl	8006b84 <memchr>
 80074ea:	b140      	cbz	r0, 80074fe <_svfiprintf_r+0x152>
 80074ec:	2340      	movs	r3, #64	; 0x40
 80074ee:	eba0 000a 	sub.w	r0, r0, sl
 80074f2:	fa03 f000 	lsl.w	r0, r3, r0
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	3401      	adds	r4, #1
 80074fa:	4303      	orrs	r3, r0
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007502:	2206      	movs	r2, #6
 8007504:	4825      	ldr	r0, [pc, #148]	; (800759c <_svfiprintf_r+0x1f0>)
 8007506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800750a:	f7ff fb3b 	bl	8006b84 <memchr>
 800750e:	2800      	cmp	r0, #0
 8007510:	d038      	beq.n	8007584 <_svfiprintf_r+0x1d8>
 8007512:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <_svfiprintf_r+0x1f4>)
 8007514:	bb1b      	cbnz	r3, 800755e <_svfiprintf_r+0x1b2>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	3307      	adds	r3, #7
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	3308      	adds	r3, #8
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007524:	4433      	add	r3, r6
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	e767      	b.n	80073fa <_svfiprintf_r+0x4e>
 800752a:	460c      	mov	r4, r1
 800752c:	2001      	movs	r0, #1
 800752e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007532:	e7a5      	b.n	8007480 <_svfiprintf_r+0xd4>
 8007534:	2300      	movs	r3, #0
 8007536:	f04f 0c0a 	mov.w	ip, #10
 800753a:	4619      	mov	r1, r3
 800753c:	3401      	adds	r4, #1
 800753e:	9305      	str	r3, [sp, #20]
 8007540:	4620      	mov	r0, r4
 8007542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007546:	3a30      	subs	r2, #48	; 0x30
 8007548:	2a09      	cmp	r2, #9
 800754a:	d903      	bls.n	8007554 <_svfiprintf_r+0x1a8>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0c5      	beq.n	80074dc <_svfiprintf_r+0x130>
 8007550:	9105      	str	r1, [sp, #20]
 8007552:	e7c3      	b.n	80074dc <_svfiprintf_r+0x130>
 8007554:	4604      	mov	r4, r0
 8007556:	2301      	movs	r3, #1
 8007558:	fb0c 2101 	mla	r1, ip, r1, r2
 800755c:	e7f0      	b.n	8007540 <_svfiprintf_r+0x194>
 800755e:	ab03      	add	r3, sp, #12
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	462a      	mov	r2, r5
 8007564:	4638      	mov	r0, r7
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <_svfiprintf_r+0x1f8>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	f7fe f897 	bl	800569c <_printf_float>
 800756e:	1c42      	adds	r2, r0, #1
 8007570:	4606      	mov	r6, r0
 8007572:	d1d6      	bne.n	8007522 <_svfiprintf_r+0x176>
 8007574:	89ab      	ldrh	r3, [r5, #12]
 8007576:	065b      	lsls	r3, r3, #25
 8007578:	f53f af2c 	bmi.w	80073d4 <_svfiprintf_r+0x28>
 800757c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800757e:	b01d      	add	sp, #116	; 0x74
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	ab03      	add	r3, sp, #12
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	462a      	mov	r2, r5
 800758a:	4638      	mov	r0, r7
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <_svfiprintf_r+0x1f8>)
 800758e:	a904      	add	r1, sp, #16
 8007590:	f7fe fb20 	bl	8005bd4 <_printf_i>
 8007594:	e7eb      	b.n	800756e <_svfiprintf_r+0x1c2>
 8007596:	bf00      	nop
 8007598:	080083f4 	.word	0x080083f4
 800759c:	080083fe 	.word	0x080083fe
 80075a0:	0800569d 	.word	0x0800569d
 80075a4:	080072f5 	.word	0x080072f5
 80075a8:	080083fa 	.word	0x080083fa

080075ac <__assert_func>:
 80075ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ae:	4614      	mov	r4, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <__assert_func+0x2c>)
 80075b4:	4605      	mov	r5, r0
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68d8      	ldr	r0, [r3, #12]
 80075ba:	b14c      	cbz	r4, 80075d0 <__assert_func+0x24>
 80075bc:	4b07      	ldr	r3, [pc, #28]	; (80075dc <__assert_func+0x30>)
 80075be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075c2:	9100      	str	r1, [sp, #0]
 80075c4:	462b      	mov	r3, r5
 80075c6:	4906      	ldr	r1, [pc, #24]	; (80075e0 <__assert_func+0x34>)
 80075c8:	f000 f80e 	bl	80075e8 <fiprintf>
 80075cc:	f000 fa98 	bl	8007b00 <abort>
 80075d0:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <__assert_func+0x38>)
 80075d2:	461c      	mov	r4, r3
 80075d4:	e7f3      	b.n	80075be <__assert_func+0x12>
 80075d6:	bf00      	nop
 80075d8:	20000014 	.word	0x20000014
 80075dc:	08008405 	.word	0x08008405
 80075e0:	08008412 	.word	0x08008412
 80075e4:	08008440 	.word	0x08008440

080075e8 <fiprintf>:
 80075e8:	b40e      	push	{r1, r2, r3}
 80075ea:	b503      	push	{r0, r1, lr}
 80075ec:	4601      	mov	r1, r0
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	4805      	ldr	r0, [pc, #20]	; (8007608 <fiprintf+0x20>)
 80075f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f6:	6800      	ldr	r0, [r0, #0]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f000 f883 	bl	8007704 <_vfiprintf_r>
 80075fe:	b002      	add	sp, #8
 8007600:	f85d eb04 	ldr.w	lr, [sp], #4
 8007604:	b003      	add	sp, #12
 8007606:	4770      	bx	lr
 8007608:	20000014 	.word	0x20000014

0800760c <__retarget_lock_init_recursive>:
 800760c:	4770      	bx	lr

0800760e <__retarget_lock_acquire_recursive>:
 800760e:	4770      	bx	lr

08007610 <__retarget_lock_release_recursive>:
 8007610:	4770      	bx	lr

08007612 <__ascii_mbtowc>:
 8007612:	b082      	sub	sp, #8
 8007614:	b901      	cbnz	r1, 8007618 <__ascii_mbtowc+0x6>
 8007616:	a901      	add	r1, sp, #4
 8007618:	b142      	cbz	r2, 800762c <__ascii_mbtowc+0x1a>
 800761a:	b14b      	cbz	r3, 8007630 <__ascii_mbtowc+0x1e>
 800761c:	7813      	ldrb	r3, [r2, #0]
 800761e:	600b      	str	r3, [r1, #0]
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	1e10      	subs	r0, r2, #0
 8007624:	bf18      	it	ne
 8007626:	2001      	movne	r0, #1
 8007628:	b002      	add	sp, #8
 800762a:	4770      	bx	lr
 800762c:	4610      	mov	r0, r2
 800762e:	e7fb      	b.n	8007628 <__ascii_mbtowc+0x16>
 8007630:	f06f 0001 	mvn.w	r0, #1
 8007634:	e7f8      	b.n	8007628 <__ascii_mbtowc+0x16>

08007636 <memmove>:
 8007636:	4288      	cmp	r0, r1
 8007638:	b510      	push	{r4, lr}
 800763a:	eb01 0402 	add.w	r4, r1, r2
 800763e:	d902      	bls.n	8007646 <memmove+0x10>
 8007640:	4284      	cmp	r4, r0
 8007642:	4623      	mov	r3, r4
 8007644:	d807      	bhi.n	8007656 <memmove+0x20>
 8007646:	1e43      	subs	r3, r0, #1
 8007648:	42a1      	cmp	r1, r4
 800764a:	d008      	beq.n	800765e <memmove+0x28>
 800764c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007650:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007654:	e7f8      	b.n	8007648 <memmove+0x12>
 8007656:	4601      	mov	r1, r0
 8007658:	4402      	add	r2, r0
 800765a:	428a      	cmp	r2, r1
 800765c:	d100      	bne.n	8007660 <memmove+0x2a>
 800765e:	bd10      	pop	{r4, pc}
 8007660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007664:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007668:	e7f7      	b.n	800765a <memmove+0x24>

0800766a <_realloc_r>:
 800766a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766c:	4607      	mov	r7, r0
 800766e:	4614      	mov	r4, r2
 8007670:	460e      	mov	r6, r1
 8007672:	b921      	cbnz	r1, 800767e <_realloc_r+0x14>
 8007674:	4611      	mov	r1, r2
 8007676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800767a:	f7fd bf17 	b.w	80054ac <_malloc_r>
 800767e:	b922      	cbnz	r2, 800768a <_realloc_r+0x20>
 8007680:	f7fd fec8 	bl	8005414 <_free_r>
 8007684:	4625      	mov	r5, r4
 8007686:	4628      	mov	r0, r5
 8007688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768a:	f000 fc5d 	bl	8007f48 <_malloc_usable_size_r>
 800768e:	42a0      	cmp	r0, r4
 8007690:	d20f      	bcs.n	80076b2 <_realloc_r+0x48>
 8007692:	4621      	mov	r1, r4
 8007694:	4638      	mov	r0, r7
 8007696:	f7fd ff09 	bl	80054ac <_malloc_r>
 800769a:	4605      	mov	r5, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d0f2      	beq.n	8007686 <_realloc_r+0x1c>
 80076a0:	4631      	mov	r1, r6
 80076a2:	4622      	mov	r2, r4
 80076a4:	f7ff fa7c 	bl	8006ba0 <memcpy>
 80076a8:	4631      	mov	r1, r6
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7fd feb2 	bl	8005414 <_free_r>
 80076b0:	e7e9      	b.n	8007686 <_realloc_r+0x1c>
 80076b2:	4635      	mov	r5, r6
 80076b4:	e7e7      	b.n	8007686 <_realloc_r+0x1c>

080076b6 <__sfputc_r>:
 80076b6:	6893      	ldr	r3, [r2, #8]
 80076b8:	b410      	push	{r4}
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	6093      	str	r3, [r2, #8]
 80076c0:	da07      	bge.n	80076d2 <__sfputc_r+0x1c>
 80076c2:	6994      	ldr	r4, [r2, #24]
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	db01      	blt.n	80076cc <__sfputc_r+0x16>
 80076c8:	290a      	cmp	r1, #10
 80076ca:	d102      	bne.n	80076d2 <__sfputc_r+0x1c>
 80076cc:	bc10      	pop	{r4}
 80076ce:	f000 b949 	b.w	8007964 <__swbuf_r>
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	1c58      	adds	r0, r3, #1
 80076d6:	6010      	str	r0, [r2, #0]
 80076d8:	7019      	strb	r1, [r3, #0]
 80076da:	4608      	mov	r0, r1
 80076dc:	bc10      	pop	{r4}
 80076de:	4770      	bx	lr

080076e0 <__sfputs_r>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	4606      	mov	r6, r0
 80076e4:	460f      	mov	r7, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	18d5      	adds	r5, r2, r3
 80076ea:	42ac      	cmp	r4, r5
 80076ec:	d101      	bne.n	80076f2 <__sfputs_r+0x12>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e007      	b.n	8007702 <__sfputs_r+0x22>
 80076f2:	463a      	mov	r2, r7
 80076f4:	4630      	mov	r0, r6
 80076f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fa:	f7ff ffdc 	bl	80076b6 <__sfputc_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d1f3      	bne.n	80076ea <__sfputs_r+0xa>
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007704 <_vfiprintf_r>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	460d      	mov	r5, r1
 800770a:	4614      	mov	r4, r2
 800770c:	4698      	mov	r8, r3
 800770e:	4606      	mov	r6, r0
 8007710:	b09d      	sub	sp, #116	; 0x74
 8007712:	b118      	cbz	r0, 800771c <_vfiprintf_r+0x18>
 8007714:	6983      	ldr	r3, [r0, #24]
 8007716:	b90b      	cbnz	r3, 800771c <_vfiprintf_r+0x18>
 8007718:	f000 fb14 	bl	8007d44 <__sinit>
 800771c:	4b89      	ldr	r3, [pc, #548]	; (8007944 <_vfiprintf_r+0x240>)
 800771e:	429d      	cmp	r5, r3
 8007720:	d11b      	bne.n	800775a <_vfiprintf_r+0x56>
 8007722:	6875      	ldr	r5, [r6, #4]
 8007724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x32>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x32>
 8007730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007732:	f7ff ff6c 	bl	800760e <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x3c>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b9eb      	cbnz	r3, 800777c <_vfiprintf_r+0x78>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f96e 	bl	8007a24 <__swsetup_r>
 8007748:	b1c0      	cbz	r0, 800777c <_vfiprintf_r+0x78>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d50e      	bpl.n	800776e <_vfiprintf_r+0x6a>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	b01d      	add	sp, #116	; 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <_vfiprintf_r+0x244>)
 800775c:	429d      	cmp	r5, r3
 800775e:	d101      	bne.n	8007764 <_vfiprintf_r+0x60>
 8007760:	68b5      	ldr	r5, [r6, #8]
 8007762:	e7df      	b.n	8007724 <_vfiprintf_r+0x20>
 8007764:	4b79      	ldr	r3, [pc, #484]	; (800794c <_vfiprintf_r+0x248>)
 8007766:	429d      	cmp	r5, r3
 8007768:	bf08      	it	eq
 800776a:	68f5      	ldreq	r5, [r6, #12]
 800776c:	e7da      	b.n	8007724 <_vfiprintf_r+0x20>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	0598      	lsls	r0, r3, #22
 8007772:	d4ed      	bmi.n	8007750 <_vfiprintf_r+0x4c>
 8007774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007776:	f7ff ff4b 	bl	8007610 <__retarget_lock_release_recursive>
 800777a:	e7e9      	b.n	8007750 <_vfiprintf_r+0x4c>
 800777c:	2300      	movs	r3, #0
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	2320      	movs	r3, #32
 8007782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007786:	2330      	movs	r3, #48	; 0x30
 8007788:	f04f 0901 	mov.w	r9, #1
 800778c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007790:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007950 <_vfiprintf_r+0x24c>
 8007794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007798:	4623      	mov	r3, r4
 800779a:	469a      	mov	sl, r3
 800779c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a0:	b10a      	cbz	r2, 80077a6 <_vfiprintf_r+0xa2>
 80077a2:	2a25      	cmp	r2, #37	; 0x25
 80077a4:	d1f9      	bne.n	800779a <_vfiprintf_r+0x96>
 80077a6:	ebba 0b04 	subs.w	fp, sl, r4
 80077aa:	d00b      	beq.n	80077c4 <_vfiprintf_r+0xc0>
 80077ac:	465b      	mov	r3, fp
 80077ae:	4622      	mov	r2, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff94 	bl	80076e0 <__sfputs_r>
 80077b8:	3001      	adds	r0, #1
 80077ba:	f000 80aa 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c0:	445a      	add	r2, fp
 80077c2:	9209      	str	r2, [sp, #36]	; 0x24
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a2 	beq.w	8007912 <_vfiprintf_r+0x20e>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f04f 32ff 	mov.w	r2, #4294967295
 80077d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d8:	f10a 0a01 	add.w	sl, sl, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e4:	931a      	str	r3, [sp, #104]	; 0x68
 80077e6:	4654      	mov	r4, sl
 80077e8:	2205      	movs	r2, #5
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	4858      	ldr	r0, [pc, #352]	; (8007950 <_vfiprintf_r+0x24c>)
 80077f0:	f7ff f9c8 	bl	8006b84 <memchr>
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	b9d8      	cbnz	r0, 8007830 <_vfiprintf_r+0x12c>
 80077f8:	06d1      	lsls	r1, r2, #27
 80077fa:	bf44      	itt	mi
 80077fc:	2320      	movmi	r3, #32
 80077fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007802:	0713      	lsls	r3, r2, #28
 8007804:	bf44      	itt	mi
 8007806:	232b      	movmi	r3, #43	; 0x2b
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780c:	f89a 3000 	ldrb.w	r3, [sl]
 8007810:	2b2a      	cmp	r3, #42	; 0x2a
 8007812:	d015      	beq.n	8007840 <_vfiprintf_r+0x13c>
 8007814:	4654      	mov	r4, sl
 8007816:	2000      	movs	r0, #0
 8007818:	f04f 0c0a 	mov.w	ip, #10
 800781c:	9a07      	ldr	r2, [sp, #28]
 800781e:	4621      	mov	r1, r4
 8007820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007824:	3b30      	subs	r3, #48	; 0x30
 8007826:	2b09      	cmp	r3, #9
 8007828:	d94e      	bls.n	80078c8 <_vfiprintf_r+0x1c4>
 800782a:	b1b0      	cbz	r0, 800785a <_vfiprintf_r+0x156>
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	e014      	b.n	800785a <_vfiprintf_r+0x156>
 8007830:	eba0 0308 	sub.w	r3, r0, r8
 8007834:	fa09 f303 	lsl.w	r3, r9, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	46a2      	mov	sl, r4
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	e7d2      	b.n	80077e6 <_vfiprintf_r+0xe2>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	1d19      	adds	r1, r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	9103      	str	r1, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfbb      	ittet	lt
 800784c:	425b      	neglt	r3, r3
 800784e:	f042 0202 	orrlt.w	r2, r2, #2
 8007852:	9307      	strge	r3, [sp, #28]
 8007854:	9307      	strlt	r3, [sp, #28]
 8007856:	bfb8      	it	lt
 8007858:	9204      	strlt	r2, [sp, #16]
 800785a:	7823      	ldrb	r3, [r4, #0]
 800785c:	2b2e      	cmp	r3, #46	; 0x2e
 800785e:	d10c      	bne.n	800787a <_vfiprintf_r+0x176>
 8007860:	7863      	ldrb	r3, [r4, #1]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d135      	bne.n	80078d2 <_vfiprintf_r+0x1ce>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	3402      	adds	r4, #2
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	9203      	str	r2, [sp, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfb8      	it	lt
 8007874:	f04f 33ff 	movlt.w	r3, #4294967295
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007960 <_vfiprintf_r+0x25c>
 800787e:	2203      	movs	r2, #3
 8007880:	4650      	mov	r0, sl
 8007882:	7821      	ldrb	r1, [r4, #0]
 8007884:	f7ff f97e 	bl	8006b84 <memchr>
 8007888:	b140      	cbz	r0, 800789c <_vfiprintf_r+0x198>
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	eba0 000a 	sub.w	r0, r0, sl
 8007890:	fa03 f000 	lsl.w	r0, r3, r0
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	3401      	adds	r4, #1
 8007898:	4303      	orrs	r3, r0
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	2206      	movs	r2, #6
 80078a2:	482c      	ldr	r0, [pc, #176]	; (8007954 <_vfiprintf_r+0x250>)
 80078a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a8:	f7ff f96c 	bl	8006b84 <memchr>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d03f      	beq.n	8007930 <_vfiprintf_r+0x22c>
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <_vfiprintf_r+0x254>)
 80078b2:	bb1b      	cbnz	r3, 80078fc <_vfiprintf_r+0x1f8>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	3308      	adds	r3, #8
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	443b      	add	r3, r7
 80078c4:	9309      	str	r3, [sp, #36]	; 0x24
 80078c6:	e767      	b.n	8007798 <_vfiprintf_r+0x94>
 80078c8:	460c      	mov	r4, r1
 80078ca:	2001      	movs	r0, #1
 80078cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d0:	e7a5      	b.n	800781e <_vfiprintf_r+0x11a>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f04f 0c0a 	mov.w	ip, #10
 80078d8:	4619      	mov	r1, r3
 80078da:	3401      	adds	r4, #1
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	4620      	mov	r0, r4
 80078e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e4:	3a30      	subs	r2, #48	; 0x30
 80078e6:	2a09      	cmp	r2, #9
 80078e8:	d903      	bls.n	80078f2 <_vfiprintf_r+0x1ee>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c5      	beq.n	800787a <_vfiprintf_r+0x176>
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	e7c3      	b.n	800787a <_vfiprintf_r+0x176>
 80078f2:	4604      	mov	r4, r0
 80078f4:	2301      	movs	r3, #1
 80078f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fa:	e7f0      	b.n	80078de <_vfiprintf_r+0x1da>
 80078fc:	ab03      	add	r3, sp, #12
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	462a      	mov	r2, r5
 8007902:	4630      	mov	r0, r6
 8007904:	4b15      	ldr	r3, [pc, #84]	; (800795c <_vfiprintf_r+0x258>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	f7fd fec8 	bl	800569c <_printf_float>
 800790c:	4607      	mov	r7, r0
 800790e:	1c78      	adds	r0, r7, #1
 8007910:	d1d6      	bne.n	80078c0 <_vfiprintf_r+0x1bc>
 8007912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d405      	bmi.n	8007924 <_vfiprintf_r+0x220>
 8007918:	89ab      	ldrh	r3, [r5, #12]
 800791a:	059a      	lsls	r2, r3, #22
 800791c:	d402      	bmi.n	8007924 <_vfiprintf_r+0x220>
 800791e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007920:	f7ff fe76 	bl	8007610 <__retarget_lock_release_recursive>
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	065b      	lsls	r3, r3, #25
 8007928:	f53f af12 	bmi.w	8007750 <_vfiprintf_r+0x4c>
 800792c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800792e:	e711      	b.n	8007754 <_vfiprintf_r+0x50>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4630      	mov	r0, r6
 8007938:	4b08      	ldr	r3, [pc, #32]	; (800795c <_vfiprintf_r+0x258>)
 800793a:	a904      	add	r1, sp, #16
 800793c:	f7fe f94a 	bl	8005bd4 <_printf_i>
 8007940:	e7e4      	b.n	800790c <_vfiprintf_r+0x208>
 8007942:	bf00      	nop
 8007944:	0800856c 	.word	0x0800856c
 8007948:	0800858c 	.word	0x0800858c
 800794c:	0800854c 	.word	0x0800854c
 8007950:	080083f4 	.word	0x080083f4
 8007954:	080083fe 	.word	0x080083fe
 8007958:	0800569d 	.word	0x0800569d
 800795c:	080076e1 	.word	0x080076e1
 8007960:	080083fa 	.word	0x080083fa

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4605      	mov	r5, r0
 800796c:	b118      	cbz	r0, 8007976 <__swbuf_r+0x12>
 800796e:	6983      	ldr	r3, [r0, #24]
 8007970:	b90b      	cbnz	r3, 8007976 <__swbuf_r+0x12>
 8007972:	f000 f9e7 	bl	8007d44 <__sinit>
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <__swbuf_r+0x98>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d12b      	bne.n	80079d4 <__swbuf_r+0x70>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d52f      	bpl.n	80079e8 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b36b      	cbz	r3, 80079e8 <__swbuf_r+0x84>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	b2f6      	uxtb	r6, r6
 8007992:	1ac0      	subs	r0, r0, r3
 8007994:	6963      	ldr	r3, [r4, #20]
 8007996:	4637      	mov	r7, r6
 8007998:	4283      	cmp	r3, r0
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x42>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f93c 	bl	8007c1c <_fflush_r>
 80079a4:	bb30      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3001      	adds	r0, #1
 80079aa:	3b01      	subs	r3, #1
 80079ac:	60a3      	str	r3, [r4, #8]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	701e      	strb	r6, [r3, #0]
 80079b6:	6963      	ldr	r3, [r4, #20]
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x62>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x6c>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x6c>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 f927 	bl	8007c1c <_fflush_r>
 80079ce:	b988      	cbnz	r0, 80079f4 <__swbuf_r+0x90>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <__swbuf_r+0x9c>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d101      	bne.n	80079de <__swbuf_r+0x7a>
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	e7cf      	b.n	800797e <__swbuf_r+0x1a>
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__swbuf_r+0xa0>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	bf08      	it	eq
 80079e4:	68ec      	ldreq	r4, [r5, #12]
 80079e6:	e7ca      	b.n	800797e <__swbuf_r+0x1a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f81a 	bl	8007a24 <__swsetup_r>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d0cb      	beq.n	800798c <__swbuf_r+0x28>
 80079f4:	f04f 37ff 	mov.w	r7, #4294967295
 80079f8:	e7ea      	b.n	80079d0 <__swbuf_r+0x6c>
 80079fa:	bf00      	nop
 80079fc:	0800856c 	.word	0x0800856c
 8007a00:	0800858c 	.word	0x0800858c
 8007a04:	0800854c 	.word	0x0800854c

08007a08 <__ascii_wctomb>:
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	b141      	cbz	r1, 8007a20 <__ascii_wctomb+0x18>
 8007a0e:	2aff      	cmp	r2, #255	; 0xff
 8007a10:	d904      	bls.n	8007a1c <__ascii_wctomb+0x14>
 8007a12:	228a      	movs	r2, #138	; 0x8a
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	4770      	bx	lr
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	700a      	strb	r2, [r1, #0]
 8007a20:	4770      	bx	lr
	...

08007a24 <__swsetup_r>:
 8007a24:	4b32      	ldr	r3, [pc, #200]	; (8007af0 <__swsetup_r+0xcc>)
 8007a26:	b570      	push	{r4, r5, r6, lr}
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	b125      	cbz	r5, 8007a3a <__swsetup_r+0x16>
 8007a30:	69ab      	ldr	r3, [r5, #24]
 8007a32:	b913      	cbnz	r3, 8007a3a <__swsetup_r+0x16>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f000 f985 	bl	8007d44 <__sinit>
 8007a3a:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <__swsetup_r+0xd0>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	d10f      	bne.n	8007a60 <__swsetup_r+0x3c>
 8007a40:	686c      	ldr	r4, [r5, #4]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a48:	0719      	lsls	r1, r3, #28
 8007a4a:	d42c      	bmi.n	8007aa6 <__swsetup_r+0x82>
 8007a4c:	06dd      	lsls	r5, r3, #27
 8007a4e:	d411      	bmi.n	8007a74 <__swsetup_r+0x50>
 8007a50:	2309      	movs	r3, #9
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	e03e      	b.n	8007ade <__swsetup_r+0xba>
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <__swsetup_r+0xd4>)
 8007a62:	429c      	cmp	r4, r3
 8007a64:	d101      	bne.n	8007a6a <__swsetup_r+0x46>
 8007a66:	68ac      	ldr	r4, [r5, #8]
 8007a68:	e7eb      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <__swsetup_r+0xd8>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	bf08      	it	eq
 8007a70:	68ec      	ldreq	r4, [r5, #12]
 8007a72:	e7e6      	b.n	8007a42 <__swsetup_r+0x1e>
 8007a74:	0758      	lsls	r0, r3, #29
 8007a76:	d512      	bpl.n	8007a9e <__swsetup_r+0x7a>
 8007a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7a:	b141      	cbz	r1, 8007a8e <__swsetup_r+0x6a>
 8007a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d002      	beq.n	8007a8a <__swsetup_r+0x66>
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7fd fcc5 	bl	8005414 <_free_r>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f043 0308 	orr.w	r3, r3, #8
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	b94b      	cbnz	r3, 8007abe <__swsetup_r+0x9a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab4:	d003      	beq.n	8007abe <__swsetup_r+0x9a>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 fa05 	bl	8007ec8 <__smakebuf_r>
 8007abe:	89a0      	ldrh	r0, [r4, #12]
 8007ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac4:	f010 0301 	ands.w	r3, r0, #1
 8007ac8:	d00a      	beq.n	8007ae0 <__swsetup_r+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	6963      	ldr	r3, [r4, #20]
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	61a3      	str	r3, [r4, #24]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	b943      	cbnz	r3, 8007aea <__swsetup_r+0xc6>
 8007ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007adc:	d1ba      	bne.n	8007a54 <__swsetup_r+0x30>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	0781      	lsls	r1, r0, #30
 8007ae2:	bf58      	it	pl
 8007ae4:	6963      	ldrpl	r3, [r4, #20]
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	e7f4      	b.n	8007ad4 <__swsetup_r+0xb0>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7f7      	b.n	8007ade <__swsetup_r+0xba>
 8007aee:	bf00      	nop
 8007af0:	20000014 	.word	0x20000014
 8007af4:	0800856c 	.word	0x0800856c
 8007af8:	0800858c 	.word	0x0800858c
 8007afc:	0800854c 	.word	0x0800854c

08007b00 <abort>:
 8007b00:	2006      	movs	r0, #6
 8007b02:	b508      	push	{r3, lr}
 8007b04:	f000 fa50 	bl	8007fa8 <raise>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7fa f914 	bl	8001d36 <_exit>
	...

08007b10 <__sflush_r>:
 8007b10:	898a      	ldrh	r2, [r1, #12]
 8007b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	4605      	mov	r5, r0
 8007b18:	0710      	lsls	r0, r2, #28
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	d458      	bmi.n	8007bd0 <__sflush_r+0xc0>
 8007b1e:	684b      	ldr	r3, [r1, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc05      	bgt.n	8007b30 <__sflush_r+0x20>
 8007b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dc02      	bgt.n	8007b30 <__sflush_r+0x20>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d0f9      	beq.n	8007b2a <__sflush_r+0x1a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b3c:	682f      	ldr	r7, [r5, #0]
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	d032      	beq.n	8007ba8 <__sflush_r+0x98>
 8007b42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	075a      	lsls	r2, r3, #29
 8007b48:	d505      	bpl.n	8007b56 <__sflush_r+0x46>
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	1ac0      	subs	r0, r0, r3
 8007b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b50:	b10b      	cbz	r3, 8007b56 <__sflush_r+0x46>
 8007b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b54:	1ac0      	subs	r0, r0, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	6a21      	ldr	r1, [r4, #32]
 8007b60:	47b0      	blx	r6
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	d106      	bne.n	8007b76 <__sflush_r+0x66>
 8007b68:	6829      	ldr	r1, [r5, #0]
 8007b6a:	291d      	cmp	r1, #29
 8007b6c:	d82c      	bhi.n	8007bc8 <__sflush_r+0xb8>
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <__sflush_r+0x108>)
 8007b70:	40ca      	lsrs	r2, r1
 8007b72:	07d6      	lsls	r6, r2, #31
 8007b74:	d528      	bpl.n	8007bc8 <__sflush_r+0xb8>
 8007b76:	2200      	movs	r2, #0
 8007b78:	6062      	str	r2, [r4, #4]
 8007b7a:	6922      	ldr	r2, [r4, #16]
 8007b7c:	04d9      	lsls	r1, r3, #19
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	d504      	bpl.n	8007b8c <__sflush_r+0x7c>
 8007b82:	1c42      	adds	r2, r0, #1
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0x7a>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b903      	cbnz	r3, 8007b8c <__sflush_r+0x7c>
 8007b8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8e:	602f      	str	r7, [r5, #0]
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d0ca      	beq.n	8007b2a <__sflush_r+0x1a>
 8007b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	d002      	beq.n	8007ba2 <__sflush_r+0x92>
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f7fd fc39 	bl	8005414 <_free_r>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ba6:	e7c1      	b.n	8007b2c <__sflush_r+0x1c>
 8007ba8:	6a21      	ldr	r1, [r4, #32]
 8007baa:	2301      	movs	r3, #1
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b0      	blx	r6
 8007bb0:	1c41      	adds	r1, r0, #1
 8007bb2:	d1c7      	bne.n	8007b44 <__sflush_r+0x34>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0c4      	beq.n	8007b44 <__sflush_r+0x34>
 8007bba:	2b1d      	cmp	r3, #29
 8007bbc:	d001      	beq.n	8007bc2 <__sflush_r+0xb2>
 8007bbe:	2b16      	cmp	r3, #22
 8007bc0:	d101      	bne.n	8007bc6 <__sflush_r+0xb6>
 8007bc2:	602f      	str	r7, [r5, #0]
 8007bc4:	e7b1      	b.n	8007b2a <__sflush_r+0x1a>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	e7ad      	b.n	8007b2c <__sflush_r+0x1c>
 8007bd0:	690f      	ldr	r7, [r1, #16]
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	d0a9      	beq.n	8007b2a <__sflush_r+0x1a>
 8007bd6:	0793      	lsls	r3, r2, #30
 8007bd8:	bf18      	it	ne
 8007bda:	2300      	movne	r3, #0
 8007bdc:	680e      	ldr	r6, [r1, #0]
 8007bde:	bf08      	it	eq
 8007be0:	694b      	ldreq	r3, [r1, #20]
 8007be2:	eba6 0807 	sub.w	r8, r6, r7
 8007be6:	600f      	str	r7, [r1, #0]
 8007be8:	608b      	str	r3, [r1, #8]
 8007bea:	f1b8 0f00 	cmp.w	r8, #0
 8007bee:	dd9c      	ble.n	8007b2a <__sflush_r+0x1a>
 8007bf0:	4643      	mov	r3, r8
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	6a21      	ldr	r1, [r4, #32]
 8007bf8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bfa:	47b0      	blx	r6
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	dc06      	bgt.n	8007c0e <__sflush_r+0xfe>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	e78e      	b.n	8007b2c <__sflush_r+0x1c>
 8007c0e:	4407      	add	r7, r0
 8007c10:	eba8 0800 	sub.w	r8, r8, r0
 8007c14:	e7e9      	b.n	8007bea <__sflush_r+0xda>
 8007c16:	bf00      	nop
 8007c18:	20400001 	.word	0x20400001

08007c1c <_fflush_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	690b      	ldr	r3, [r1, #16]
 8007c20:	4605      	mov	r5, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b913      	cbnz	r3, 8007c2c <_fflush_r+0x10>
 8007c26:	2500      	movs	r5, #0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	b118      	cbz	r0, 8007c36 <_fflush_r+0x1a>
 8007c2e:	6983      	ldr	r3, [r0, #24]
 8007c30:	b90b      	cbnz	r3, 8007c36 <_fflush_r+0x1a>
 8007c32:	f000 f887 	bl	8007d44 <__sinit>
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <_fflush_r+0x6c>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d11b      	bne.n	8007c74 <_fflush_r+0x58>
 8007c3c:	686c      	ldr	r4, [r5, #4]
 8007c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0ef      	beq.n	8007c26 <_fflush_r+0xa>
 8007c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c48:	07d0      	lsls	r0, r2, #31
 8007c4a:	d404      	bmi.n	8007c56 <_fflush_r+0x3a>
 8007c4c:	0599      	lsls	r1, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <_fflush_r+0x3a>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f7ff fcdc 	bl	800760e <__retarget_lock_acquire_recursive>
 8007c56:	4628      	mov	r0, r5
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f7ff ff59 	bl	8007b10 <__sflush_r>
 8007c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c60:	4605      	mov	r5, r0
 8007c62:	07da      	lsls	r2, r3, #31
 8007c64:	d4e0      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	059b      	lsls	r3, r3, #22
 8007c6a:	d4dd      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6e:	f7ff fccf 	bl	8007610 <__retarget_lock_release_recursive>
 8007c72:	e7d9      	b.n	8007c28 <_fflush_r+0xc>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <_fflush_r+0x70>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d101      	bne.n	8007c7e <_fflush_r+0x62>
 8007c7a:	68ac      	ldr	r4, [r5, #8]
 8007c7c:	e7df      	b.n	8007c3e <_fflush_r+0x22>
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <_fflush_r+0x74>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	bf08      	it	eq
 8007c84:	68ec      	ldreq	r4, [r5, #12]
 8007c86:	e7da      	b.n	8007c3e <_fflush_r+0x22>
 8007c88:	0800856c 	.word	0x0800856c
 8007c8c:	0800858c 	.word	0x0800858c
 8007c90:	0800854c 	.word	0x0800854c

08007c94 <std>:
 8007c94:	2300      	movs	r3, #0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca2:	6083      	str	r3, [r0, #8]
 8007ca4:	8181      	strh	r1, [r0, #12]
 8007ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ca8:	81c2      	strh	r2, [r0, #14]
 8007caa:	6183      	str	r3, [r0, #24]
 8007cac:	4619      	mov	r1, r3
 8007cae:	2208      	movs	r2, #8
 8007cb0:	305c      	adds	r0, #92	; 0x5c
 8007cb2:	f7fd fba7 	bl	8005404 <memset>
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <std+0x38>)
 8007cb8:	6224      	str	r4, [r4, #32]
 8007cba:	6263      	str	r3, [r4, #36]	; 0x24
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <std+0x3c>)
 8007cbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <std+0x40>)
 8007cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <std+0x44>)
 8007cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007fe1 	.word	0x08007fe1
 8007cd0:	08008003 	.word	0x08008003
 8007cd4:	0800803b 	.word	0x0800803b
 8007cd8:	0800805f 	.word	0x0800805f

08007cdc <_cleanup_r>:
 8007cdc:	4901      	ldr	r1, [pc, #4]	; (8007ce4 <_cleanup_r+0x8>)
 8007cde:	f000 b8af 	b.w	8007e40 <_fwalk_reent>
 8007ce2:	bf00      	nop
 8007ce4:	08007c1d 	.word	0x08007c1d

08007ce8 <__sfmoreglue>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	2568      	movs	r5, #104	; 0x68
 8007cec:	1e4a      	subs	r2, r1, #1
 8007cee:	4355      	muls	r5, r2
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cf6:	f7fd fbd9 	bl	80054ac <_malloc_r>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b140      	cbz	r0, 8007d10 <__sfmoreglue+0x28>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	e9c0 1600 	strd	r1, r6, [r0]
 8007d04:	300c      	adds	r0, #12
 8007d06:	60a0      	str	r0, [r4, #8]
 8007d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d0c:	f7fd fb7a 	bl	8005404 <memset>
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}

08007d14 <__sfp_lock_acquire>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__sfp_lock_acquire+0x8>)
 8007d16:	f7ff bc7a 	b.w	800760e <__retarget_lock_acquire_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20000380 	.word	0x20000380

08007d20 <__sfp_lock_release>:
 8007d20:	4801      	ldr	r0, [pc, #4]	; (8007d28 <__sfp_lock_release+0x8>)
 8007d22:	f7ff bc75 	b.w	8007610 <__retarget_lock_release_recursive>
 8007d26:	bf00      	nop
 8007d28:	20000380 	.word	0x20000380

08007d2c <__sinit_lock_acquire>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__sinit_lock_acquire+0x8>)
 8007d2e:	f7ff bc6e 	b.w	800760e <__retarget_lock_acquire_recursive>
 8007d32:	bf00      	nop
 8007d34:	2000037b 	.word	0x2000037b

08007d38 <__sinit_lock_release>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sinit_lock_release+0x8>)
 8007d3a:	f7ff bc69 	b.w	8007610 <__retarget_lock_release_recursive>
 8007d3e:	bf00      	nop
 8007d40:	2000037b 	.word	0x2000037b

08007d44 <__sinit>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4604      	mov	r4, r0
 8007d48:	f7ff fff0 	bl	8007d2c <__sinit_lock_acquire>
 8007d4c:	69a3      	ldr	r3, [r4, #24]
 8007d4e:	b11b      	cbz	r3, 8007d58 <__sinit+0x14>
 8007d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d54:	f7ff bff0 	b.w	8007d38 <__sinit_lock_release>
 8007d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <__sinit+0x68>)
 8007d60:	4a13      	ldr	r2, [pc, #76]	; (8007db0 <__sinit+0x6c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	bf08      	it	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	bf08      	it	eq
 8007d70:	61a3      	streq	r3, [r4, #24]
 8007d72:	f000 f81f 	bl	8007db4 <__sfp>
 8007d76:	6060      	str	r0, [r4, #4]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 f81b 	bl	8007db4 <__sfp>
 8007d7e:	60a0      	str	r0, [r4, #8]
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 f817 	bl	8007db4 <__sfp>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2104      	movs	r1, #4
 8007d8a:	60e0      	str	r0, [r4, #12]
 8007d8c:	6860      	ldr	r0, [r4, #4]
 8007d8e:	f7ff ff81 	bl	8007c94 <std>
 8007d92:	2201      	movs	r2, #1
 8007d94:	2109      	movs	r1, #9
 8007d96:	68a0      	ldr	r0, [r4, #8]
 8007d98:	f7ff ff7c 	bl	8007c94 <std>
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	2112      	movs	r1, #18
 8007da0:	68e0      	ldr	r0, [r4, #12]
 8007da2:	f7ff ff77 	bl	8007c94 <std>
 8007da6:	2301      	movs	r3, #1
 8007da8:	61a3      	str	r3, [r4, #24]
 8007daa:	e7d1      	b.n	8007d50 <__sinit+0xc>
 8007dac:	080081c8 	.word	0x080081c8
 8007db0:	08007cdd 	.word	0x08007cdd

08007db4 <__sfp>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	4607      	mov	r7, r0
 8007db8:	f7ff ffac 	bl	8007d14 <__sfp_lock_acquire>
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <__sfp+0x84>)
 8007dbe:	681e      	ldr	r6, [r3, #0]
 8007dc0:	69b3      	ldr	r3, [r6, #24]
 8007dc2:	b913      	cbnz	r3, 8007dca <__sfp+0x16>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ffbd 	bl	8007d44 <__sinit>
 8007dca:	3648      	adds	r6, #72	; 0x48
 8007dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	d503      	bpl.n	8007ddc <__sfp+0x28>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	b30b      	cbz	r3, 8007e1c <__sfp+0x68>
 8007dd8:	6836      	ldr	r6, [r6, #0]
 8007dda:	e7f7      	b.n	8007dcc <__sfp+0x18>
 8007ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007de0:	b9d5      	cbnz	r5, 8007e18 <__sfp+0x64>
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <__sfp+0x88>)
 8007de4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007de8:	60e3      	str	r3, [r4, #12]
 8007dea:	6665      	str	r5, [r4, #100]	; 0x64
 8007dec:	f7ff fc0e 	bl	800760c <__retarget_lock_init_recursive>
 8007df0:	f7ff ff96 	bl	8007d20 <__sfp_lock_release>
 8007df4:	2208      	movs	r2, #8
 8007df6:	4629      	mov	r1, r5
 8007df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e00:	6025      	str	r5, [r4, #0]
 8007e02:	61a5      	str	r5, [r4, #24]
 8007e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e08:	f7fd fafc 	bl	8005404 <memset>
 8007e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e14:	4620      	mov	r0, r4
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e18:	3468      	adds	r4, #104	; 0x68
 8007e1a:	e7d9      	b.n	8007dd0 <__sfp+0x1c>
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7ff ff62 	bl	8007ce8 <__sfmoreglue>
 8007e24:	4604      	mov	r4, r0
 8007e26:	6030      	str	r0, [r6, #0]
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1d5      	bne.n	8007dd8 <__sfp+0x24>
 8007e2c:	f7ff ff78 	bl	8007d20 <__sfp_lock_release>
 8007e30:	230c      	movs	r3, #12
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	e7ee      	b.n	8007e14 <__sfp+0x60>
 8007e36:	bf00      	nop
 8007e38:	080081c8 	.word	0x080081c8
 8007e3c:	ffff0001 	.word	0xffff0001

08007e40 <_fwalk_reent>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	4606      	mov	r6, r0
 8007e46:	4688      	mov	r8, r1
 8007e48:	2700      	movs	r7, #0
 8007e4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e52:	f1b9 0901 	subs.w	r9, r9, #1
 8007e56:	d505      	bpl.n	8007e64 <_fwalk_reent+0x24>
 8007e58:	6824      	ldr	r4, [r4, #0]
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	d1f7      	bne.n	8007e4e <_fwalk_reent+0xe>
 8007e5e:	4638      	mov	r0, r7
 8007e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e64:	89ab      	ldrh	r3, [r5, #12]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d907      	bls.n	8007e7a <_fwalk_reent+0x3a>
 8007e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	d003      	beq.n	8007e7a <_fwalk_reent+0x3a>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	47c0      	blx	r8
 8007e78:	4307      	orrs	r7, r0
 8007e7a:	3568      	adds	r5, #104	; 0x68
 8007e7c:	e7e9      	b.n	8007e52 <_fwalk_reent+0x12>

08007e7e <__swhatbuf_r>:
 8007e7e:	b570      	push	{r4, r5, r6, lr}
 8007e80:	460e      	mov	r6, r1
 8007e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e86:	4614      	mov	r4, r2
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	461d      	mov	r5, r3
 8007e8c:	b096      	sub	sp, #88	; 0x58
 8007e8e:	da07      	bge.n	8007ea0 <__swhatbuf_r+0x22>
 8007e90:	2300      	movs	r3, #0
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	89b3      	ldrh	r3, [r6, #12]
 8007e96:	061a      	lsls	r2, r3, #24
 8007e98:	d410      	bmi.n	8007ebc <__swhatbuf_r+0x3e>
 8007e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9e:	e00e      	b.n	8007ebe <__swhatbuf_r+0x40>
 8007ea0:	466a      	mov	r2, sp
 8007ea2:	f000 f903 	bl	80080ac <_fstat_r>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	dbf2      	blt.n	8007e90 <__swhatbuf_r+0x12>
 8007eaa:	9a01      	ldr	r2, [sp, #4]
 8007eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eb4:	425a      	negs	r2, r3
 8007eb6:	415a      	adcs	r2, r3
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	e7ee      	b.n	8007e9a <__swhatbuf_r+0x1c>
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	b016      	add	sp, #88	; 0x58
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ec8 <__smakebuf_r>:
 8007ec8:	898b      	ldrh	r3, [r1, #12]
 8007eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ecc:	079d      	lsls	r5, r3, #30
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	d507      	bpl.n	8007ee4 <__smakebuf_r+0x1c>
 8007ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	2301      	movs	r3, #1
 8007ede:	6163      	str	r3, [r4, #20]
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	466a      	mov	r2, sp
 8007ee6:	ab01      	add	r3, sp, #4
 8007ee8:	f7ff ffc9 	bl	8007e7e <__swhatbuf_r>
 8007eec:	9900      	ldr	r1, [sp, #0]
 8007eee:	4605      	mov	r5, r0
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7fd fadb 	bl	80054ac <_malloc_r>
 8007ef6:	b948      	cbnz	r0, 8007f0c <__smakebuf_r+0x44>
 8007ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efc:	059a      	lsls	r2, r3, #22
 8007efe:	d4ef      	bmi.n	8007ee0 <__smakebuf_r+0x18>
 8007f00:	f023 0303 	bic.w	r3, r3, #3
 8007f04:	f043 0302 	orr.w	r3, r3, #2
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	e7e3      	b.n	8007ed4 <__smakebuf_r+0xc>
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <__smakebuf_r+0x7c>)
 8007f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	6020      	str	r0, [r4, #0]
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	6120      	str	r0, [r4, #16]
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	b15b      	cbz	r3, 8007f3c <__smakebuf_r+0x74>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2a:	f000 f8d1 	bl	80080d0 <_isatty_r>
 8007f2e:	b128      	cbz	r0, 8007f3c <__smakebuf_r+0x74>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	89a0      	ldrh	r0, [r4, #12]
 8007f3e:	4305      	orrs	r5, r0
 8007f40:	81a5      	strh	r5, [r4, #12]
 8007f42:	e7cd      	b.n	8007ee0 <__smakebuf_r+0x18>
 8007f44:	08007cdd 	.word	0x08007cdd

08007f48 <_malloc_usable_size_r>:
 8007f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f4c:	1f18      	subs	r0, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfbc      	itt	lt
 8007f52:	580b      	ldrlt	r3, [r1, r0]
 8007f54:	18c0      	addlt	r0, r0, r3
 8007f56:	4770      	bx	lr

08007f58 <_raise_r>:
 8007f58:	291f      	cmp	r1, #31
 8007f5a:	b538      	push	{r3, r4, r5, lr}
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	d904      	bls.n	8007f6c <_raise_r+0x14>
 8007f62:	2316      	movs	r3, #22
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f6e:	b112      	cbz	r2, 8007f76 <_raise_r+0x1e>
 8007f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f74:	b94b      	cbnz	r3, 8007f8a <_raise_r+0x32>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f830 	bl	8007fdc <_getpid_r>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4601      	mov	r1, r0
 8007f80:	4620      	mov	r0, r4
 8007f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f86:	f000 b817 	b.w	8007fb8 <_kill_r>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d00a      	beq.n	8007fa4 <_raise_r+0x4c>
 8007f8e:	1c59      	adds	r1, r3, #1
 8007f90:	d103      	bne.n	8007f9a <_raise_r+0x42>
 8007f92:	2316      	movs	r3, #22
 8007f94:	6003      	str	r3, [r0, #0]
 8007f96:	2001      	movs	r0, #1
 8007f98:	e7e7      	b.n	8007f6a <_raise_r+0x12>
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa2:	4798      	blx	r3
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e7e0      	b.n	8007f6a <_raise_r+0x12>

08007fa8 <raise>:
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <raise+0xc>)
 8007faa:	4601      	mov	r1, r0
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f7ff bfd3 	b.w	8007f58 <_raise_r>
 8007fb2:	bf00      	nop
 8007fb4:	20000014 	.word	0x20000014

08007fb8 <_kill_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_kill_r+0x20>)
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	f7f9 fea6 	bl	8001d16 <_kill>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d102      	bne.n	8007fd4 <_kill_r+0x1c>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	b103      	cbz	r3, 8007fd4 <_kill_r+0x1c>
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000374 	.word	0x20000374

08007fdc <_getpid_r>:
 8007fdc:	f7f9 be94 	b.w	8001d08 <_getpid>

08007fe0 <__sread>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	f000 f894 	bl	8008114 <_read_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	bfab      	itete	ge
 8007ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff4:	181b      	addge	r3, r3, r0
 8007ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ffa:	bfac      	ite	ge
 8007ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffe:	81a3      	strhlt	r3, [r4, #12]
 8008000:	bd10      	pop	{r4, pc}

08008002 <__swrite>:
 8008002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	461f      	mov	r7, r3
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	4605      	mov	r5, r0
 800800c:	05db      	lsls	r3, r3, #23
 800800e:	460c      	mov	r4, r1
 8008010:	4616      	mov	r6, r2
 8008012:	d505      	bpl.n	8008020 <__swrite+0x1e>
 8008014:	2302      	movs	r3, #2
 8008016:	2200      	movs	r2, #0
 8008018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801c:	f000 f868 	bl	80080f0 <_lseek_r>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	4632      	mov	r2, r6
 8008024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	4628      	mov	r0, r5
 800802c:	463b      	mov	r3, r7
 800802e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008036:	f000 b817 	b.w	8008068 <_write_r>

0800803a <__sseek>:
 800803a:	b510      	push	{r4, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 f855 	bl	80080f0 <_lseek_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	bf15      	itete	ne
 800804c:	6560      	strne	r0, [r4, #84]	; 0x54
 800804e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008056:	81a3      	strheq	r3, [r4, #12]
 8008058:	bf18      	it	ne
 800805a:	81a3      	strhne	r3, [r4, #12]
 800805c:	bd10      	pop	{r4, pc}

0800805e <__sclose>:
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 b813 	b.w	800808c <_close_r>
	...

08008068 <_write_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	2200      	movs	r2, #0
 8008072:	4d05      	ldr	r5, [pc, #20]	; (8008088 <_write_r+0x20>)
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	f7f9 fe84 	bl	8001d84 <_write>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_write_r+0x1e>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_write_r+0x1e>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	20000374 	.word	0x20000374

0800808c <_close_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	2300      	movs	r3, #0
 8008090:	4d05      	ldr	r5, [pc, #20]	; (80080a8 <_close_r+0x1c>)
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 fe90 	bl	8001dbc <_close>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_close_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_close_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20000374 	.word	0x20000374

080080ac <_fstat_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	2300      	movs	r3, #0
 80080b0:	4d06      	ldr	r5, [pc, #24]	; (80080cc <_fstat_r+0x20>)
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	4611      	mov	r1, r2
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	f7f9 fe8a 	bl	8001dd2 <_fstat>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d102      	bne.n	80080c8 <_fstat_r+0x1c>
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	b103      	cbz	r3, 80080c8 <_fstat_r+0x1c>
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	bd38      	pop	{r3, r4, r5, pc}
 80080ca:	bf00      	nop
 80080cc:	20000374 	.word	0x20000374

080080d0 <_isatty_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	2300      	movs	r3, #0
 80080d4:	4d05      	ldr	r5, [pc, #20]	; (80080ec <_isatty_r+0x1c>)
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 fe88 	bl	8001df0 <_isatty>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_isatty_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_isatty_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20000374 	.word	0x20000374

080080f0 <_lseek_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4604      	mov	r4, r0
 80080f4:	4608      	mov	r0, r1
 80080f6:	4611      	mov	r1, r2
 80080f8:	2200      	movs	r2, #0
 80080fa:	4d05      	ldr	r5, [pc, #20]	; (8008110 <_lseek_r+0x20>)
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7f9 fe80 	bl	8001e04 <_lseek>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_lseek_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_lseek_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20000374 	.word	0x20000374

08008114 <_read_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	4611      	mov	r1, r2
 800811c:	2200      	movs	r2, #0
 800811e:	4d05      	ldr	r5, [pc, #20]	; (8008134 <_read_r+0x20>)
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7f9 fe11 	bl	8001d4a <_read>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_read_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_read_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20000374 	.word	0x20000374

08008138 <_init>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr

08008144 <_fini>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr
